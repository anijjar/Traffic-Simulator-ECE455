
ece455.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004930  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08004ac0  08004ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08004ac4  08004ac4  00014ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  20000000  08004ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
  6 .bss          00001e44  2000007c  2000007c  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20001ec0  20001ec0  0002007c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ee0a  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000263c  00000000  00000000  0002eeb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d88  00000000  00000000  000314f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c40  00000000  00000000  00032278  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005de6  00000000  00000000  00032eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004852  00000000  00000000  00038c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003d4f0  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003dac  00000000  00000000  0003d56c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004aa8 	.word	0x08004aa8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08004aa8 	.word	0x08004aa8

080001d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f103 0208 	add.w	r2, r3, #8
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f04f 32ff 	mov.w	r2, #4294967295
 80001e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f103 0208 	add.w	r2, r3, #8
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f103 0208 	add.w	r2, r3, #8
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2200      	movs	r2, #0
 800021c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr

0800022a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800022a:	b480      	push	{r7}
 800022c:	b085      	sub	sp, #20
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
 8000232:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	68fa      	ldr	r2, [r7, #12]
 800023e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	689a      	ldr	r2, [r3, #8]
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	683a      	ldr	r2, [r7, #0]
 800024e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	1c5a      	adds	r2, r3, #1
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	3714      	adds	r7, #20
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000288:	d103      	bne.n	8000292 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	691b      	ldr	r3, [r3, #16]
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	e00c      	b.n	80002ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3308      	adds	r3, #8
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	e002      	b.n	80002a0 <vListInsert+0x2e>
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d9f6      	bls.n	800029a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	685a      	ldr	r2, [r3, #4]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	683a      	ldr	r2, [r7, #0]
 80002ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	601a      	str	r2, [r3, #0]
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	6892      	ldr	r2, [r2, #8]
 80002fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	6852      	ldr	r2, [r2, #4]
 8000304:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	685a      	ldr	r2, [r3, #4]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	429a      	cmp	r2, r3
 800030e:	d103      	bne.n	8000318 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	689a      	ldr	r2, [r3, #8]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	1e5a      	subs	r2, r3, #1
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	681b      	ldr	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	3b04      	subs	r3, #4
 8000348:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	3b04      	subs	r3, #4
 8000356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	f023 0201 	bic.w	r2, r3, #1
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	3b04      	subs	r3, #4
 8000366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <pxPortInitialiseStack+0x64>)
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	3b14      	subs	r3, #20
 8000372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	3b04      	subs	r3, #4
 800037e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f06f 0202 	mvn.w	r2, #2
 8000386:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	3b20      	subs	r3, #32
 800038c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800038e:	68fb      	ldr	r3, [r7, #12]
}
 8000390:	4618      	mov	r0, r3
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	080003a1 	.word	0x080003a1

080003a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <prvTaskExitError+0x38>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003ae:	d009      	beq.n	80003c4 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80003b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003b4:	f383 8811 	msr	BASEPRI, r3
 80003b8:	f3bf 8f6f 	isb	sy
 80003bc:	f3bf 8f4f 	dsb	sy
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	e7fe      	b.n	80003c2 <prvTaskExitError+0x22>
 80003c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003c8:	f383 8811 	msr	BASEPRI, r3
 80003cc:	f3bf 8f6f 	isb	sy
 80003d0:	f3bf 8f4f 	dsb	sy
 80003d4:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 80003d6:	e7fe      	b.n	80003d6 <prvTaskExitError+0x36>
 80003d8:	20000000 	.word	0x20000000
 80003dc:	00000000 	.word	0x00000000

080003e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <pxCurrentTCBConst2>)
 80003e2:	6819      	ldr	r1, [r3, #0]
 80003e4:	6808      	ldr	r0, [r1, #0]
 80003e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003ea:	f380 8809 	msr	PSP, r0
 80003ee:	f3bf 8f6f 	isb	sy
 80003f2:	f04f 0000 	mov.w	r0, #0
 80003f6:	f380 8811 	msr	BASEPRI, r0
 80003fa:	4770      	bx	lr
 80003fc:	f3af 8000 	nop.w

08000400 <pxCurrentTCBConst2>:
 8000400:	20001ca8 	.word	0x20001ca8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000404:	bf00      	nop
 8000406:	bf00      	nop

08000408 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000408:	4806      	ldr	r0, [pc, #24]	; (8000424 <prvPortStartFirstTask+0x1c>)
 800040a:	6800      	ldr	r0, [r0, #0]
 800040c:	6800      	ldr	r0, [r0, #0]
 800040e:	f380 8808 	msr	MSP, r0
 8000412:	b662      	cpsie	i
 8000414:	b661      	cpsie	f
 8000416:	f3bf 8f4f 	dsb	sy
 800041a:	f3bf 8f6f 	isb	sy
 800041e:	df00      	svc	0
 8000420:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000422:	bf00      	nop
 8000424:	e000ed08 	.word	0xe000ed08

08000428 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800042e:	4b3b      	ldr	r3, [pc, #236]	; (800051c <xPortStartScheduler+0xf4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a3b      	ldr	r2, [pc, #236]	; (8000520 <xPortStartScheduler+0xf8>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d109      	bne.n	800044c <xPortStartScheduler+0x24>
 8000438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800043c:	f383 8811 	msr	BASEPRI, r3
 8000440:	f3bf 8f6f 	isb	sy
 8000444:	f3bf 8f4f 	dsb	sy
 8000448:	613b      	str	r3, [r7, #16]
 800044a:	e7fe      	b.n	800044a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800044c:	4b33      	ldr	r3, [pc, #204]	; (800051c <xPortStartScheduler+0xf4>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a34      	ldr	r2, [pc, #208]	; (8000524 <xPortStartScheduler+0xfc>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d109      	bne.n	800046a <xPortStartScheduler+0x42>
 8000456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800045a:	f383 8811 	msr	BASEPRI, r3
 800045e:	f3bf 8f6f 	isb	sy
 8000462:	f3bf 8f4f 	dsb	sy
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	e7fe      	b.n	8000468 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800046a:	4b2f      	ldr	r3, [pc, #188]	; (8000528 <xPortStartScheduler+0x100>)
 800046c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	b2db      	uxtb	r3, r3
 8000474:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	22ff      	movs	r2, #255	; 0xff
 800047a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b27      	ldr	r3, [pc, #156]	; (800052c <xPortStartScheduler+0x104>)
 8000490:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000492:	4b27      	ldr	r3, [pc, #156]	; (8000530 <xPortStartScheduler+0x108>)
 8000494:	2207      	movs	r2, #7
 8000496:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000498:	e009      	b.n	80004ae <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800049a:	4b25      	ldr	r3, [pc, #148]	; (8000530 <xPortStartScheduler+0x108>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	3b01      	subs	r3, #1
 80004a0:	4a23      	ldr	r2, [pc, #140]	; (8000530 <xPortStartScheduler+0x108>)
 80004a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004b6:	2b80      	cmp	r3, #128	; 0x80
 80004b8:	d0ef      	beq.n	800049a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80004ba:	4b1d      	ldr	r3, [pc, #116]	; (8000530 <xPortStartScheduler+0x108>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	021b      	lsls	r3, r3, #8
 80004c0:	4a1b      	ldr	r2, [pc, #108]	; (8000530 <xPortStartScheduler+0x108>)
 80004c2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80004c4:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <xPortStartScheduler+0x108>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80004cc:	4a18      	ldr	r2, [pc, #96]	; (8000530 <xPortStartScheduler+0x108>)
 80004ce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80004d8:	4a16      	ldr	r2, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80004e4:	4a13      	ldr	r2, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80004ee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80004f0:	f000 f8d2 	bl	8000698 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80004f4:	4b10      	ldr	r3, [pc, #64]	; (8000538 <xPortStartScheduler+0x110>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80004fa:	f000 f8e9 	bl	80006d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80004fe:	4a0f      	ldr	r2, [pc, #60]	; (800053c <xPortStartScheduler+0x114>)
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <xPortStartScheduler+0x114>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000508:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800050a:	f7ff ff7d 	bl	8000408 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800050e:	f7ff ff47 	bl	80003a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000512:	2300      	movs	r3, #0
}
 8000514:	4618      	mov	r0, r3
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	e000ed00 	.word	0xe000ed00
 8000520:	410fc271 	.word	0x410fc271
 8000524:	410fc270 	.word	0x410fc270
 8000528:	e000e400 	.word	0xe000e400
 800052c:	20000098 	.word	0x20000098
 8000530:	2000009c 	.word	0x2000009c
 8000534:	e000ed20 	.word	0xe000ed20
 8000538:	20000000 	.word	0x20000000
 800053c:	e000ef34 	.word	0xe000ef34

08000540 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800054a:	f383 8811 	msr	BASEPRI, r3
 800054e:	f3bf 8f6f 	isb	sy
 8000552:	f3bf 8f4f 	dsb	sy
 8000556:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000558:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <vPortEnterCritical+0x54>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <vPortEnterCritical+0x54>)
 8000560:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <vPortEnterCritical+0x54>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d10e      	bne.n	8000588 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <vPortEnterCritical+0x58>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d009      	beq.n	8000588 <vPortEnterCritical+0x48>
 8000574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000578:	f383 8811 	msr	BASEPRI, r3
 800057c:	f3bf 8f6f 	isb	sy
 8000580:	f3bf 8f4f 	dsb	sy
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	e7fe      	b.n	8000586 <vPortEnterCritical+0x46>
	}
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	20000000 	.word	0x20000000
 8000598:	e000ed04 	.word	0xe000ed04

0800059c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <vPortExitCritical+0x4c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d109      	bne.n	80005be <vPortExitCritical+0x22>
 80005aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ae:	f383 8811 	msr	BASEPRI, r3
 80005b2:	f3bf 8f6f 	isb	sy
 80005b6:	f3bf 8f4f 	dsb	sy
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	e7fe      	b.n	80005bc <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <vPortExitCritical+0x4c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d104      	bne.n	80005da <vPortExitCritical+0x3e>
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000000 	.word	0x20000000
 80005ec:	00000000 	.word	0x00000000

080005f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80005f0:	f3ef 8009 	mrs	r0, PSP
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <pxCurrentTCBConst>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	f01e 0f10 	tst.w	lr, #16
 8000600:	bf08      	it	eq
 8000602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800060a:	6010      	str	r0, [r2, #0]
 800060c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8000610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000614:	f380 8811 	msr	BASEPRI, r0
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f001 f8e8 	bl	80017f4 <vTaskSwitchContext>
 8000624:	f04f 0000 	mov.w	r0, #0
 8000628:	f380 8811 	msr	BASEPRI, r0
 800062c:	bc08      	pop	{r3}
 800062e:	6819      	ldr	r1, [r3, #0]
 8000630:	6808      	ldr	r0, [r1, #0]
 8000632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000636:	f01e 0f10 	tst.w	lr, #16
 800063a:	bf08      	it	eq
 800063c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000640:	f380 8809 	msr	PSP, r0
 8000644:	f3bf 8f6f 	isb	sy
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	f3af 8000 	nop.w

08000650 <pxCurrentTCBConst>:
 8000650:	20001ca8 	.word	0x20001ca8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000654:	bf00      	nop
 8000656:	bf00      	nop

08000658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	__asm volatile
 800065e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000662:	f383 8811 	msr	BASEPRI, r3
 8000666:	f3bf 8f6f 	isb	sy
 800066a:	f3bf 8f4f 	dsb	sy
 800066e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000670:	f001 f804 	bl	800167c <xTaskIncrementTick>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d003      	beq.n	8000682 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <SysTick_Handler+0x3c>)
 800067c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	e000ed04 	.word	0xe000ed04

08000698 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800069c:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <vPortSetupTimerInterrupt+0x28>)
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <vPortSetupTimerInterrupt+0x2c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4909      	ldr	r1, [pc, #36]	; (80006c8 <vPortSetupTimerInterrupt+0x30>)
 80006a4:	fba1 1303 	umull	r1, r3, r1, r3
 80006a8:	099b      	lsrs	r3, r3, #6
 80006aa:	3b01      	subs	r3, #1
 80006ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <vPortSetupTimerInterrupt+0x34>)
 80006b0:	2207      	movs	r2, #7
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000e014 	.word	0xe000e014
 80006c4:	20000014 	.word	0x20000014
 80006c8:	10624dd3 	.word	0x10624dd3
 80006cc:	e000e010 	.word	0xe000e010

080006d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80006d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80006e0 <vPortEnableVFP+0x10>
 80006d4:	6801      	ldr	r1, [r0, #0]
 80006d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006da:	6001      	str	r1, [r0, #0]
 80006dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80006de:	bf00      	nop
 80006e0:	e000ed88 	.word	0xe000ed88

080006e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80006ea:	f3ef 8305 	mrs	r3, IPSR
 80006ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b0f      	cmp	r3, #15
 80006f4:	d913      	bls.n	800071e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80006f6:	4a16      	ldr	r2, [pc, #88]	; (8000750 <vPortValidateInterruptPriority+0x6c>)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <vPortValidateInterruptPriority+0x70>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	7afa      	ldrb	r2, [r7, #11]
 8000706:	429a      	cmp	r2, r3
 8000708:	d209      	bcs.n	800071e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800070a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070e:	f383 8811 	msr	BASEPRI, r3
 8000712:	f3bf 8f6f 	isb	sy
 8000716:	f3bf 8f4f 	dsb	sy
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	e7fe      	b.n	800071c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <vPortValidateInterruptPriority+0x74>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <vPortValidateInterruptPriority+0x78>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	429a      	cmp	r2, r3
 800072c:	d909      	bls.n	8000742 <vPortValidateInterruptPriority+0x5e>
 800072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000732:	f383 8811 	msr	BASEPRI, r3
 8000736:	f3bf 8f6f 	isb	sy
 800073a:	f3bf 8f4f 	dsb	sy
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	e7fe      	b.n	8000740 <vPortValidateInterruptPriority+0x5c>
	}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000e3f0 	.word	0xe000e3f0
 8000754:	20000098 	.word	0x20000098
 8000758:	e000ed0c 	.word	0xe000ed0c
 800075c:	2000009c 	.word	0x2000009c

08000760 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	2b00      	cmp	r3, #0
 8000774:	d004      	beq.n	8000780 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	f023 0307 	bic.w	r3, r3, #7
 800077c:	3308      	adds	r3, #8
 800077e:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8000780:	f000 fec2 	bl	8001508 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8000784:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <pvPortMalloc+0x80>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d105      	bne.n	8000798 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <pvPortMalloc+0x84>)
 800078e:	f023 0307 	bic.w	r3, r3, #7
 8000792:	461a      	mov	r2, r3
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <pvPortMalloc+0x80>)
 8000796:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <pvPortMalloc+0x88>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4413      	add	r3, r2
 80007a0:	f641 32f7 	movw	r2, #7159	; 0x1bf7
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d813      	bhi.n	80007d0 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <pvPortMalloc+0x88>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	441a      	add	r2, r3
 80007b0:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <pvPortMalloc+0x88>)
 80007b2:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d90b      	bls.n	80007d0 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <pvPortMalloc+0x80>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <pvPortMalloc+0x88>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4413      	add	r3, r2
 80007c2:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <pvPortMalloc+0x88>)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4413      	add	r3, r2
 80007cc:	4a06      	ldr	r2, [pc, #24]	; (80007e8 <pvPortMalloc+0x88>)
 80007ce:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80007d0:	f000 fea8 	bl	8001524 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 80007d4:	68fb      	ldr	r3, [r7, #12]
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20001ca4 	.word	0x20001ca4
 80007e4:	200000a8 	.word	0x200000a8
 80007e8:	20001ca0 	.word	0x20001ca0

080007ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d009      	beq.n	800080e <vPortFree+0x22>
 80007fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007fe:	f383 8811 	msr	BASEPRI, r3
 8000802:	f3bf 8f6f 	isb	sy
 8000806:	f3bf 8f4f 	dsb	sy
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	e7fe      	b.n	800080c <vPortFree+0x20>
}
 800080e:	bf00      	nop
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d109      	bne.n	8000844 <xQueueGenericReset+0x28>
 8000830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000834:	f383 8811 	msr	BASEPRI, r3
 8000838:	f3bf 8f6f 	isb	sy
 800083c:	f3bf 8f4f 	dsb	sy
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	e7fe      	b.n	8000842 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000844:	f7ff fe7c 	bl	8000540 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000850:	68f9      	ldr	r1, [r7, #12]
 8000852:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000854:	fb01 f303 	mul.w	r3, r1, r3
 8000858:	441a      	add	r2, r3
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	2200      	movs	r2, #0
 8000862:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000874:	3b01      	subs	r3, #1
 8000876:	68f9      	ldr	r1, [r7, #12]
 8000878:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800087a:	fb01 f303 	mul.w	r3, r1, r3
 800087e:	441a      	add	r2, r3
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	22ff      	movs	r2, #255	; 0xff
 8000888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	22ff      	movs	r2, #255	; 0xff
 8000890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d114      	bne.n	80008c4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	691b      	ldr	r3, [r3, #16]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d01a      	beq.n	80008d8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	3310      	adds	r3, #16
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 f84c 	bl	8001944 <xTaskRemoveFromEventList>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d012      	beq.n	80008d8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <xQueueGenericReset+0xcc>)
 80008b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	f3bf 8f4f 	dsb	sy
 80008be:	f3bf 8f6f 	isb	sy
 80008c2:	e009      	b.n	80008d8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	3310      	adds	r3, #16
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fc81 	bl	80001d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	3324      	adds	r3, #36	; 0x24
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fc7c 	bl	80001d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80008d8:	f7ff fe60 	bl	800059c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80008dc:	2301      	movs	r3, #1
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	e000ed04 	.word	0xe000ed04

080008ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af02      	add	r7, sp, #8
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	4613      	mov	r3, r2
 80008f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d109      	bne.n	8000914 <xQueueGenericCreate+0x28>
 8000900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000904:	f383 8811 	msr	BASEPRI, r3
 8000908:	f3bf 8f6f 	isb	sy
 800090c:	f3bf 8f4f 	dsb	sy
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	e7fe      	b.n	8000912 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d102      	bne.n	8000920 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
 800091e:	e004      	b.n	800092a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	fb02 f303 	mul.w	r3, r2, r3
 8000928:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	3348      	adds	r3, #72	; 0x48
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff ff16 	bl	8000760 <pvPortMalloc>
 8000934:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000936:	69bb      	ldr	r3, [r7, #24]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d00b      	beq.n	8000954 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	3348      	adds	r3, #72	; 0x48
 8000940:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000942:	79fa      	ldrb	r2, [r7, #7]
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	4613      	mov	r3, r2
 800094a:	697a      	ldr	r2, [r7, #20]
 800094c:	68b9      	ldr	r1, [r7, #8]
 800094e:	68f8      	ldr	r0, [r7, #12]
 8000950:	f000 f805 	bl	800095e <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8000954:	69bb      	ldr	r3, [r7, #24]
	}
 8000956:	4618      	mov	r0, r3
 8000958:	3720      	adds	r7, #32
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b084      	sub	sp, #16
 8000962:	af00      	add	r7, sp, #0
 8000964:	60f8      	str	r0, [r7, #12]
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d103      	bne.n	800097a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	e002      	b.n	8000980 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800097a:	69bb      	ldr	r3, [r7, #24]
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	68ba      	ldr	r2, [r7, #8]
 800098a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800098c:	2101      	movs	r1, #1
 800098e:	69b8      	ldr	r0, [r7, #24]
 8000990:	f7ff ff44 	bl	800081c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000994:	bf00      	nop
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08e      	sub	sp, #56	; 0x38
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
 80009a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80009aa:	2300      	movs	r3, #0
 80009ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80009b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d109      	bne.n	80009cc <xQueueGenericSend+0x30>
 80009b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009bc:	f383 8811 	msr	BASEPRI, r3
 80009c0:	f3bf 8f6f 	isb	sy
 80009c4:	f3bf 8f4f 	dsb	sy
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80009ca:	e7fe      	b.n	80009ca <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d103      	bne.n	80009da <xQueueGenericSend+0x3e>
 80009d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d101      	bne.n	80009de <xQueueGenericSend+0x42>
 80009da:	2301      	movs	r3, #1
 80009dc:	e000      	b.n	80009e0 <xQueueGenericSend+0x44>
 80009de:	2300      	movs	r3, #0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d109      	bne.n	80009f8 <xQueueGenericSend+0x5c>
 80009e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009e8:	f383 8811 	msr	BASEPRI, r3
 80009ec:	f3bf 8f6f 	isb	sy
 80009f0:	f3bf 8f4f 	dsb	sy
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
 80009f6:	e7fe      	b.n	80009f6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	d103      	bne.n	8000a06 <xQueueGenericSend+0x6a>
 80009fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d101      	bne.n	8000a0a <xQueueGenericSend+0x6e>
 8000a06:	2301      	movs	r3, #1
 8000a08:	e000      	b.n	8000a0c <xQueueGenericSend+0x70>
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d109      	bne.n	8000a24 <xQueueGenericSend+0x88>
 8000a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a14:	f383 8811 	msr	BASEPRI, r3
 8000a18:	f3bf 8f6f 	isb	sy
 8000a1c:	f3bf 8f4f 	dsb	sy
 8000a20:	623b      	str	r3, [r7, #32]
 8000a22:	e7fe      	b.n	8000a22 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000a24:	f001 f948 	bl	8001cb8 <xTaskGetSchedulerState>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d102      	bne.n	8000a34 <xQueueGenericSend+0x98>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d101      	bne.n	8000a38 <xQueueGenericSend+0x9c>
 8000a34:	2301      	movs	r3, #1
 8000a36:	e000      	b.n	8000a3a <xQueueGenericSend+0x9e>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d109      	bne.n	8000a52 <xQueueGenericSend+0xb6>
 8000a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a42:	f383 8811 	msr	BASEPRI, r3
 8000a46:	f3bf 8f6f 	isb	sy
 8000a4a:	f3bf 8f4f 	dsb	sy
 8000a4e:	61fb      	str	r3, [r7, #28]
 8000a50:	e7fe      	b.n	8000a50 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000a52:	f7ff fd75 	bl	8000540 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d302      	bcc.n	8000a68 <xQueueGenericSend+0xcc>
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d129      	bne.n	8000abc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000a68:	683a      	ldr	r2, [r7, #0]
 8000a6a:	68b9      	ldr	r1, [r7, #8]
 8000a6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a6e:	f000 fa35 	bl	8000edc <prvCopyDataToQueue>
 8000a72:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d010      	beq.n	8000a9e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a7e:	3324      	adds	r3, #36	; 0x24
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 ff5f 	bl	8001944 <xTaskRemoveFromEventList>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d013      	beq.n	8000ab4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000a8c:	4b3f      	ldr	r3, [pc, #252]	; (8000b8c <xQueueGenericSend+0x1f0>)
 8000a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	f3bf 8f4f 	dsb	sy
 8000a98:	f3bf 8f6f 	isb	sy
 8000a9c:	e00a      	b.n	8000ab4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d007      	beq.n	8000ab4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000aa4:	4b39      	ldr	r3, [pc, #228]	; (8000b8c <xQueueGenericSend+0x1f0>)
 8000aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	f3bf 8f4f 	dsb	sy
 8000ab0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000ab4:	f7ff fd72 	bl	800059c <vPortExitCritical>
				return pdPASS;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e063      	b.n	8000b84 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d103      	bne.n	8000aca <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000ac2:	f7ff fd6b 	bl	800059c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e05c      	b.n	8000b84 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d106      	bne.n	8000ade <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 ff97 	bl	8001a08 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000ada:	2301      	movs	r3, #1
 8000adc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000ade:	f7ff fd5d 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000ae2:	f000 fd11 	bl	8001508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000ae6:	f7ff fd2b 	bl	8000540 <vPortEnterCritical>
 8000aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000af0:	b25b      	sxtb	r3, r3
 8000af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af6:	d103      	bne.n	8000b00 <xQueueGenericSend+0x164>
 8000af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000afa:	2200      	movs	r2, #0
 8000afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b06:	b25b      	sxtb	r3, r3
 8000b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b0c:	d103      	bne.n	8000b16 <xQueueGenericSend+0x17a>
 8000b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b10:	2200      	movs	r2, #0
 8000b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000b16:	f7ff fd41 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000b1a:	1d3a      	adds	r2, r7, #4
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4611      	mov	r1, r2
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 ff94 	bl	8001a50 <xTaskCheckForTimeOut>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d124      	bne.n	8000b78 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000b2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b30:	f000 facc 	bl	80010cc <prvIsQueueFull>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d018      	beq.n	8000b6c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b3c:	3310      	adds	r3, #16
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	4611      	mov	r1, r2
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 feb0 	bl	80018a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b4a:	f000 fa57 	bl	8000ffc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000b4e:	f000 fce9 	bl	8001524 <xTaskResumeAll>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	f47f af7c 	bne.w	8000a52 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <xQueueGenericSend+0x1f0>)
 8000b5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	f3bf 8f4f 	dsb	sy
 8000b66:	f3bf 8f6f 	isb	sy
 8000b6a:	e772      	b.n	8000a52 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b6e:	f000 fa45 	bl	8000ffc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000b72:	f000 fcd7 	bl	8001524 <xTaskResumeAll>
 8000b76:	e76c      	b.n	8000a52 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000b78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b7a:	f000 fa3f 	bl	8000ffc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000b7e:	f000 fcd1 	bl	8001524 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000b82:	2300      	movs	r3, #0
		}
	}
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3738      	adds	r7, #56	; 0x38
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	e000ed04 	.word	0xe000ed04

08000b90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08e      	sub	sp, #56	; 0x38
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
 8000b9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d109      	bne.n	8000bbc <xQueueGenericSendFromISR+0x2c>
 8000ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bac:	f383 8811 	msr	BASEPRI, r3
 8000bb0:	f3bf 8f6f 	isb	sy
 8000bb4:	f3bf 8f4f 	dsb	sy
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8000bba:	e7fe      	b.n	8000bba <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d103      	bne.n	8000bca <xQueueGenericSendFromISR+0x3a>
 8000bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d101      	bne.n	8000bce <xQueueGenericSendFromISR+0x3e>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e000      	b.n	8000bd0 <xQueueGenericSendFromISR+0x40>
 8000bce:	2300      	movs	r3, #0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d109      	bne.n	8000be8 <xQueueGenericSendFromISR+0x58>
 8000bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bd8:	f383 8811 	msr	BASEPRI, r3
 8000bdc:	f3bf 8f6f 	isb	sy
 8000be0:	f3bf 8f4f 	dsb	sy
 8000be4:	623b      	str	r3, [r7, #32]
 8000be6:	e7fe      	b.n	8000be6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d103      	bne.n	8000bf6 <xQueueGenericSendFromISR+0x66>
 8000bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d101      	bne.n	8000bfa <xQueueGenericSendFromISR+0x6a>
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e000      	b.n	8000bfc <xQueueGenericSendFromISR+0x6c>
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d109      	bne.n	8000c14 <xQueueGenericSendFromISR+0x84>
 8000c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c04:	f383 8811 	msr	BASEPRI, r3
 8000c08:	f3bf 8f6f 	isb	sy
 8000c0c:	f3bf 8f4f 	dsb	sy
 8000c10:	61fb      	str	r3, [r7, #28]
 8000c12:	e7fe      	b.n	8000c12 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000c14:	f7ff fd66 	bl	80006e4 <vPortValidateInterruptPriority>
	__asm volatile
 8000c18:	f3ef 8211 	mrs	r2, BASEPRI
 8000c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c20:	f383 8811 	msr	BASEPRI, r3
 8000c24:	f3bf 8f6f 	isb	sy
 8000c28:	f3bf 8f4f 	dsb	sy
 8000c2c:	61ba      	str	r2, [r7, #24]
 8000c2e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8000c30:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d302      	bcc.n	8000c46 <xQueueGenericSendFromISR+0xb6>
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d12c      	bne.n	8000ca0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000c50:	683a      	ldr	r2, [r7, #0]
 8000c52:	68b9      	ldr	r1, [r7, #8]
 8000c54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c56:	f000 f941 	bl	8000edc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000c5a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c62:	d112      	bne.n	8000c8a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d016      	beq.n	8000c9a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c6e:	3324      	adds	r3, #36	; 0x24
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 fe67 	bl	8001944 <xTaskRemoveFromEventList>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d00e      	beq.n	8000c9a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d00b      	beq.n	8000c9a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2201      	movs	r2, #1
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	e007      	b.n	8000c9a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000c8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c8e:	3301      	adds	r3, #1
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	b25a      	sxtb	r2, r3
 8000c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8000c9e:	e001      	b.n	8000ca4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8000ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca6:	613b      	str	r3, [r7, #16]
	__asm volatile
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3738      	adds	r7, #56	; 0x38
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08e      	sub	sp, #56	; 0x38
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
 8000cc4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d109      	bne.n	8000ce8 <xQueueGenericReceive+0x30>
	__asm volatile
 8000cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cd8:	f383 8811 	msr	BASEPRI, r3
 8000cdc:	f3bf 8f6f 	isb	sy
 8000ce0:	f3bf 8f4f 	dsb	sy
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ce6:	e7fe      	b.n	8000ce6 <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d103      	bne.n	8000cf6 <xQueueGenericReceive+0x3e>
 8000cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d101      	bne.n	8000cfa <xQueueGenericReceive+0x42>
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e000      	b.n	8000cfc <xQueueGenericReceive+0x44>
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d109      	bne.n	8000d14 <xQueueGenericReceive+0x5c>
 8000d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d04:	f383 8811 	msr	BASEPRI, r3
 8000d08:	f3bf 8f6f 	isb	sy
 8000d0c:	f3bf 8f4f 	dsb	sy
 8000d10:	623b      	str	r3, [r7, #32]
 8000d12:	e7fe      	b.n	8000d12 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d14:	f000 ffd0 	bl	8001cb8 <xTaskGetSchedulerState>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d102      	bne.n	8000d24 <xQueueGenericReceive+0x6c>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d101      	bne.n	8000d28 <xQueueGenericReceive+0x70>
 8000d24:	2301      	movs	r3, #1
 8000d26:	e000      	b.n	8000d2a <xQueueGenericReceive+0x72>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d109      	bne.n	8000d42 <xQueueGenericReceive+0x8a>
 8000d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d32:	f383 8811 	msr	BASEPRI, r3
 8000d36:	f3bf 8f6f 	isb	sy
 8000d3a:	f3bf 8f4f 	dsb	sy
 8000d3e:	61fb      	str	r3, [r7, #28]
 8000d40:	e7fe      	b.n	8000d40 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8000d42:	f7ff fbfd 	bl	8000540 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d046      	beq.n	8000de0 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8000d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000d58:	68b9      	ldr	r1, [r7, #8]
 8000d5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d5c:	f000 f928 	bl	8000fb0 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d121      	bne.n	8000daa <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8000d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d68:	1e5a      	subs	r2, r3, #1
 8000d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d6c:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d104      	bne.n	8000d80 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8000d76:	f001 f8b7 	bl	8001ee8 <pvTaskIncrementMutexHeldCount>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d7e:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d82:	691b      	ldr	r3, [r3, #16]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d027      	beq.n	8000dd8 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d8a:	3310      	adds	r3, #16
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 fdd9 	bl	8001944 <xTaskRemoveFromEventList>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d01f      	beq.n	8000dd8 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8000d98:	4b4f      	ldr	r3, [pc, #316]	; (8000ed8 <xQueueGenericReceive+0x220>)
 8000d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	f3bf 8f4f 	dsb	sy
 8000da4:	f3bf 8f6f 	isb	sy
 8000da8:	e016      	b.n	8000dd8 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8000daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dae:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d00f      	beq.n	8000dd8 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dba:	3324      	adds	r3, #36	; 0x24
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 fdc1 	bl	8001944 <xTaskRemoveFromEventList>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d007      	beq.n	8000dd8 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8000dc8:	4b43      	ldr	r3, [pc, #268]	; (8000ed8 <xQueueGenericReceive+0x220>)
 8000dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	f3bf 8f4f 	dsb	sy
 8000dd4:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8000dd8:	f7ff fbe0 	bl	800059c <vPortExitCritical>
				return pdPASS;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e077      	b.n	8000ed0 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d103      	bne.n	8000dee <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000de6:	f7ff fbd9 	bl	800059c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e070      	b.n	8000ed0 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d106      	bne.n	8000e02 <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 fe05 	bl	8001a08 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000e02:	f7ff fbcb 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000e06:	f000 fb7f 	bl	8001508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000e0a:	f7ff fb99 	bl	8000540 <vPortEnterCritical>
 8000e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e14:	b25b      	sxtb	r3, r3
 8000e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e1a:	d103      	bne.n	8000e24 <xQueueGenericReceive+0x16c>
 8000e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e30:	d103      	bne.n	8000e3a <xQueueGenericReceive+0x182>
 8000e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e3a:	f7ff fbaf 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e3e:	1d3a      	adds	r2, r7, #4
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4611      	mov	r1, r2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 fe02 	bl	8001a50 <xTaskCheckForTimeOut>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d131      	bne.n	8000eb6 <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e54:	f000 f924 	bl	80010a0 <prvIsQueueEmpty>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d025      	beq.n	8000eaa <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d108      	bne.n	8000e78 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8000e66:	f7ff fb6b 	bl	8000540 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8000e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 ff40 	bl	8001cf4 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8000e74:	f7ff fb92 	bl	800059c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e7a:	3324      	adds	r3, #36	; 0x24
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	4611      	mov	r1, r2
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 fd11 	bl	80018a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000e86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e88:	f000 f8b8 	bl	8000ffc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000e8c:	f000 fb4a 	bl	8001524 <xTaskResumeAll>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f47f af55 	bne.w	8000d42 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <xQueueGenericReceive+0x220>)
 8000e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	f3bf 8f4f 	dsb	sy
 8000ea4:	f3bf 8f6f 	isb	sy
 8000ea8:	e74b      	b.n	8000d42 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000eaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000eac:	f000 f8a6 	bl	8000ffc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000eb0:	f000 fb38 	bl	8001524 <xTaskResumeAll>
 8000eb4:	e745      	b.n	8000d42 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8000eb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000eb8:	f000 f8a0 	bl	8000ffc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000ebc:	f000 fb32 	bl	8001524 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000ec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ec2:	f000 f8ed 	bl	80010a0 <prvIsQueueEmpty>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f43f af3a 	beq.w	8000d42 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8000ece:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3738      	adds	r7, #56	; 0x38
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	e000ed04 	.word	0xe000ed04

08000edc <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ef0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d10d      	bne.n	8000f16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d14d      	bne.n	8000f9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 ff6a 	bl	8001de0 <xTaskPriorityDisinherit>
 8000f0c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2200      	movs	r2, #0
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	e043      	b.n	8000f9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d119      	bne.n	8000f50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	6898      	ldr	r0, [r3, #8]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	461a      	mov	r2, r3
 8000f26:	68b9      	ldr	r1, [r7, #8]
 8000f28:	f003 f854 	bl	8003fd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	441a      	add	r2, r3
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d32b      	bcc.n	8000f9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	e026      	b.n	8000f9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	68d8      	ldr	r0, [r3, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	461a      	mov	r2, r3
 8000f5a:	68b9      	ldr	r1, [r7, #8]
 8000f5c:	f003 f83a 	bl	8003fd4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	68da      	ldr	r2, [r3, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	425b      	negs	r3, r3
 8000f6a:	441a      	add	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d207      	bcs.n	8000f8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	685a      	ldr	r2, [r3, #4]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	425b      	negs	r3, r3
 8000f86:	441a      	add	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d105      	bne.n	8000f9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d002      	beq.n	8000f9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	1c5a      	adds	r2, r3, #1
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8000fa6:	697b      	ldr	r3, [r7, #20]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d018      	beq.n	8000ff4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	68da      	ldr	r2, [r3, #12]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	441a      	add	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68da      	ldr	r2, [r3, #12]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d303      	bcc.n	8000fe4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68d9      	ldr	r1, [r3, #12]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	461a      	mov	r2, r3
 8000fee:	6838      	ldr	r0, [r7, #0]
 8000ff0:	f002 fff0 	bl	8003fd4 <memcpy>
	}
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001004:	f7ff fa9c 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800100e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001010:	e011      	b.n	8001036 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001016:	2b00      	cmp	r3, #0
 8001018:	d012      	beq.n	8001040 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3324      	adds	r3, #36	; 0x24
 800101e:	4618      	mov	r0, r3
 8001020:	f000 fc90 	bl	8001944 <xTaskRemoveFromEventList>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800102a:	f000 fd6f 	bl	8001b0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	3b01      	subs	r3, #1
 8001032:	b2db      	uxtb	r3, r3
 8001034:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103a:	2b00      	cmp	r3, #0
 800103c:	dce9      	bgt.n	8001012 <prvUnlockQueue+0x16>
 800103e:	e000      	b.n	8001042 <prvUnlockQueue+0x46>
					break;
 8001040:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	22ff      	movs	r2, #255	; 0xff
 8001046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800104a:	f7ff faa7 	bl	800059c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800104e:	f7ff fa77 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001058:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800105a:	e011      	b.n	8001080 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d012      	beq.n	800108a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3310      	adds	r3, #16
 8001068:	4618      	mov	r0, r3
 800106a:	f000 fc6b 	bl	8001944 <xTaskRemoveFromEventList>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001074:	f000 fd4a 	bl	8001b0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001078:	7bbb      	ldrb	r3, [r7, #14]
 800107a:	3b01      	subs	r3, #1
 800107c:	b2db      	uxtb	r3, r3
 800107e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001080:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001084:	2b00      	cmp	r3, #0
 8001086:	dce9      	bgt.n	800105c <prvUnlockQueue+0x60>
 8001088:	e000      	b.n	800108c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800108a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	22ff      	movs	r2, #255	; 0xff
 8001090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001094:	f7ff fa82 	bl	800059c <vPortExitCritical>
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80010a8:	f7ff fa4a 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d102      	bne.n	80010ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80010b4:	2301      	movs	r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	e001      	b.n	80010be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80010be:	f7ff fa6d 	bl	800059c <vPortExitCritical>

	return xReturn;
 80010c2:	68fb      	ldr	r3, [r7, #12]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80010d4:	f7ff fa34 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d102      	bne.n	80010ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80010e4:	2301      	movs	r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	e001      	b.n	80010ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80010ee:	f7ff fa55 	bl	800059c <vPortExitCritical>

	return xReturn;
 80010f2:	68fb      	ldr	r3, [r7, #12]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	e014      	b.n	8001136 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800110c:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <vQueueAddToRegistry+0x4c>)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10b      	bne.n	8001130 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001118:	490b      	ldr	r1, [pc, #44]	; (8001148 <vQueueAddToRegistry+0x4c>)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001122:	4a09      	ldr	r2, [pc, #36]	; (8001148 <vQueueAddToRegistry+0x4c>)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	4413      	add	r3, r2
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800112e:	e005      	b.n	800113c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	3301      	adds	r3, #1
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2b07      	cmp	r3, #7
 800113a:	d9e7      	bls.n	800110c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	20001e00 	.word	0x20001e00

0800114c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800115c:	f7ff f9f0 	bl	8000540 <vPortEnterCritical>
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001166:	b25b      	sxtb	r3, r3
 8001168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800116c:	d103      	bne.n	8001176 <vQueueWaitForMessageRestricted+0x2a>
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	2200      	movs	r2, #0
 8001172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800117c:	b25b      	sxtb	r3, r3
 800117e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001182:	d103      	bne.n	800118c <vQueueWaitForMessageRestricted+0x40>
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800118c:	f7ff fa06 	bl	800059c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001194:	2b00      	cmp	r3, #0
 8001196:	d106      	bne.n	80011a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	3324      	adds	r3, #36	; 0x24
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	68b9      	ldr	r1, [r7, #8]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 fba5 	bl	80018f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80011a6:	6978      	ldr	r0, [r7, #20]
 80011a8:	f7ff ff28 	bl	8000ffc <prvUnlockQueue>
	}
 80011ac:	bf00      	nop
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08c      	sub	sp, #48	; 0x30
 80011b8:	af04      	add	r7, sp, #16
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	4613      	mov	r3, r2
 80011c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80011c4:	88fb      	ldrh	r3, [r7, #6]
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fac9 	bl	8000760 <pvPortMalloc>
 80011ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00e      	beq.n	80011f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80011d6:	2050      	movs	r0, #80	; 0x50
 80011d8:	f7ff fac2 	bl	8000760 <pvPortMalloc>
 80011dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	631a      	str	r2, [r3, #48]	; 0x30
 80011ea:	e005      	b.n	80011f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80011ec:	6978      	ldr	r0, [r7, #20]
 80011ee:	f7ff fafd 	bl	80007ec <vPortFree>
 80011f2:	e001      	b.n	80011f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d013      	beq.n	8001226 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80011fe:	88fa      	ldrh	r2, [r7, #6]
 8001200:	2300      	movs	r3, #0
 8001202:	9303      	str	r3, [sp, #12]
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	9302      	str	r3, [sp, #8]
 8001208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	68b9      	ldr	r1, [r7, #8]
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f000 f80e 	bl	8001236 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800121a:	69f8      	ldr	r0, [r7, #28]
 800121c:	f000 f88a 	bl	8001334 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001220:	2301      	movs	r3, #1
 8001222:	61bb      	str	r3, [r7, #24]
 8001224:	e002      	b.n	800122c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
 800122a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800122c:	69bb      	ldr	r3, [r7, #24]
	}
 800122e:	4618      	mov	r0, r3
 8001230:	3720      	adds	r7, #32
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b088      	sub	sp, #32
 800123a:	af00      	add	r7, sp, #0
 800123c:	60f8      	str	r0, [r7, #12]
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800124e:	3b01      	subs	r3, #1
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	f023 0307 	bic.w	r3, r3, #7
 800125c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	2b00      	cmp	r3, #0
 8001266:	d009      	beq.n	800127c <prvInitialiseNewTask+0x46>
 8001268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800126c:	f383 8811 	msr	BASEPRI, r3
 8001270:	f3bf 8f6f 	isb	sy
 8001274:	f3bf 8f4f 	dsb	sy
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	e7fe      	b.n	800127a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	e012      	b.n	80012a8 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	4413      	add	r3, r2
 8001288:	7819      	ldrb	r1, [r3, #0]
 800128a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	4413      	add	r3, r2
 8001290:	3334      	adds	r3, #52	; 0x34
 8001292:	460a      	mov	r2, r1
 8001294:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	4413      	add	r3, r2
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d006      	beq.n	80012b0 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3301      	adds	r3, #1
 80012a6:	61fb      	str	r3, [r7, #28]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	2b09      	cmp	r3, #9
 80012ac:	d9e9      	bls.n	8001282 <prvInitialiseNewTask+0x4c>
 80012ae:	e000      	b.n	80012b2 <prvInitialiseNewTask+0x7c>
		{
			break;
 80012b0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80012b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80012ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012bc:	2b04      	cmp	r3, #4
 80012be:	d901      	bls.n	80012c4 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80012c0:	2304      	movs	r3, #4
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80012c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80012ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012ce:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 80012d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d2:	2200      	movs	r2, #0
 80012d4:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80012d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d8:	3304      	adds	r3, #4
 80012da:	4618      	mov	r0, r3
 80012dc:	f7fe ff98 	bl	8000210 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80012e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e2:	3318      	adds	r3, #24
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7fe ff93 	bl	8000210 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80012ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80012f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f2:	f1c3 0205 	rsb	r2, r3, #5
 80012f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80012fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001302:	2200      	movs	r2, #0
 8001304:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001308:	2200      	movs	r2, #0
 800130a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	68f9      	ldr	r1, [r7, #12]
 8001312:	69b8      	ldr	r0, [r7, #24]
 8001314:	f7ff f810 	bl	8000338 <pxPortInitialiseStack>
 8001318:	4602      	mov	r2, r0
 800131a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800131c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800131e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001328:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800132a:	bf00      	nop
 800132c:	3720      	adds	r7, #32
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800133c:	f7ff f900 	bl	8000540 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001340:	4b2a      	ldr	r3, [pc, #168]	; (80013ec <prvAddNewTaskToReadyList+0xb8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	4a29      	ldr	r2, [pc, #164]	; (80013ec <prvAddNewTaskToReadyList+0xb8>)
 8001348:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800134a:	4b29      	ldr	r3, [pc, #164]	; (80013f0 <prvAddNewTaskToReadyList+0xbc>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d109      	bne.n	8001366 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001352:	4a27      	ldr	r2, [pc, #156]	; (80013f0 <prvAddNewTaskToReadyList+0xbc>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001358:	4b24      	ldr	r3, [pc, #144]	; (80013ec <prvAddNewTaskToReadyList+0xb8>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d110      	bne.n	8001382 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001360:	f000 fbf8 	bl	8001b54 <prvInitialiseTaskLists>
 8001364:	e00d      	b.n	8001382 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001366:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <prvAddNewTaskToReadyList+0xc0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d109      	bne.n	8001382 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800136e:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <prvAddNewTaskToReadyList+0xbc>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001378:	429a      	cmp	r2, r3
 800137a:	d802      	bhi.n	8001382 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800137c:	4a1c      	ldr	r2, [pc, #112]	; (80013f0 <prvAddNewTaskToReadyList+0xbc>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001382:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <prvAddNewTaskToReadyList+0xc4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	3301      	adds	r3, #1
 8001388:	4a1b      	ldr	r2, [pc, #108]	; (80013f8 <prvAddNewTaskToReadyList+0xc4>)
 800138a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001390:	2201      	movs	r2, #1
 8001392:	409a      	lsls	r2, r3
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <prvAddNewTaskToReadyList+0xc8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4313      	orrs	r3, r2
 800139a:	4a18      	ldr	r2, [pc, #96]	; (80013fc <prvAddNewTaskToReadyList+0xc8>)
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013a2:	4613      	mov	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4a15      	ldr	r2, [pc, #84]	; (8001400 <prvAddNewTaskToReadyList+0xcc>)
 80013ac:	441a      	add	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3304      	adds	r3, #4
 80013b2:	4619      	mov	r1, r3
 80013b4:	4610      	mov	r0, r2
 80013b6:	f7fe ff38 	bl	800022a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80013ba:	f7ff f8ef 	bl	800059c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80013be:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <prvAddNewTaskToReadyList+0xc0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00e      	beq.n	80013e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <prvAddNewTaskToReadyList+0xbc>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d207      	bcs.n	80013e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <prvAddNewTaskToReadyList+0xd0>)
 80013d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	f3bf 8f4f 	dsb	sy
 80013e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20001d80 	.word	0x20001d80
 80013f0:	20001ca8 	.word	0x20001ca8
 80013f4:	20001d8c 	.word	0x20001d8c
 80013f8:	20001d9c 	.word	0x20001d9c
 80013fc:	20001d88 	.word	0x20001d88
 8001400:	20001cac 	.word	0x20001cac
 8001404:	e000ed04 	.word	0xe000ed04

08001408 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d016      	beq.n	8001448 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <vTaskDelay+0x60>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d009      	beq.n	8001436 <vTaskDelay+0x2e>
 8001422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001426:	f383 8811 	msr	BASEPRI, r3
 800142a:	f3bf 8f6f 	isb	sy
 800142e:	f3bf 8f4f 	dsb	sy
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	e7fe      	b.n	8001434 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001436:	f000 f867 	bl	8001508 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800143a:	2100      	movs	r1, #0
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 fd67 	bl	8001f10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001442:	f000 f86f 	bl	8001524 <xTaskResumeAll>
 8001446:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d107      	bne.n	800145e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800144e:	4b07      	ldr	r3, [pc, #28]	; (800146c <vTaskDelay+0x64>)
 8001450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	f3bf 8f4f 	dsb	sy
 800145a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20001da8 	.word	0x20001da8
 800146c:	e000ed04 	.word	0xe000ed04

08001470 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001476:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <vTaskStartScheduler+0x80>)
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	2300      	movs	r3, #0
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2300      	movs	r3, #0
 8001480:	2282      	movs	r2, #130	; 0x82
 8001482:	491c      	ldr	r1, [pc, #112]	; (80014f4 <vTaskStartScheduler+0x84>)
 8001484:	481c      	ldr	r0, [pc, #112]	; (80014f8 <vTaskStartScheduler+0x88>)
 8001486:	f7ff fe95 	bl	80011b4 <xTaskCreate>
 800148a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d102      	bne.n	8001498 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8001492:	f000 fda3 	bl	8001fdc <xTimerCreateTimerTask>
 8001496:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d115      	bne.n	80014ca <vTaskStartScheduler+0x5a>
 800149e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014a2:	f383 8811 	msr	BASEPRI, r3
 80014a6:	f3bf 8f6f 	isb	sy
 80014aa:	f3bf 8f4f 	dsb	sy
 80014ae:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <vTaskStartScheduler+0x8c>)
 80014b2:	f04f 32ff 	mov.w	r2, #4294967295
 80014b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <vTaskStartScheduler+0x90>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <vTaskStartScheduler+0x94>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80014c4:	f7fe ffb0 	bl	8000428 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80014c8:	e00d      	b.n	80014e6 <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d0:	d109      	bne.n	80014e6 <vTaskStartScheduler+0x76>
 80014d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014d6:	f383 8811 	msr	BASEPRI, r3
 80014da:	f3bf 8f6f 	isb	sy
 80014de:	f3bf 8f4f 	dsb	sy
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	e7fe      	b.n	80014e4 <vTaskStartScheduler+0x74>
}
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20001da4 	.word	0x20001da4
 80014f4:	0800495c 	.word	0x0800495c
 80014f8:	08001b25 	.word	0x08001b25
 80014fc:	20001da0 	.word	0x20001da0
 8001500:	20001d8c 	.word	0x20001d8c
 8001504:	20001d84 	.word	0x20001d84

08001508 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <vTaskSuspendAll+0x18>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	3301      	adds	r3, #1
 8001512:	4a03      	ldr	r2, [pc, #12]	; (8001520 <vTaskSuspendAll+0x18>)
 8001514:	6013      	str	r3, [r2, #0]
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	20001da8 	.word	0x20001da8

08001524 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001532:	4b41      	ldr	r3, [pc, #260]	; (8001638 <xTaskResumeAll+0x114>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d109      	bne.n	800154e <xTaskResumeAll+0x2a>
 800153a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800153e:	f383 8811 	msr	BASEPRI, r3
 8001542:	f3bf 8f6f 	isb	sy
 8001546:	f3bf 8f4f 	dsb	sy
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	e7fe      	b.n	800154c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800154e:	f7fe fff7 	bl	8000540 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001552:	4b39      	ldr	r3, [pc, #228]	; (8001638 <xTaskResumeAll+0x114>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	3b01      	subs	r3, #1
 8001558:	4a37      	ldr	r2, [pc, #220]	; (8001638 <xTaskResumeAll+0x114>)
 800155a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800155c:	4b36      	ldr	r3, [pc, #216]	; (8001638 <xTaskResumeAll+0x114>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d161      	bne.n	8001628 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001564:	4b35      	ldr	r3, [pc, #212]	; (800163c <xTaskResumeAll+0x118>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d05d      	beq.n	8001628 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800156c:	e02e      	b.n	80015cc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800156e:	4b34      	ldr	r3, [pc, #208]	; (8001640 <xTaskResumeAll+0x11c>)
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3318      	adds	r3, #24
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe feb2 	bl	80002e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3304      	adds	r3, #4
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe fead 	bl	80002e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	2201      	movs	r2, #1
 8001590:	409a      	lsls	r2, r3
 8001592:	4b2c      	ldr	r3, [pc, #176]	; (8001644 <xTaskResumeAll+0x120>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4313      	orrs	r3, r2
 8001598:	4a2a      	ldr	r2, [pc, #168]	; (8001644 <xTaskResumeAll+0x120>)
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4a27      	ldr	r2, [pc, #156]	; (8001648 <xTaskResumeAll+0x124>)
 80015aa:	441a      	add	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	3304      	adds	r3, #4
 80015b0:	4619      	mov	r1, r3
 80015b2:	4610      	mov	r0, r2
 80015b4:	f7fe fe39 	bl	800022a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015bc:	4b23      	ldr	r3, [pc, #140]	; (800164c <xTaskResumeAll+0x128>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d302      	bcc.n	80015cc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80015c6:	4b22      	ldr	r3, [pc, #136]	; (8001650 <xTaskResumeAll+0x12c>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80015cc:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <xTaskResumeAll+0x11c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1cc      	bne.n	800156e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80015da:	f000 fb47 	bl	8001c6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80015de:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <xTaskResumeAll+0x130>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d010      	beq.n	800160c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80015ea:	f000 f847 	bl	800167c <xTaskIncrementTick>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d002      	beq.n	80015fa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80015f4:	4b16      	ldr	r3, [pc, #88]	; (8001650 <xTaskResumeAll+0x12c>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3b01      	subs	r3, #1
 80015fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f1      	bne.n	80015ea <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8001606:	4b13      	ldr	r3, [pc, #76]	; (8001654 <xTaskResumeAll+0x130>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800160c:	4b10      	ldr	r3, [pc, #64]	; (8001650 <xTaskResumeAll+0x12c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d009      	beq.n	8001628 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001614:	2301      	movs	r3, #1
 8001616:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <xTaskResumeAll+0x134>)
 800161a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	f3bf 8f4f 	dsb	sy
 8001624:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001628:	f7fe ffb8 	bl	800059c <vPortExitCritical>

	return xAlreadyYielded;
 800162c:	68bb      	ldr	r3, [r7, #8]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20001da8 	.word	0x20001da8
 800163c:	20001d80 	.word	0x20001d80
 8001640:	20001d40 	.word	0x20001d40
 8001644:	20001d88 	.word	0x20001d88
 8001648:	20001cac 	.word	0x20001cac
 800164c:	20001ca8 	.word	0x20001ca8
 8001650:	20001d94 	.word	0x20001d94
 8001654:	20001d90 	.word	0x20001d90
 8001658:	e000ed04 	.word	0xe000ed04

0800165c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001662:	4b05      	ldr	r3, [pc, #20]	; (8001678 <xTaskGetTickCount+0x1c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001668:	687b      	ldr	r3, [r7, #4]
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20001d84 	.word	0x20001d84

0800167c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001686:	4b50      	ldr	r3, [pc, #320]	; (80017c8 <xTaskIncrementTick+0x14c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	f040 808c 	bne.w	80017a8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8001690:	4b4e      	ldr	r3, [pc, #312]	; (80017cc <xTaskIncrementTick+0x150>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	3301      	adds	r3, #1
 8001696:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001698:	4a4c      	ldr	r2, [pc, #304]	; (80017cc <xTaskIncrementTick+0x150>)
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d11f      	bne.n	80016e4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80016a4:	4b4a      	ldr	r3, [pc, #296]	; (80017d0 <xTaskIncrementTick+0x154>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d009      	beq.n	80016c2 <xTaskIncrementTick+0x46>
 80016ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016b2:	f383 8811 	msr	BASEPRI, r3
 80016b6:	f3bf 8f6f 	isb	sy
 80016ba:	f3bf 8f4f 	dsb	sy
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	e7fe      	b.n	80016c0 <xTaskIncrementTick+0x44>
 80016c2:	4b43      	ldr	r3, [pc, #268]	; (80017d0 <xTaskIncrementTick+0x154>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	4b42      	ldr	r3, [pc, #264]	; (80017d4 <xTaskIncrementTick+0x158>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a40      	ldr	r2, [pc, #256]	; (80017d0 <xTaskIncrementTick+0x154>)
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	4a40      	ldr	r2, [pc, #256]	; (80017d4 <xTaskIncrementTick+0x158>)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	4b40      	ldr	r3, [pc, #256]	; (80017d8 <xTaskIncrementTick+0x15c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	3301      	adds	r3, #1
 80016dc:	4a3e      	ldr	r2, [pc, #248]	; (80017d8 <xTaskIncrementTick+0x15c>)
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	f000 fac4 	bl	8001c6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80016e4:	4b3d      	ldr	r3, [pc, #244]	; (80017dc <xTaskIncrementTick+0x160>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d34d      	bcc.n	800178a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80016ee:	4b38      	ldr	r3, [pc, #224]	; (80017d0 <xTaskIncrementTick+0x154>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <xTaskIncrementTick+0x80>
 80016f8:	2301      	movs	r3, #1
 80016fa:	e000      	b.n	80016fe <xTaskIncrementTick+0x82>
 80016fc:	2300      	movs	r3, #0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d004      	beq.n	800170c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001702:	4b36      	ldr	r3, [pc, #216]	; (80017dc <xTaskIncrementTick+0x160>)
 8001704:	f04f 32ff 	mov.w	r2, #4294967295
 8001708:	601a      	str	r2, [r3, #0]
					break;
 800170a:	e03e      	b.n	800178a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800170c:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <xTaskIncrementTick+0x154>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	429a      	cmp	r2, r3
 8001722:	d203      	bcs.n	800172c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001724:	4a2d      	ldr	r2, [pc, #180]	; (80017dc <xTaskIncrementTick+0x160>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6013      	str	r3, [r2, #0]
						break;
 800172a:	e02e      	b.n	800178a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	3304      	adds	r3, #4
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe fdd7 	bl	80002e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173a:	2b00      	cmp	r3, #0
 800173c:	d004      	beq.n	8001748 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	3318      	adds	r3, #24
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe fdce 	bl	80002e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174c:	2201      	movs	r2, #1
 800174e:	409a      	lsls	r2, r3
 8001750:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <xTaskIncrementTick+0x164>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4313      	orrs	r3, r2
 8001756:	4a22      	ldr	r2, [pc, #136]	; (80017e0 <xTaskIncrementTick+0x164>)
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4a1f      	ldr	r2, [pc, #124]	; (80017e4 <xTaskIncrementTick+0x168>)
 8001768:	441a      	add	r2, r3
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	3304      	adds	r3, #4
 800176e:	4619      	mov	r1, r3
 8001770:	4610      	mov	r0, r2
 8001772:	f7fe fd5a 	bl	800022a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800177a:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <xTaskIncrementTick+0x16c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	429a      	cmp	r2, r3
 8001782:	d3b4      	bcc.n	80016ee <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001784:	2301      	movs	r3, #1
 8001786:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001788:	e7b1      	b.n	80016ee <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800178a:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <xTaskIncrementTick+0x16c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001790:	4914      	ldr	r1, [pc, #80]	; (80017e4 <xTaskIncrementTick+0x168>)
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	440b      	add	r3, r1
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d907      	bls.n	80017b2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80017a2:	2301      	movs	r3, #1
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	e004      	b.n	80017b2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80017a8:	4b10      	ldr	r3, [pc, #64]	; (80017ec <xTaskIncrementTick+0x170>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	3301      	adds	r3, #1
 80017ae:	4a0f      	ldr	r2, [pc, #60]	; (80017ec <xTaskIncrementTick+0x170>)
 80017b0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <xTaskIncrementTick+0x174>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80017ba:	2301      	movs	r3, #1
 80017bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80017be:	697b      	ldr	r3, [r7, #20]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20001da8 	.word	0x20001da8
 80017cc:	20001d84 	.word	0x20001d84
 80017d0:	20001d38 	.word	0x20001d38
 80017d4:	20001d3c 	.word	0x20001d3c
 80017d8:	20001d98 	.word	0x20001d98
 80017dc:	20001da0 	.word	0x20001da0
 80017e0:	20001d88 	.word	0x20001d88
 80017e4:	20001cac 	.word	0x20001cac
 80017e8:	20001ca8 	.word	0x20001ca8
 80017ec:	20001d90 	.word	0x20001d90
 80017f0:	20001d94 	.word	0x20001d94

080017f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80017f4:	b480      	push	{r7}
 80017f6:	b087      	sub	sp, #28
 80017f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80017fa:	4b26      	ldr	r3, [pc, #152]	; (8001894 <vTaskSwitchContext+0xa0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001802:	4b25      	ldr	r3, [pc, #148]	; (8001898 <vTaskSwitchContext+0xa4>)
 8001804:	2201      	movs	r2, #1
 8001806:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001808:	e03e      	b.n	8001888 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800180a:	4b23      	ldr	r3, [pc, #140]	; (8001898 <vTaskSwitchContext+0xa4>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001810:	4b22      	ldr	r3, [pc, #136]	; (800189c <vTaskSwitchContext+0xa8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	fab3 f383 	clz	r3, r3
 800181c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800181e:	7afb      	ldrb	r3, [r7, #11]
 8001820:	f1c3 031f 	rsb	r3, r3, #31
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	491e      	ldr	r1, [pc, #120]	; (80018a0 <vTaskSwitchContext+0xac>)
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	440b      	add	r3, r1
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d109      	bne.n	800184e <vTaskSwitchContext+0x5a>
	__asm volatile
 800183a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800183e:	f383 8811 	msr	BASEPRI, r3
 8001842:	f3bf 8f6f 	isb	sy
 8001846:	f3bf 8f4f 	dsb	sy
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	e7fe      	b.n	800184c <vTaskSwitchContext+0x58>
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4a11      	ldr	r2, [pc, #68]	; (80018a0 <vTaskSwitchContext+0xac>)
 800185a:	4413      	add	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	3308      	adds	r3, #8
 8001870:	429a      	cmp	r2, r3
 8001872:	d104      	bne.n	800187e <vTaskSwitchContext+0x8a>
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	4a07      	ldr	r2, [pc, #28]	; (80018a4 <vTaskSwitchContext+0xb0>)
 8001886:	6013      	str	r3, [r2, #0]
}
 8001888:	bf00      	nop
 800188a:	371c      	adds	r7, #28
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	20001da8 	.word	0x20001da8
 8001898:	20001d94 	.word	0x20001d94
 800189c:	20001d88 	.word	0x20001d88
 80018a0:	20001cac 	.word	0x20001cac
 80018a4:	20001ca8 	.word	0x20001ca8

080018a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d109      	bne.n	80018cc <vTaskPlaceOnEventList+0x24>
 80018b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018bc:	f383 8811 	msr	BASEPRI, r3
 80018c0:	f3bf 8f6f 	isb	sy
 80018c4:	f3bf 8f4f 	dsb	sy
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	e7fe      	b.n	80018ca <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80018cc:	4b07      	ldr	r3, [pc, #28]	; (80018ec <vTaskPlaceOnEventList+0x44>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	3318      	adds	r3, #24
 80018d2:	4619      	mov	r1, r3
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7fe fccc 	bl	8000272 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80018da:	2101      	movs	r1, #1
 80018dc:	6838      	ldr	r0, [r7, #0]
 80018de:	f000 fb17 	bl	8001f10 <prvAddCurrentTaskToDelayedList>
}
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20001ca8 	.word	0x20001ca8

080018f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d109      	bne.n	8001916 <vTaskPlaceOnEventListRestricted+0x26>
 8001902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001906:	f383 8811 	msr	BASEPRI, r3
 800190a:	f3bf 8f6f 	isb	sy
 800190e:	f3bf 8f4f 	dsb	sy
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	e7fe      	b.n	8001914 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <vTaskPlaceOnEventListRestricted+0x50>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	3318      	adds	r3, #24
 800191c:	4619      	mov	r1, r3
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f7fe fc83 	bl	800022a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d002      	beq.n	8001930 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
 800192e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	68b8      	ldr	r0, [r7, #8]
 8001934:	f000 faec 	bl	8001f10 <prvAddCurrentTaskToDelayedList>
	}
 8001938:	bf00      	nop
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20001ca8 	.word	0x20001ca8

08001944 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d109      	bne.n	800196e <xTaskRemoveFromEventList+0x2a>
 800195a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800195e:	f383 8811 	msr	BASEPRI, r3
 8001962:	f3bf 8f6f 	isb	sy
 8001966:	f3bf 8f4f 	dsb	sy
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	e7fe      	b.n	800196c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	3318      	adds	r3, #24
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fcb6 	bl	80002e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001978:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <xTaskRemoveFromEventList+0xac>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d11c      	bne.n	80019ba <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	3304      	adds	r3, #4
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fcad 	bl	80002e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	2201      	movs	r2, #1
 8001990:	409a      	lsls	r2, r3
 8001992:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <xTaskRemoveFromEventList+0xb0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4313      	orrs	r3, r2
 8001998:	4a16      	ldr	r2, [pc, #88]	; (80019f4 <xTaskRemoveFromEventList+0xb0>)
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a0:	4613      	mov	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4a13      	ldr	r2, [pc, #76]	; (80019f8 <xTaskRemoveFromEventList+0xb4>)
 80019aa:	441a      	add	r2, r3
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	3304      	adds	r3, #4
 80019b0:	4619      	mov	r1, r3
 80019b2:	4610      	mov	r0, r2
 80019b4:	f7fe fc39 	bl	800022a <vListInsertEnd>
 80019b8:	e005      	b.n	80019c6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	3318      	adds	r3, #24
 80019be:	4619      	mov	r1, r3
 80019c0:	480e      	ldr	r0, [pc, #56]	; (80019fc <xTaskRemoveFromEventList+0xb8>)
 80019c2:	f7fe fc32 	bl	800022a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ca:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <xTaskRemoveFromEventList+0xbc>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d905      	bls.n	80019e0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80019d4:	2301      	movs	r3, #1
 80019d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80019d8:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <xTaskRemoveFromEventList+0xc0>)
 80019da:	2201      	movs	r2, #1
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	e001      	b.n	80019e4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80019e4:	697b      	ldr	r3, [r7, #20]
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20001da8 	.word	0x20001da8
 80019f4:	20001d88 	.word	0x20001d88
 80019f8:	20001cac 	.word	0x20001cac
 80019fc:	20001d40 	.word	0x20001d40
 8001a00:	20001ca8 	.word	0x20001ca8
 8001a04:	20001d94 	.word	0x20001d94

08001a08 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d109      	bne.n	8001a2a <vTaskSetTimeOutState+0x22>
 8001a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a1a:	f383 8811 	msr	BASEPRI, r3
 8001a1e:	f3bf 8f6f 	isb	sy
 8001a22:	f3bf 8f4f 	dsb	sy
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	e7fe      	b.n	8001a28 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <vTaskSetTimeOutState+0x40>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <vTaskSetTimeOutState+0x44>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	605a      	str	r2, [r3, #4]
}
 8001a3a:	bf00      	nop
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20001d98 	.word	0x20001d98
 8001a4c:	20001d84 	.word	0x20001d84

08001a50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d109      	bne.n	8001a74 <xTaskCheckForTimeOut+0x24>
 8001a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a64:	f383 8811 	msr	BASEPRI, r3
 8001a68:	f3bf 8f6f 	isb	sy
 8001a6c:	f3bf 8f4f 	dsb	sy
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	e7fe      	b.n	8001a72 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d109      	bne.n	8001a8e <xTaskCheckForTimeOut+0x3e>
 8001a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a7e:	f383 8811 	msr	BASEPRI, r3
 8001a82:	f3bf 8f6f 	isb	sy
 8001a86:	f3bf 8f4f 	dsb	sy
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	e7fe      	b.n	8001a8c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8001a8e:	f7fe fd57 	bl	8000540 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001a92:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <xTaskCheckForTimeOut+0xb4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa0:	d102      	bne.n	8001aa8 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	e026      	b.n	8001af6 <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <xTaskCheckForTimeOut+0xb8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d007      	beq.n	8001ac4 <xTaskCheckForTimeOut+0x74>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d802      	bhi.n	8001ac4 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	e018      	b.n	8001af6 <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	1ad2      	subs	r2, r2, r3
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d20e      	bcs.n	8001af2 <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6859      	ldr	r1, [r3, #4]
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1acb      	subs	r3, r1, r3
 8001ae0:	441a      	add	r2, r3
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff ff8e 	bl	8001a08 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	e001      	b.n	8001af6 <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8001af2:	2301      	movs	r3, #1
 8001af4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8001af6:	f7fe fd51 	bl	800059c <vPortExitCritical>

	return xReturn;
 8001afa:	697b      	ldr	r3, [r7, #20]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20001d84 	.word	0x20001d84
 8001b08:	20001d98 	.word	0x20001d98

08001b0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <vTaskMissedYield+0x14>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	20001d94 	.word	0x20001d94

08001b24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001b2c:	f000 f852 	bl	8001bd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <prvIdleTask+0x28>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d9f9      	bls.n	8001b2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <prvIdleTask+0x2c>)
 8001b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	f3bf 8f4f 	dsb	sy
 8001b44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001b48:	e7f0      	b.n	8001b2c <prvIdleTask+0x8>
 8001b4a:	bf00      	nop
 8001b4c:	20001cac 	.word	0x20001cac
 8001b50:	e000ed04 	.word	0xe000ed04

08001b54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
 8001b5e:	e00c      	b.n	8001b7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <prvInitialiseTaskLists+0x60>)
 8001b6c:	4413      	add	r3, r2
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fb2e 	bl	80001d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3301      	adds	r3, #1
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b04      	cmp	r3, #4
 8001b7e:	d9ef      	bls.n	8001b60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001b80:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <prvInitialiseTaskLists+0x64>)
 8001b82:	f7fe fb25 	bl	80001d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001b86:	480d      	ldr	r0, [pc, #52]	; (8001bbc <prvInitialiseTaskLists+0x68>)
 8001b88:	f7fe fb22 	bl	80001d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001b8c:	480c      	ldr	r0, [pc, #48]	; (8001bc0 <prvInitialiseTaskLists+0x6c>)
 8001b8e:	f7fe fb1f 	bl	80001d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001b92:	480c      	ldr	r0, [pc, #48]	; (8001bc4 <prvInitialiseTaskLists+0x70>)
 8001b94:	f7fe fb1c 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001b98:	480b      	ldr	r0, [pc, #44]	; (8001bc8 <prvInitialiseTaskLists+0x74>)
 8001b9a:	f7fe fb19 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <prvInitialiseTaskLists+0x78>)
 8001ba0:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <prvInitialiseTaskLists+0x64>)
 8001ba2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <prvInitialiseTaskLists+0x7c>)
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <prvInitialiseTaskLists+0x68>)
 8001ba8:	601a      	str	r2, [r3, #0]
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20001cac 	.word	0x20001cac
 8001bb8:	20001d10 	.word	0x20001d10
 8001bbc:	20001d24 	.word	0x20001d24
 8001bc0:	20001d40 	.word	0x20001d40
 8001bc4:	20001d54 	.word	0x20001d54
 8001bc8:	20001d6c 	.word	0x20001d6c
 8001bcc:	20001d38 	.word	0x20001d38
 8001bd0:	20001d3c 	.word	0x20001d3c

08001bd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001bda:	e028      	b.n	8001c2e <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8001bdc:	f7ff fc94 	bl	8001508 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001be0:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <prvCheckTasksWaitingTermination+0x6c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	bf0c      	ite	eq
 8001be8:	2301      	moveq	r3, #1
 8001bea:	2300      	movne	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8001bf0:	f7ff fc98 	bl	8001524 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d119      	bne.n	8001c2e <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8001bfa:	f7fe fca1 	bl	8000540 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <prvCheckTasksWaitingTermination+0x6c>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fb6a 	bl	80002e4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <prvCheckTasksWaitingTermination+0x70>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	3b01      	subs	r3, #1
 8001c16:	4a0b      	ldr	r2, [pc, #44]	; (8001c44 <prvCheckTasksWaitingTermination+0x70>)
 8001c18:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <prvCheckTasksWaitingTermination+0x74>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	4a09      	ldr	r2, [pc, #36]	; (8001c48 <prvCheckTasksWaitingTermination+0x74>)
 8001c22:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8001c24:	f7fe fcba 	bl	800059c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8001c28:	6838      	ldr	r0, [r7, #0]
 8001c2a:	f000 f80f 	bl	8001c4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <prvCheckTasksWaitingTermination+0x74>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1d2      	bne.n	8001bdc <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20001d54 	.word	0x20001d54
 8001c44:	20001d80 	.word	0x20001d80
 8001c48:	20001d68 	.word	0x20001d68

08001c4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fdc7 	bl	80007ec <vPortFree>
			vPortFree( pxTCB );
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7fe fdc4 	bl	80007ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c72:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <prvResetNextTaskUnblockTime+0x44>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <prvResetNextTaskUnblockTime+0x14>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <prvResetNextTaskUnblockTime+0x16>
 8001c80:	2300      	movs	r3, #0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d004      	beq.n	8001c90 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <prvResetNextTaskUnblockTime+0x48>)
 8001c88:	f04f 32ff 	mov.w	r2, #4294967295
 8001c8c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001c8e:	e008      	b.n	8001ca2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001c90:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <prvResetNextTaskUnblockTime+0x44>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	4a05      	ldr	r2, [pc, #20]	; (8001cb4 <prvResetNextTaskUnblockTime+0x48>)
 8001ca0:	6013      	str	r3, [r2, #0]
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	20001d38 	.word	0x20001d38
 8001cb4:	20001da0 	.word	0x20001da0

08001cb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <xTaskGetSchedulerState+0x34>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d102      	bne.n	8001ccc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	607b      	str	r3, [r7, #4]
 8001cca:	e008      	b.n	8001cde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <xTaskGetSchedulerState+0x38>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d102      	bne.n	8001cda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	e001      	b.n	8001cde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001cde:	687b      	ldr	r3, [r7, #4]
	}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	20001d8c 	.word	0x20001d8c
 8001cf0:	20001da8 	.word	0x20001da8

08001cf4 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d062      	beq.n	8001dcc <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d0a:	4b32      	ldr	r3, [pc, #200]	; (8001dd4 <vTaskPriorityInherit+0xe0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d25b      	bcs.n	8001dcc <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	db06      	blt.n	8001d2a <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d1c:	4b2d      	ldr	r3, [pc, #180]	; (8001dd4 <vTaskPriorityInherit+0xe0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d22:	f1c3 0205 	rsb	r2, r3, #5
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6959      	ldr	r1, [r3, #20]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4a27      	ldr	r2, [pc, #156]	; (8001dd8 <vTaskPriorityInherit+0xe4>)
 8001d3c:	4413      	add	r3, r2
 8001d3e:	4299      	cmp	r1, r3
 8001d40:	d101      	bne.n	8001d46 <vTaskPriorityInherit+0x52>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <vTaskPriorityInherit+0x54>
 8001d46:	2300      	movs	r3, #0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d03a      	beq.n	8001dc2 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	3304      	adds	r3, #4
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fac7 	bl	80002e4 <uxListRemove>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d115      	bne.n	8001d88 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d60:	491d      	ldr	r1, [pc, #116]	; (8001dd8 <vTaskPriorityInherit+0xe4>)
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10a      	bne.n	8001d88 <vTaskPriorityInherit+0x94>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d76:	2201      	movs	r2, #1
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43da      	mvns	r2, r3
 8001d7e:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <vTaskPriorityInherit+0xe8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4013      	ands	r3, r2
 8001d84:	4a15      	ldr	r2, [pc, #84]	; (8001ddc <vTaskPriorityInherit+0xe8>)
 8001d86:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001d88:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <vTaskPriorityInherit+0xe0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d96:	2201      	movs	r2, #1
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <vTaskPriorityInherit+0xe8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	4a0e      	ldr	r2, [pc, #56]	; (8001ddc <vTaskPriorityInherit+0xe8>)
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4a09      	ldr	r2, [pc, #36]	; (8001dd8 <vTaskPriorityInherit+0xe4>)
 8001db2:	441a      	add	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	3304      	adds	r3, #4
 8001db8:	4619      	mov	r1, r3
 8001dba:	4610      	mov	r0, r2
 8001dbc:	f7fe fa35 	bl	800022a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001dc0:	e004      	b.n	8001dcc <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001dc2:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <vTaskPriorityInherit+0xe0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8001dcc:	bf00      	nop
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20001ca8 	.word	0x20001ca8
 8001dd8:	20001cac 	.word	0x20001cac
 8001ddc:	20001d88 	.word	0x20001d88

08001de0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d06c      	beq.n	8001ed0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8001df6:	4b39      	ldr	r3, [pc, #228]	; (8001edc <xTaskPriorityDisinherit+0xfc>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d009      	beq.n	8001e14 <xTaskPriorityDisinherit+0x34>
 8001e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e04:	f383 8811 	msr	BASEPRI, r3
 8001e08:	f3bf 8f6f 	isb	sy
 8001e0c:	f3bf 8f4f 	dsb	sy
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	e7fe      	b.n	8001e12 <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d109      	bne.n	8001e30 <xTaskPriorityDisinherit+0x50>
 8001e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e20:	f383 8811 	msr	BASEPRI, r3
 8001e24:	f3bf 8f6f 	isb	sy
 8001e28:	f3bf 8f4f 	dsb	sy
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	e7fe      	b.n	8001e2e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e34:	1e5a      	subs	r2, r3, #1
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d044      	beq.n	8001ed0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d140      	bne.n	8001ed0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	3304      	adds	r3, #4
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fa46 	bl	80002e4 <uxListRemove>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d115      	bne.n	8001e8a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e62:	491f      	ldr	r1, [pc, #124]	; (8001ee0 <xTaskPriorityDisinherit+0x100>)
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10a      	bne.n	8001e8a <xTaskPriorityDisinherit+0xaa>
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	2201      	movs	r2, #1
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <xTaskPriorityDisinherit+0x104>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4013      	ands	r3, r2
 8001e86:	4a17      	ldr	r2, [pc, #92]	; (8001ee4 <xTaskPriorityDisinherit+0x104>)
 8001e88:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e96:	f1c3 0205 	rsb	r2, r3, #5
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	409a      	lsls	r2, r3
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <xTaskPriorityDisinherit+0x104>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	4a0d      	ldr	r2, [pc, #52]	; (8001ee4 <xTaskPriorityDisinherit+0x104>)
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4a08      	ldr	r2, [pc, #32]	; (8001ee0 <xTaskPriorityDisinherit+0x100>)
 8001ebe:	441a      	add	r2, r3
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	f7fe f9af 	bl	800022a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001ed0:	697b      	ldr	r3, [r7, #20]
	}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20001ca8 	.word	0x20001ca8
 8001ee0:	20001cac 	.word	0x20001cac
 8001ee4:	20001d88 	.word	0x20001d88

08001ee8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8001eec:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <pvTaskIncrementMutexHeldCount+0x24>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d004      	beq.n	8001efe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <pvTaskIncrementMutexHeldCount+0x24>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001efa:	3201      	adds	r2, #1
 8001efc:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 8001efe:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <pvTaskIncrementMutexHeldCount+0x24>)
 8001f00:	681b      	ldr	r3, [r3, #0]
	}
 8001f02:	4618      	mov	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	20001ca8 	.word	0x20001ca8

08001f10 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001f1a:	4b29      	ldr	r3, [pc, #164]	; (8001fc0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f20:	4b28      	ldr	r3, [pc, #160]	; (8001fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	3304      	adds	r3, #4
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe f9dc 	bl	80002e4 <uxListRemove>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10b      	bne.n	8001f4a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001f32:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	2201      	movs	r2, #1
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43da      	mvns	r2, r3
 8001f40:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4013      	ands	r3, r2
 8001f46:	4a20      	ldr	r2, [pc, #128]	; (8001fc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001f48:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f50:	d10a      	bne.n	8001f68 <prvAddCurrentTaskToDelayedList+0x58>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d007      	beq.n	8001f68 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f58:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	4619      	mov	r1, r3
 8001f60:	481a      	ldr	r0, [pc, #104]	; (8001fcc <prvAddCurrentTaskToDelayedList+0xbc>)
 8001f62:	f7fe f962 	bl	800022a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001f66:	e026      	b.n	8001fb6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001f70:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d209      	bcs.n	8001f94 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f80:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	f7fe f970 	bl	8000272 <vListInsert>
}
 8001f92:	e010      	b.n	8001fb6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f94:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	f7fe f966 	bl	8000272 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d202      	bcs.n	8001fb6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8001fb0:	4a09      	ldr	r2, [pc, #36]	; (8001fd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	6013      	str	r3, [r2, #0]
}
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20001d84 	.word	0x20001d84
 8001fc4:	20001ca8 	.word	0x20001ca8
 8001fc8:	20001d88 	.word	0x20001d88
 8001fcc:	20001d6c 	.word	0x20001d6c
 8001fd0:	20001d3c 	.word	0x20001d3c
 8001fd4:	20001d38 	.word	0x20001d38
 8001fd8:	20001da0 	.word	0x20001da0

08001fdc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8001fe6:	f000 fadd 	bl	80025a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8001fea:	4b11      	ldr	r3, [pc, #68]	; (8002030 <xTimerCreateTimerTask+0x54>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00b      	beq.n	800200a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <xTimerCreateTimerTask+0x58>)
 8001ff4:	9301      	str	r3, [sp, #4]
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002000:	490d      	ldr	r1, [pc, #52]	; (8002038 <xTimerCreateTimerTask+0x5c>)
 8002002:	480e      	ldr	r0, [pc, #56]	; (800203c <xTimerCreateTimerTask+0x60>)
 8002004:	f7ff f8d6 	bl	80011b4 <xTaskCreate>
 8002008:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d109      	bne.n	8002024 <xTimerCreateTimerTask+0x48>
 8002010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002014:	f383 8811 	msr	BASEPRI, r3
 8002018:	f3bf 8f6f 	isb	sy
 800201c:	f3bf 8f4f 	dsb	sy
 8002020:	603b      	str	r3, [r7, #0]
 8002022:	e7fe      	b.n	8002022 <xTimerCreateTimerTask+0x46>
	return xReturn;
 8002024:	687b      	ldr	r3, [r7, #4]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20001ddc 	.word	0x20001ddc
 8002034:	20001de0 	.word	0x20001de0
 8002038:	08004964 	.word	0x08004964
 800203c:	080021f5 	.word	0x080021f5

08002040 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af02      	add	r7, sp, #8
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800204e:	2028      	movs	r0, #40	; 0x28
 8002050:	f7fe fb86 	bl	8000760 <pvPortMalloc>
 8002054:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d009      	beq.n	8002070 <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	68b9      	ldr	r1, [r7, #8]
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f000 f805 	bl	800207a <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8002070:	697b      	ldr	r3, [r7, #20]
	}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b086      	sub	sp, #24
 800207e:	af00      	add	r7, sp, #0
 8002080:	60f8      	str	r0, [r7, #12]
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	607a      	str	r2, [r7, #4]
 8002086:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d109      	bne.n	80020a2 <prvInitialiseNewTimer+0x28>
 800208e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002092:	f383 8811 	msr	BASEPRI, r3
 8002096:	f3bf 8f6f 	isb	sy
 800209a:	f3bf 8f4f 	dsb	sy
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	e7fe      	b.n	80020a0 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d015      	beq.n	80020d4 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80020a8:	f000 fa7c 	bl	80025a4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	6a3a      	ldr	r2, [r7, #32]
 80020c8:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	3304      	adds	r3, #4
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe f89e 	bl	8000210 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80020d4:	bf00      	nop
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	; 0x28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d109      	bne.n	8002108 <xTimerGenericCommand+0x2c>
 80020f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f8:	f383 8811 	msr	BASEPRI, r3
 80020fc:	f3bf 8f6f 	isb	sy
 8002100:	f3bf 8f4f 	dsb	sy
 8002104:	623b      	str	r3, [r7, #32]
 8002106:	e7fe      	b.n	8002106 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002108:	4b19      	ldr	r3, [pc, #100]	; (8002170 <xTimerGenericCommand+0x94>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d02a      	beq.n	8002166 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	2b05      	cmp	r3, #5
 8002120:	dc18      	bgt.n	8002154 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002122:	f7ff fdc9 	bl	8001cb8 <xTaskGetSchedulerState>
 8002126:	4603      	mov	r3, r0
 8002128:	2b02      	cmp	r3, #2
 800212a:	d109      	bne.n	8002140 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800212c:	4b10      	ldr	r3, [pc, #64]	; (8002170 <xTimerGenericCommand+0x94>)
 800212e:	6818      	ldr	r0, [r3, #0]
 8002130:	f107 0114 	add.w	r1, r7, #20
 8002134:	2300      	movs	r3, #0
 8002136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002138:	f7fe fc30 	bl	800099c <xQueueGenericSend>
 800213c:	6278      	str	r0, [r7, #36]	; 0x24
 800213e:	e012      	b.n	8002166 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <xTimerGenericCommand+0x94>)
 8002142:	6818      	ldr	r0, [r3, #0]
 8002144:	f107 0114 	add.w	r1, r7, #20
 8002148:	2300      	movs	r3, #0
 800214a:	2200      	movs	r2, #0
 800214c:	f7fe fc26 	bl	800099c <xQueueGenericSend>
 8002150:	6278      	str	r0, [r7, #36]	; 0x24
 8002152:	e008      	b.n	8002166 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <xTimerGenericCommand+0x94>)
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	f107 0114 	add.w	r1, r7, #20
 800215c:	2300      	movs	r3, #0
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	f7fe fd16 	bl	8000b90 <xQueueGenericSendFromISR>
 8002164:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002168:	4618      	mov	r0, r3
 800216a:	3728      	adds	r7, #40	; 0x28
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20001ddc 	.word	0x20001ddc

08002174 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b088      	sub	sp, #32
 8002178:	af02      	add	r7, sp, #8
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800217e:	4b1c      	ldr	r3, [pc, #112]	; (80021f0 <prvProcessExpiredTimer+0x7c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	3304      	adds	r3, #4
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe f8a9 	bl	80002e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d121      	bne.n	80021de <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	699a      	ldr	r2, [r3, #24]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	18d1      	adds	r1, r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	6978      	ldr	r0, [r7, #20]
 80021a8:	f000 f8c8 	bl	800233c <prvInsertTimerInActiveList>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d015      	beq.n	80021de <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80021b2:	2300      	movs	r3, #0
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	2300      	movs	r3, #0
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	2100      	movs	r1, #0
 80021bc:	6978      	ldr	r0, [r7, #20]
 80021be:	f7ff ff8d 	bl	80020dc <xTimerGenericCommand>
 80021c2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <prvProcessExpiredTimer+0x6a>
 80021ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ce:	f383 8811 	msr	BASEPRI, r3
 80021d2:	f3bf 8f6f 	isb	sy
 80021d6:	f3bf 8f4f 	dsb	sy
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	e7fe      	b.n	80021dc <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	6978      	ldr	r0, [r7, #20]
 80021e4:	4798      	blx	r3
}
 80021e6:	bf00      	nop
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20001dd4 	.word	0x20001dd4

080021f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80021fc:	f107 0308 	add.w	r3, r7, #8
 8002200:	4618      	mov	r0, r3
 8002202:	f000 f857 	bl	80022b4 <prvGetNextExpireTime>
 8002206:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	4619      	mov	r1, r3
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 f803 	bl	8002218 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002212:	f000 f8d5 	bl	80023c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002216:	e7f1      	b.n	80021fc <prvTimerTask+0x8>

08002218 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002222:	f7ff f971 	bl	8001508 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002226:	f107 0308 	add.w	r3, r7, #8
 800222a:	4618      	mov	r0, r3
 800222c:	f000 f866 	bl	80022fc <prvSampleTimeNow>
 8002230:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d130      	bne.n	800229a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10a      	bne.n	8002254 <prvProcessTimerOrBlockTask+0x3c>
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	429a      	cmp	r2, r3
 8002244:	d806      	bhi.n	8002254 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002246:	f7ff f96d 	bl	8001524 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800224a:	68f9      	ldr	r1, [r7, #12]
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff ff91 	bl	8002174 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002252:	e024      	b.n	800229e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d008      	beq.n	800226c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800225a:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <prvProcessTimerOrBlockTask+0x90>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	bf0c      	ite	eq
 8002264:	2301      	moveq	r3, #1
 8002266:	2300      	movne	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800226c:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <prvProcessTimerOrBlockTask+0x94>)
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	4619      	mov	r1, r3
 800227a:	f7fe ff67 	bl	800114c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800227e:	f7ff f951 	bl	8001524 <xTaskResumeAll>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10a      	bne.n	800229e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002288:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <prvProcessTimerOrBlockTask+0x98>)
 800228a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	f3bf 8f4f 	dsb	sy
 8002294:	f3bf 8f6f 	isb	sy
}
 8002298:	e001      	b.n	800229e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800229a:	f7ff f943 	bl	8001524 <xTaskResumeAll>
}
 800229e:	bf00      	nop
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20001dd8 	.word	0x20001dd8
 80022ac:	20001ddc 	.word	0x20001ddc
 80022b0:	e000ed04 	.word	0xe000ed04

080022b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80022bc:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <prvGetNextExpireTime+0x44>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	bf0c      	ite	eq
 80022c6:	2301      	moveq	r3, #1
 80022c8:	2300      	movne	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d105      	bne.n	80022e6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80022da:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <prvGetNextExpireTime+0x44>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	e001      	b.n	80022ea <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80022ea:	68fb      	ldr	r3, [r7, #12]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	20001dd4 	.word	0x20001dd4

080022fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002304:	f7ff f9aa 	bl	800165c <xTaskGetTickCount>
 8002308:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800230a:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <prvSampleTimeNow+0x3c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	429a      	cmp	r2, r3
 8002312:	d205      	bcs.n	8002320 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002314:	f000 f8e6 	bl	80024e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	e002      	b.n	8002326 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002326:	4a04      	ldr	r2, [pc, #16]	; (8002338 <prvSampleTimeNow+0x3c>)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800232c:	68fb      	ldr	r3, [r7, #12]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20001de4 	.word	0x20001de4

0800233c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
 8002348:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	429a      	cmp	r2, r3
 8002360:	d812      	bhi.n	8002388 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	1ad2      	subs	r2, r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	429a      	cmp	r2, r3
 800236e:	d302      	bcc.n	8002376 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002370:	2301      	movs	r3, #1
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	e01b      	b.n	80023ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002376:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <prvInsertTimerInActiveList+0x7c>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	3304      	adds	r3, #4
 800237e:	4619      	mov	r1, r3
 8002380:	4610      	mov	r0, r2
 8002382:	f7fd ff76 	bl	8000272 <vListInsert>
 8002386:	e012      	b.n	80023ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	d206      	bcs.n	800239e <prvInsertTimerInActiveList+0x62>
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d302      	bcc.n	800239e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002398:	2301      	movs	r3, #1
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	e007      	b.n	80023ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800239e:	4b07      	ldr	r3, [pc, #28]	; (80023bc <prvInsertTimerInActiveList+0x80>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	3304      	adds	r3, #4
 80023a6:	4619      	mov	r1, r3
 80023a8:	4610      	mov	r0, r2
 80023aa:	f7fd ff62 	bl	8000272 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80023ae:	697b      	ldr	r3, [r7, #20]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20001dd8 	.word	0x20001dd8
 80023bc:	20001dd4 	.word	0x20001dd4

080023c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08c      	sub	sp, #48	; 0x30
 80023c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80023c6:	e07a      	b.n	80024be <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	db77      	blt.n	80024be <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d004      	beq.n	80023e4 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	3304      	adds	r3, #4
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fd ff80 	bl	80002e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80023e4:	1d3b      	adds	r3, r7, #4
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff ff88 	bl	80022fc <prvSampleTimeNow>
 80023ec:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	2b09      	cmp	r3, #9
 80023f2:	d863      	bhi.n	80024bc <prvProcessReceivedCommands+0xfc>
 80023f4:	a201      	add	r2, pc, #4	; (adr r2, 80023fc <prvProcessReceivedCommands+0x3c>)
 80023f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023fa:	bf00      	nop
 80023fc:	08002425 	.word	0x08002425
 8002400:	08002425 	.word	0x08002425
 8002404:	08002425 	.word	0x08002425
 8002408:	080024bf 	.word	0x080024bf
 800240c:	0800247f 	.word	0x0800247f
 8002410:	080024b5 	.word	0x080024b5
 8002414:	08002425 	.word	0x08002425
 8002418:	08002425 	.word	0x08002425
 800241c:	080024bf 	.word	0x080024bf
 8002420:	0800247f 	.word	0x0800247f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	18d1      	adds	r1, r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a3a      	ldr	r2, [r7, #32]
 8002430:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002432:	f7ff ff83 	bl	800233c <prvInsertTimerInActiveList>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d040      	beq.n	80024be <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002442:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d138      	bne.n	80024be <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	441a      	add	r2, r3
 8002454:	2300      	movs	r3, #0
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	2300      	movs	r3, #0
 800245a:	2100      	movs	r1, #0
 800245c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800245e:	f7ff fe3d 	bl	80020dc <xTimerGenericCommand>
 8002462:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d129      	bne.n	80024be <prvProcessReceivedCommands+0xfe>
 800246a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246e:	f383 8811 	msr	BASEPRI, r3
 8002472:	f3bf 8f6f 	isb	sy
 8002476:	f3bf 8f4f 	dsb	sy
 800247a:	61bb      	str	r3, [r7, #24]
 800247c:	e7fe      	b.n	800247c <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d109      	bne.n	80024a0 <prvProcessReceivedCommands+0xe0>
 800248c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002490:	f383 8811 	msr	BASEPRI, r3
 8002494:	f3bf 8f6f 	isb	sy
 8002498:	f3bf 8f4f 	dsb	sy
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	e7fe      	b.n	800249e <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	699a      	ldr	r2, [r3, #24]
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	18d1      	adds	r1, r2, r3
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	6a3a      	ldr	r2, [r7, #32]
 80024ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024ae:	f7ff ff45 	bl	800233c <prvInsertTimerInActiveList>
					break;
 80024b2:	e004      	b.n	80024be <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 80024b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024b6:	f7fe f999 	bl	80007ec <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80024ba:	e000      	b.n	80024be <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
 80024bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80024be:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <prvProcessReceivedCommands+0x120>)
 80024c0:	6818      	ldr	r0, [r3, #0]
 80024c2:	f107 0108 	add.w	r1, r7, #8
 80024c6:	2300      	movs	r3, #0
 80024c8:	2200      	movs	r2, #0
 80024ca:	f7fe fbf5 	bl	8000cb8 <xQueueGenericReceive>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f47f af79 	bne.w	80023c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80024d6:	bf00      	nop
 80024d8:	3728      	adds	r7, #40	; 0x28
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20001ddc 	.word	0x20001ddc

080024e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80024ea:	e044      	b.n	8002576 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80024ec:	4b2b      	ldr	r3, [pc, #172]	; (800259c <prvSwitchTimerLists+0xb8>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80024f6:	4b29      	ldr	r3, [pc, #164]	; (800259c <prvSwitchTimerLists+0xb8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	3304      	adds	r3, #4
 8002504:	4618      	mov	r0, r3
 8002506:	f7fd feed 	bl	80002e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	6938      	ldr	r0, [r7, #16]
 8002510:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d12d      	bne.n	8002576 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	699a      	ldr	r2, [r3, #24]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	4413      	add	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	429a      	cmp	r2, r3
 800252a:	d90e      	bls.n	800254a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002538:	4b18      	ldr	r3, [pc, #96]	; (800259c <prvSwitchTimerLists+0xb8>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	3304      	adds	r3, #4
 8002540:	4619      	mov	r1, r3
 8002542:	4610      	mov	r0, r2
 8002544:	f7fd fe95 	bl	8000272 <vListInsert>
 8002548:	e015      	b.n	8002576 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800254a:	2300      	movs	r3, #0
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	2300      	movs	r3, #0
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	2100      	movs	r1, #0
 8002554:	6938      	ldr	r0, [r7, #16]
 8002556:	f7ff fdc1 	bl	80020dc <xTimerGenericCommand>
 800255a:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d109      	bne.n	8002576 <prvSwitchTimerLists+0x92>
 8002562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002566:	f383 8811 	msr	BASEPRI, r3
 800256a:	f3bf 8f6f 	isb	sy
 800256e:	f3bf 8f4f 	dsb	sy
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	e7fe      	b.n	8002574 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002576:	4b09      	ldr	r3, [pc, #36]	; (800259c <prvSwitchTimerLists+0xb8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1b5      	bne.n	80024ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002580:	4b06      	ldr	r3, [pc, #24]	; (800259c <prvSwitchTimerLists+0xb8>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8002586:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <prvSwitchTimerLists+0xbc>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a04      	ldr	r2, [pc, #16]	; (800259c <prvSwitchTimerLists+0xb8>)
 800258c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800258e:	4a04      	ldr	r2, [pc, #16]	; (80025a0 <prvSwitchTimerLists+0xbc>)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6013      	str	r3, [r2, #0]
}
 8002594:	bf00      	nop
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20001dd4 	.word	0x20001dd4
 80025a0:	20001dd8 	.word	0x20001dd8

080025a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80025a8:	f7fd ffca 	bl	8000540 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80025ac:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <prvCheckForValidListAndQueue+0x54>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d11d      	bne.n	80025f0 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80025b4:	4811      	ldr	r0, [pc, #68]	; (80025fc <prvCheckForValidListAndQueue+0x58>)
 80025b6:	f7fd fe0b 	bl	80001d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80025ba:	4811      	ldr	r0, [pc, #68]	; (8002600 <prvCheckForValidListAndQueue+0x5c>)
 80025bc:	f7fd fe08 	bl	80001d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80025c0:	4b10      	ldr	r3, [pc, #64]	; (8002604 <prvCheckForValidListAndQueue+0x60>)
 80025c2:	4a0e      	ldr	r2, [pc, #56]	; (80025fc <prvCheckForValidListAndQueue+0x58>)
 80025c4:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80025c6:	4b10      	ldr	r3, [pc, #64]	; (8002608 <prvCheckForValidListAndQueue+0x64>)
 80025c8:	4a0d      	ldr	r2, [pc, #52]	; (8002600 <prvCheckForValidListAndQueue+0x5c>)
 80025ca:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80025cc:	2200      	movs	r2, #0
 80025ce:	210c      	movs	r1, #12
 80025d0:	2005      	movs	r0, #5
 80025d2:	f7fe f98b 	bl	80008ec <xQueueGenericCreate>
 80025d6:	4602      	mov	r2, r0
 80025d8:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <prvCheckForValidListAndQueue+0x54>)
 80025da:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <prvCheckForValidListAndQueue+0x54>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80025e4:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <prvCheckForValidListAndQueue+0x54>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4908      	ldr	r1, [pc, #32]	; (800260c <prvCheckForValidListAndQueue+0x68>)
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe fd86 	bl	80010fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80025f0:	f7fd ffd4 	bl	800059c <vPortExitCritical>
}
 80025f4:	bf00      	nop
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20001ddc 	.word	0x20001ddc
 80025fc:	20001dac 	.word	0x20001dac
 8002600:	20001dc0 	.word	0x20001dc0
 8002604:	20001dd4 	.word	0x20001dd4
 8002608:	20001dd8 	.word	0x20001dd8
 800260c:	0800496c 	.word	0x0800496c

08002610 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	617b      	str	r3, [r7, #20]

	configASSERT( xTimer );
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d109      	bne.n	8002636 <xTimerIsTimerActive+0x26>
 8002622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002626:	f383 8811 	msr	BASEPRI, r3
 800262a:	f3bf 8f6f 	isb	sy
 800262e:	f3bf 8f4f 	dsb	sy
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	e7fe      	b.n	8002634 <xTimerIsTimerActive+0x24>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8002636:	f7fd ff83 	bl	8000540 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	2b00      	cmp	r3, #0
 8002640:	bf14      	ite	ne
 8002642:	2301      	movne	r3, #1
 8002644:	2300      	moveq	r3, #0
 8002646:	b2db      	uxtb	r3, r3
 8002648:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800264a:	f7fd ffa7 	bl	800059c <vPortExitCritical>

	return xTimerIsInActiveList;
 800264e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 800265c:	2101      	movs	r1, #1
 800265e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002662:	f000 fb87 	bl	8002d74 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8002666:	2100      	movs	r1, #0
 8002668:	f44f 7080 	mov.w	r0, #256	; 0x100
 800266c:	f000 fb82 	bl	8002d74 <RCC_APB2PeriphResetCmd>
}
 8002670:	bf00      	nop
 8002672:	bd80      	pop	{r7, pc}

08002674 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8002682:	2300      	movs	r3, #0
 8002684:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002692:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002696:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	791b      	ldrb	r3, [r3, #4]
 800269c:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80026a2:	4313      	orrs	r3, r2
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4b18      	ldr	r3, [pc, #96]	; (800271c <ADC_Init+0xa8>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80026c6:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80026cc:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	795b      	ldrb	r3, [r3, #5]
 80026d2:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80026d4:	4313      	orrs	r3, r2
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	4313      	orrs	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80026ee:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	7d1b      	ldrb	r3, [r3, #20]
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	7afb      	ldrb	r3, [r7, #11]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80026fe:	7afb      	ldrb	r3, [r7, #11]
 8002700:	051b      	lsls	r3, r3, #20
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	4313      	orrs	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800270e:	bf00      	nop
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	c0fff7fd 	.word	0xc0fff7fd

08002720 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800272c:	78fb      	ldrb	r3, [r7, #3]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d006      	beq.n	8002740 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f043 0201 	orr.w	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 800273e:	e005      	b.n	800274c <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f023 0201 	bic.w	r2, r3, #1
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	609a      	str	r2, [r3, #8]
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	4608      	mov	r0, r1
 8002762:	4611      	mov	r1, r2
 8002764:	461a      	mov	r2, r3
 8002766:	4603      	mov	r3, r0
 8002768:	70fb      	strb	r3, [r7, #3]
 800276a:	460b      	mov	r3, r1
 800276c:	70bb      	strb	r3, [r7, #2]
 800276e:	4613      	mov	r3, r2
 8002770:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	2300      	movs	r3, #0
 8002778:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800277a:	78fb      	ldrb	r3, [r7, #3]
 800277c:	2b09      	cmp	r3, #9
 800277e:	d923      	bls.n	80027c8 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8002786:	78fb      	ldrb	r3, [r7, #3]
 8002788:	f1a3 020a 	sub.w	r2, r3, #10
 800278c:	4613      	mov	r3, r2
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	4413      	add	r3, r2
 8002792:	2207      	movs	r2, #7
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	43db      	mvns	r3, r3
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	4013      	ands	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80027a4:	7879      	ldrb	r1, [r7, #1]
 80027a6:	78fb      	ldrb	r3, [r7, #3]
 80027a8:	f1a3 020a 	sub.w	r2, r3, #10
 80027ac:	4613      	mov	r3, r2
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	4413      	add	r3, r2
 80027b2:	fa01 f303 	lsl.w	r3, r1, r3
 80027b6:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	4313      	orrs	r3, r2
 80027be:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	e01e      	b.n	8002806 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80027ce:	78fa      	ldrb	r2, [r7, #3]
 80027d0:	4613      	mov	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	4413      	add	r3, r2
 80027d6:	2207      	movs	r2, #7
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4013      	ands	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80027e8:	7879      	ldrb	r1, [r7, #1]
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	4613      	mov	r3, r2
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	4413      	add	r3, r2
 80027f2:	fa01 f303 	lsl.w	r3, r1, r3
 80027f6:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8002806:	78bb      	ldrb	r3, [r7, #2]
 8002808:	2b06      	cmp	r3, #6
 800280a:	d821      	bhi.n	8002850 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002810:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8002812:	78bb      	ldrb	r3, [r7, #2]
 8002814:	1e5a      	subs	r2, r3, #1
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	221f      	movs	r2, #31
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	43db      	mvns	r3, r3
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4013      	ands	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 800282e:	78f9      	ldrb	r1, [r7, #3]
 8002830:	78bb      	ldrb	r3, [r7, #2]
 8002832:	1e5a      	subs	r2, r3, #1
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	fa01 f303 	lsl.w	r3, r1, r3
 800283e:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	4313      	orrs	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800284e:	e047      	b.n	80028e0 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 8002850:	78bb      	ldrb	r3, [r7, #2]
 8002852:	2b0c      	cmp	r3, #12
 8002854:	d821      	bhi.n	800289a <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 800285c:	78bb      	ldrb	r3, [r7, #2]
 800285e:	1fda      	subs	r2, r3, #7
 8002860:	4613      	mov	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	221f      	movs	r2, #31
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	43db      	mvns	r3, r3
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	4013      	ands	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8002878:	78f9      	ldrb	r1, [r7, #3]
 800287a:	78bb      	ldrb	r3, [r7, #2]
 800287c:	1fda      	subs	r2, r3, #7
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	fa01 f303 	lsl.w	r3, r1, r3
 8002888:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	4313      	orrs	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002898:	e022      	b.n	80028e0 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289e:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 80028a0:	78bb      	ldrb	r3, [r7, #2]
 80028a2:	f1a3 020d 	sub.w	r2, r3, #13
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	221f      	movs	r2, #31
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	43db      	mvns	r3, r3
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4013      	ands	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 80028be:	78f9      	ldrb	r1, [r7, #3]
 80028c0:	78bb      	ldrb	r3, [r7, #2]
 80028c2:	f1a3 020d 	sub.w	r2, r3, #13
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	fa01 f303 	lsl.w	r3, r1, r3
 80028d0:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80028e0:	bf00      	nop
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80028fc:	4b08      	ldr	r3, [pc, #32]	; (8002920 <DAC_SetChannel1Data+0x34>)
 80028fe:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4413      	add	r3, r2
 8002906:	3308      	adds	r3, #8
 8002908:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	461a      	mov	r2, r3
 800290e:	887b      	ldrh	r3, [r7, #2]
 8002910:	6013      	str	r3, [r2, #0]
}
 8002912:	bf00      	nop
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	40007400 	.word	0x40007400

08002924 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	4b25      	ldr	r3, [pc, #148]	; (80029d0 <DMA_Init+0xac>)
 800293c:	4013      	ands	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800294e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800295a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002966:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002972:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f023 0307 	bic.w	r3, r3, #7
 8002992:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	4313      	orrs	r3, r2
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	691a      	ldr	r2, [r3, #16]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	60da      	str	r2, [r3, #12]
}
 80029c2:	bf00      	nop
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	f01c803f 	.word	0xf01c803f

080029d4 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d006      	beq.n	80029f4 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f043 0201 	orr.w	r2, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80029f2:	e005      	b.n	8002a00 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f023 0201 	bic.w	r2, r3, #1
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	601a      	str	r2, [r3, #0]
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8002a14:	2300      	movs	r3, #0
 8002a16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d002      	beq.n	8002a2a <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8002a24:	2301      	movs	r3, #1
 8002a26:	73fb      	strb	r3, [r7, #15]
 8002a28:	e001      	b.n	8002a2e <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8002a46:	2300      	movs	r3, #0
 8002a48:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a15      	ldr	r2, [pc, #84]	; (8002aa8 <DMA_GetFlagStatus+0x6c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d802      	bhi.n	8002a5c <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002a56:	4b15      	ldr	r3, [pc, #84]	; (8002aac <DMA_GetFlagStatus+0x70>)
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	e001      	b.n	8002a60 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002a5c:	4b14      	ldr	r3, [pc, #80]	; (8002ab0 <DMA_GetFlagStatus+0x74>)
 8002a5e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	e002      	b.n	8002a78 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002a7e:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d002      	beq.n	8002a94 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	75fb      	strb	r3, [r7, #23]
 8002a92:	e001      	b.n	8002a98 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8002a94:	2300      	movs	r3, #0
 8002a96:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8002a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	4002640f 	.word	0x4002640f
 8002aac:	40026000 	.word	0x40026000
 8002ab0:	40026400 	.word	0x40026400

08002ab4 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a10      	ldr	r2, [pc, #64]	; (8002b04 <DMA_ClearFlag+0x50>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d802      	bhi.n	8002acc <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002ac6:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <DMA_ClearFlag+0x54>)
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	e001      	b.n	8002ad0 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002acc:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <DMA_ClearFlag+0x58>)
 8002ace:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d007      	beq.n	8002aea <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002ae0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8002ae8:	e006      	b.n	8002af8 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002af0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	6093      	str	r3, [r2, #8]
}
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	4002640f 	.word	0x4002640f
 8002b08:	40026000 	.word	0x40026000
 8002b0c:	40026400 	.word	0x40026400

08002b10 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	e076      	b.n	8002c1a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d165      	bne.n	8002c14 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	2103      	movs	r1, #3
 8002b52:	fa01 f303 	lsl.w	r3, r1, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	401a      	ands	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	791b      	ldrb	r3, [r3, #4]
 8002b66:	4619      	mov	r1, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	791b      	ldrb	r3, [r3, #4]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d003      	beq.n	8002b86 <GPIO_Init+0x76>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	791b      	ldrb	r3, [r3, #4]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d12e      	bne.n	8002be4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	2103      	movs	r1, #3
 8002b90:	fa01 f303 	lsl.w	r3, r1, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	401a      	ands	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	795b      	ldrb	r3, [r3, #5]
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	408b      	lsls	r3, r1
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	401a      	ands	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	7992      	ldrb	r2, [r2, #6]
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	b292      	uxth	r2, r2
 8002bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bdc:	b292      	uxth	r2, r2
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	2103      	movs	r1, #3
 8002bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	79db      	ldrb	r3, [r3, #7]
 8002c04:	4619      	mov	r1, r3
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	3301      	adds	r3, #1
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2b0f      	cmp	r3, #15
 8002c1e:	d985      	bls.n	8002b2c <GPIO_Init+0x1c>
    }
  }
}
 8002c20:	bf00      	nop
 8002c22:	371c      	adds	r7, #28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	71da      	strb	r2, [r3, #7]
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	807b      	strh	r3, [r7, #2]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8002c78:	787a      	ldrb	r2, [r7, #1]
 8002c7a:	887b      	ldrh	r3, [r7, #2]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8002c88:	887b      	ldrh	r3, [r7, #2]
 8002c8a:	08db      	lsrs	r3, r3, #3
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	4618      	mov	r0, r3
 8002c90:	887b      	ldrh	r3, [r7, #2]
 8002c92:	08db      	lsrs	r3, r3, #3
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3208      	adds	r2, #8
 8002c9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002ca0:	887b      	ldrh	r3, [r7, #2]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	210f      	movs	r1, #15
 8002caa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	ea02 0103 	and.w	r1, r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f100 0208 	add.w	r2, r0, #8
 8002cba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8002cbe:	887b      	ldrh	r3, [r7, #2]
 8002cc0:	08db      	lsrs	r3, r3, #3
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3208      	adds	r2, #8
 8002cca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8002cd4:	887b      	ldrh	r3, [r7, #2]
 8002cd6:	08db      	lsrs	r3, r3, #3
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3208      	adds	r2, #8
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002ce6:	bf00      	nop
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
	...

08002cf4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002d00:	78fb      	ldrb	r3, [r7, #3]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d006      	beq.n	8002d14 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8002d06:	490a      	ldr	r1, [pc, #40]	; (8002d30 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002d08:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8002d12:	e006      	b.n	8002d22 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8002d14:	4906      	ldr	r1, [pc, #24]	; (8002d30 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002d16:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	4013      	ands	r3, r2
 8002d20:	630b      	str	r3, [r1, #48]	; 0x30
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800

08002d34 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d006      	beq.n	8002d54 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8002d46:	490a      	ldr	r1, [pc, #40]	; (8002d70 <RCC_APB2PeriphClockCmd+0x3c>)
 8002d48:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <RCC_APB2PeriphClockCmd+0x3c>)
 8002d4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8002d52:	e006      	b.n	8002d62 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002d54:	4906      	ldr	r1, [pc, #24]	; (8002d70 <RCC_APB2PeriphClockCmd+0x3c>)
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <RCC_APB2PeriphClockCmd+0x3c>)
 8002d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	4013      	ands	r3, r2
 8002d60:	644b      	str	r3, [r1, #68]	; 0x44
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40023800 	.word	0x40023800

08002d74 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d006      	beq.n	8002d94 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8002d86:	490a      	ldr	r1, [pc, #40]	; (8002db0 <RCC_APB2PeriphResetCmd+0x3c>)
 8002d88:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <RCC_APB2PeriphResetCmd+0x3c>)
 8002d8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8002d92:	e006      	b.n	8002da2 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8002d94:	4906      	ldr	r1, [pc, #24]	; (8002db0 <RCC_APB2PeriphResetCmd+0x3c>)
 8002d96:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <RCC_APB2PeriphResetCmd+0x3c>)
 8002d98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	4013      	ands	r3, r2
 8002da0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40023800 	.word	0x40023800

08002db4 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8002dc8:	89fb      	ldrh	r3, [r7, #14]
 8002dca:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8002dce:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	881a      	ldrh	r2, [r3, #0]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	885b      	ldrh	r3, [r3, #2]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002de0:	4313      	orrs	r3, r2
 8002de2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002de8:	4313      	orrs	r3, r2
 8002dea:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002df0:	4313      	orrs	r3, r2
 8002df2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002e00:	4313      	orrs	r3, r2
 8002e02:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	89fb      	ldrh	r3, [r7, #14]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	89fa      	ldrh	r2, [r7, #14]
 8002e16:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	8b9b      	ldrh	r3, [r3, #28]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	8a1a      	ldrh	r2, [r3, #16]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	821a      	strh	r2, [r3, #16]
}
 8002e30:	bf00      	nop
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2207      	movs	r2, #7
 8002e78:	821a      	strh	r2, [r3, #16]
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	460b      	mov	r3, r1
 8002e90:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d008      	beq.n	8002eaa <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8002ea8:	e007      	b.n	8002eba <SPI_Cmd+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	801a      	strh	r2, [r3, #0]
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	460b      	mov	r3, r1
 8002ed0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	887a      	ldrh	r2, [r7, #2]
 8002ed6:	819a      	strh	r2, [r3, #12]
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	891b      	ldrh	r3, [r3, #8]
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	887b      	ldrh	r3, [r7, #2]
 8002efc:	4013      	ands	r3, r2
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8002f04:	2301      	movs	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
 8002f08:	e001      	b.n	8002f0e <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8002f20:	4b38      	ldr	r3, [pc, #224]	; (8003004 <Audio_MAL_IRQHandler+0xe8>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	4b38      	ldr	r3, [pc, #224]	; (8003008 <Audio_MAL_IRQHandler+0xec>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	f7ff fd86 	bl	8002a3c <DMA_GetFlagStatus>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d064      	beq.n	8003000 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8002f36:	4b35      	ldr	r3, [pc, #212]	; (800300c <Audio_MAL_IRQHandler+0xf0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d04c      	beq.n	8002fd8 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8002f3e:	bf00      	nop
 8002f40:	4b30      	ldr	r3, [pc, #192]	; (8003004 <Audio_MAL_IRQHandler+0xe8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff fd61 	bl	8002a0c <DMA_GetCmdStatus>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1f7      	bne.n	8002f40 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8002f50:	4b2c      	ldr	r3, [pc, #176]	; (8003004 <Audio_MAL_IRQHandler+0xe8>)
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	4b2c      	ldr	r3, [pc, #176]	; (8003008 <Audio_MAL_IRQHandler+0xec>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	f7ff fdaa 	bl	8002ab4 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8002f60:	4b2b      	ldr	r3, [pc, #172]	; (8003010 <Audio_MAL_IRQHandler+0xf4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	461a      	mov	r2, r3
 8002f66:	4b2b      	ldr	r3, [pc, #172]	; (8003014 <Audio_MAL_IRQHandler+0xf8>)
 8002f68:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8002f6a:	4b28      	ldr	r3, [pc, #160]	; (800300c <Audio_MAL_IRQHandler+0xf0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f72:	4293      	cmp	r3, r2
 8002f74:	bf28      	it	cs
 8002f76:	4613      	movcs	r3, r2
 8002f78:	4a26      	ldr	r2, [pc, #152]	; (8003014 <Audio_MAL_IRQHandler+0xf8>)
 8002f7a:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8002f7c:	4b21      	ldr	r3, [pc, #132]	; (8003004 <Audio_MAL_IRQHandler+0xe8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4924      	ldr	r1, [pc, #144]	; (8003014 <Audio_MAL_IRQHandler+0xf8>)
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff fcce 	bl	8002924 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8002f88:	4b1e      	ldr	r3, [pc, #120]	; (8003004 <Audio_MAL_IRQHandler+0xe8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff fd20 	bl	80029d4 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8002f94:	4b1e      	ldr	r3, [pc, #120]	; (8003010 <Audio_MAL_IRQHandler+0xf4>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	4b1c      	ldr	r3, [pc, #112]	; (800300c <Audio_MAL_IRQHandler+0xf0>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa0:	d203      	bcs.n	8002faa <Audio_MAL_IRQHandler+0x8e>
 8002fa2:	4b1a      	ldr	r3, [pc, #104]	; (800300c <Audio_MAL_IRQHandler+0xf0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	e000      	b.n	8002fac <Audio_MAL_IRQHandler+0x90>
 8002faa:	4b1b      	ldr	r3, [pc, #108]	; (8003018 <Audio_MAL_IRQHandler+0xfc>)
 8002fac:	4413      	add	r3, r2
 8002fae:	4a18      	ldr	r2, [pc, #96]	; (8003010 <Audio_MAL_IRQHandler+0xf4>)
 8002fb0:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8002fb2:	4b16      	ldr	r3, [pc, #88]	; (800300c <Audio_MAL_IRQHandler+0xf0>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	4b15      	ldr	r3, [pc, #84]	; (800300c <Audio_MAL_IRQHandler+0xf0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002fbe:	428b      	cmp	r3, r1
 8002fc0:	bf28      	it	cs
 8002fc2:	460b      	movcs	r3, r1
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	4a11      	ldr	r2, [pc, #68]	; (800300c <Audio_MAL_IRQHandler+0xf0>)
 8002fc8:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8002fca:	4b0e      	ldr	r3, [pc, #56]	; (8003004 <Audio_MAL_IRQHandler+0xe8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2101      	movs	r1, #1
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff fcff 	bl	80029d4 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8002fd6:	e013      	b.n	8003000 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8002fd8:	4b0a      	ldr	r3, [pc, #40]	; (8003004 <Audio_MAL_IRQHandler+0xe8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff fcf8 	bl	80029d4 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8002fe4:	4b07      	ldr	r3, [pc, #28]	; (8003004 <Audio_MAL_IRQHandler+0xe8>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	4b07      	ldr	r3, [pc, #28]	; (8003008 <Audio_MAL_IRQHandler+0xec>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4619      	mov	r1, r3
 8002fee:	4610      	mov	r0, r2
 8002ff0:	f7ff fd60 	bl	8002ab4 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8002ff4:	4b06      	ldr	r3, [pc, #24]	; (8003010 <Audio_MAL_IRQHandler+0xf4>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 f83c 	bl	8003078 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8003000:	bf00      	nop
 8003002:	bd80      	pop	{r7, pc}
 8003004:	2000000c 	.word	0x2000000c
 8003008:	20000010 	.word	0x20000010
 800300c:	20000004 	.word	0x20000004
 8003010:	20001e40 	.word	0x20001e40
 8003014:	20001e80 	.word	0x20001e80
 8003018:	0001fffe 	.word	0x0001fffe

0800301c <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8003020:	f7ff ff7c 	bl	8002f1c <Audio_MAL_IRQHandler>
}
 8003024:	bf00      	nop
 8003026:	bd80      	pop	{r7, pc}

08003028 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 800302c:	f7ff ff76 	bl	8002f1c <Audio_MAL_IRQHandler>
}
 8003030:	bf00      	nop
 8003032:	bd80      	pop	{r7, pc}

08003034 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8003038:	2102      	movs	r1, #2
 800303a:	480d      	ldr	r0, [pc, #52]	; (8003070 <SPI3_IRQHandler+0x3c>)
 800303c:	f7ff ff52 	bl	8002ee4 <SPI_I2S_GetFlagStatus>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d011      	beq.n	800306a <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8003046:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <SPI3_IRQHandler+0x40>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d106      	bne.n	800305c <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 800304e:	f000 f81e 	bl	800308e <EVAL_AUDIO_GetSampleCallBack>
 8003052:	4603      	mov	r3, r0
 8003054:	4619      	mov	r1, r3
 8003056:	2004      	movs	r0, #4
 8003058:	f7ff fc48 	bl	80028ec <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 800305c:	f000 f817 	bl	800308e <EVAL_AUDIO_GetSampleCallBack>
 8003060:	4603      	mov	r3, r0
 8003062:	4619      	mov	r1, r3
 8003064:	4802      	ldr	r0, [pc, #8]	; (8003070 <SPI3_IRQHandler+0x3c>)
 8003066:	f7ff ff2e 	bl	8002ec6 <SPI_I2S_SendData>
  }
}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40003c00 	.word	0x40003c00
 8003074:	20000008 	.word	0x20000008

08003078 <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8003082:	bf00      	nop
}
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <EVAL_AUDIO_GetSampleCallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 800308e:	b480      	push	{r7}
 8003090:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return 0;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
	...

080030a0 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030b0:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <NVIC_SetPriorityGrouping+0x44>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030bc:	4013      	ands	r3, r2
 80030be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 80030c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030d2:	4a04      	ldr	r2, [pc, #16]	; (80030e4 <NVIC_SetPriorityGrouping+0x44>)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	60d3      	str	r3, [r2, #12]
}
 80030d8:	bf00      	nop
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <main>:
static xQueueHandle xBoardStateQueue = NULL;

/*-----------------------------------------------------------*/

int main(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af02      	add	r7, sp, #8
	/* Setup the hardware peripherals */
	prvSetupHardware();
 80030ee:	f000 fb03 	bl	80036f8 <prvSetupHardware>

	/* @arg1: queue length | @arg2: size of one element */
	xPotResistanceQueue = xQueueCreate( mainQUEUE_LENGTH, sizeof( uint32_t ) );
 80030f2:	2200      	movs	r2, #0
 80030f4:	2104      	movs	r1, #4
 80030f6:	2001      	movs	r0, #1
 80030f8:	f7fd fbf8 	bl	80008ec <xQueueGenericCreate>
 80030fc:	4602      	mov	r2, r0
 80030fe:	4b27      	ldr	r3, [pc, #156]	; (800319c <main+0xb4>)
 8003100:	601a      	str	r2, [r3, #0]
	xFlowQueue = xQueueCreate( 	mainQUEUE_LENGTH, sizeof( uint32_t ) );
 8003102:	2200      	movs	r2, #0
 8003104:	2104      	movs	r1, #4
 8003106:	2001      	movs	r0, #1
 8003108:	f7fd fbf0 	bl	80008ec <xQueueGenericCreate>
 800310c:	4602      	mov	r2, r0
 800310e:	4b24      	ldr	r3, [pc, #144]	; (80031a0 <main+0xb8>)
 8003110:	601a      	str	r2, [r3, #0]
	xBoardStateQueue = xQueueCreate( 	mainQUEUE_LENGTH, sizeof( uint32_t ) );
 8003112:	2200      	movs	r2, #0
 8003114:	2104      	movs	r1, #4
 8003116:	2001      	movs	r0, #1
 8003118:	f7fd fbe8 	bl	80008ec <xQueueGenericCreate>
 800311c:	4602      	mov	r2, r0
 800311e:	4b21      	ldr	r3, [pc, #132]	; (80031a4 <main+0xbc>)
 8003120:	601a      	str	r2, [r3, #0]

	/* Add to the registry, for the benefit of kernel aware debugging. */
	vQueueAddToRegistry( xPotResistanceQueue, "PotQueue" );
 8003122:	4b1e      	ldr	r3, [pc, #120]	; (800319c <main+0xb4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4920      	ldr	r1, [pc, #128]	; (80031a8 <main+0xc0>)
 8003128:	4618      	mov	r0, r3
 800312a:	f7fd ffe7 	bl	80010fc <vQueueAddToRegistry>
	vQueueAddToRegistry( xFlowQueue, "FlowQueue" );
 800312e:	4b1c      	ldr	r3, [pc, #112]	; (80031a0 <main+0xb8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	491e      	ldr	r1, [pc, #120]	; (80031ac <main+0xc4>)
 8003134:	4618      	mov	r0, r3
 8003136:	f7fd ffe1 	bl	80010fc <vQueueAddToRegistry>
	vQueueAddToRegistry( xBoardStateQueue, "BoardStateQueue" );
 800313a:	4b1a      	ldr	r3, [pc, #104]	; (80031a4 <main+0xbc>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	491c      	ldr	r1, [pc, #112]	; (80031b0 <main+0xc8>)
 8003140:	4618      	mov	r0, r3
 8003142:	f7fd ffdb 	bl	80010fc <vQueueAddToRegistry>

	/* Create the tasks */
	xTaskCreate( 	Traffic_Generator_Task,			/* The function that implements the task. */
 8003146:	2300      	movs	r3, #0
 8003148:	9301      	str	r3, [sp, #4]
 800314a:	2305      	movs	r3, #5
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	2300      	movs	r3, #0
 8003150:	2282      	movs	r2, #130	; 0x82
 8003152:	4918      	ldr	r1, [pc, #96]	; (80031b4 <main+0xcc>)
 8003154:	4818      	ldr	r0, [pc, #96]	; (80031b8 <main+0xd0>)
 8003156:	f7fe f82d 	bl	80011b4 <xTaskCreate>
					configMINIMAL_STACK_SIZE, 		/* The size (in words) of the stack that should be created for the task. */
					NULL, 							/* A parameter that can be passed into the task. */
					configMAX_PRIORITIES,			/* The priority to assign to the task. */
					NULL );							/* Used to obtain a handle to the created task.  */

	xTaskCreate( 	Traffic_Flow_Adjustment_Task,
 800315a:	2300      	movs	r3, #0
 800315c:	9301      	str	r3, [sp, #4]
 800315e:	2305      	movs	r3, #5
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	2300      	movs	r3, #0
 8003164:	2282      	movs	r2, #130	; 0x82
 8003166:	4915      	ldr	r1, [pc, #84]	; (80031bc <main+0xd4>)
 8003168:	4815      	ldr	r0, [pc, #84]	; (80031c0 <main+0xd8>)
 800316a:	f7fe f823 	bl	80011b4 <xTaskCreate>
					configMINIMAL_STACK_SIZE,
					NULL,
					configMAX_PRIORITIES,
					NULL );

	xTaskCreate( 	Traffic_Light_State_Task,
 800316e:	2300      	movs	r3, #0
 8003170:	9301      	str	r3, [sp, #4]
 8003172:	2305      	movs	r3, #5
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	2300      	movs	r3, #0
 8003178:	2282      	movs	r2, #130	; 0x82
 800317a:	4912      	ldr	r1, [pc, #72]	; (80031c4 <main+0xdc>)
 800317c:	4812      	ldr	r0, [pc, #72]	; (80031c8 <main+0xe0>)
 800317e:	f7fe f819 	bl	80011b4 <xTaskCreate>
					configMINIMAL_STACK_SIZE,
					NULL,
					configMAX_PRIORITIES,
					NULL );

	xTaskCreate( 	System_Display_Task,
 8003182:	2300      	movs	r3, #0
 8003184:	9301      	str	r3, [sp, #4]
 8003186:	2305      	movs	r3, #5
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	2300      	movs	r3, #0
 800318c:	2282      	movs	r2, #130	; 0x82
 800318e:	490f      	ldr	r1, [pc, #60]	; (80031cc <main+0xe4>)
 8003190:	480f      	ldr	r0, [pc, #60]	; (80031d0 <main+0xe8>)
 8003192:	f7fe f80f 	bl	80011b4 <xTaskCreate>
					NULL,
					configMAX_PRIORITIES,
					NULL );

	/* Start the tasks and timer running. */
	vTaskStartScheduler();
 8003196:	f7fe f96b 	bl	8001470 <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details.  http://www.freertos.org/a00111.html */
	for( ;; );
 800319a:	e7fe      	b.n	800319a <main+0xb2>
 800319c:	20001de8 	.word	0x20001de8
 80031a0:	20001dec 	.word	0x20001dec
 80031a4:	20001df0 	.word	0x20001df0
 80031a8:	08004974 	.word	0x08004974
 80031ac:	08004980 	.word	0x08004980
 80031b0:	0800498c 	.word	0x0800498c
 80031b4:	0800499c 	.word	0x0800499c
 80031b8:	08003395 	.word	0x08003395
 80031bc:	080049ac 	.word	0x080049ac
 80031c0:	080031d5 	.word	0x080031d5
 80031c4:	080049c4 	.word	0x080049c4
 80031c8:	0800350d 	.word	0x0800350d
 80031cc:	080049d8 	.word	0x080049d8
 80031d0:	08003695 	.word	0x08003695

080031d4 <Traffic_Flow_Adjustment_Task>:
}

/*-----------------------------------------------------------*/
static void Traffic_Flow_Adjustment_Task( void *pvParameters )
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		vTaskDelay(100);
 80031dc:	2064      	movs	r0, #100	; 0x64
 80031de:	f7fe f913 	bl	8001408 <vTaskDelay>
		uint32_t adc_val = read_adc();
 80031e2:	f000 fb47 	bl	8003874 <read_adc>
 80031e6:	ee07 0a90 	vmov	s15, r0
 80031ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031ee:	ee17 3a90 	vmov	r3, s15
 80031f2:	60fb      	str	r3, [r7, #12]
		xQueueSend( xPotResistanceQueue, &adc_val, 0 );
 80031f4:	4b04      	ldr	r3, [pc, #16]	; (8003208 <Traffic_Flow_Adjustment_Task+0x34>)
 80031f6:	6818      	ldr	r0, [r3, #0]
 80031f8:	f107 010c 	add.w	r1, r7, #12
 80031fc:	2300      	movs	r3, #0
 80031fe:	2200      	movs	r2, #0
 8003200:	f7fd fbcc 	bl	800099c <xQueueGenericSend>
	{
 8003204:	e7ea      	b.n	80031dc <Traffic_Flow_Adjustment_Task+0x8>
 8003206:	bf00      	nop
 8003208:	20001de8 	.word	0x20001de8

0800320c <new_car>:
	}
}
/*-----------------------------------------------------------*/

uint32_t new_car(uint32_t traffic_value){
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]

	int value = (rand()) % 4096;
 8003214:	f000 ff4e 	bl	80040b4 <rand>
 8003218:	4603      	mov	r3, r0
 800321a:	425a      	negs	r2, r3
 800321c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003220:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003224:	bf58      	it	pl
 8003226:	4253      	negpl	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]

	if(traffic_value > 3796){
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f640 62d4 	movw	r2, #3796	; 0xed4
 8003230:	4293      	cmp	r3, r2
 8003232:	d914      	bls.n	800325e <new_car+0x52>
		value = rand() % 6;
 8003234:	f000 ff3e 	bl	80040b4 <rand>
 8003238:	4602      	mov	r2, r0
 800323a:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <new_car+0x6c>)
 800323c:	fb83 3102 	smull	r3, r1, r3, r2
 8003240:	17d3      	asrs	r3, r2, #31
 8003242:	1ac9      	subs	r1, r1, r3
 8003244:	460b      	mov	r3, r1
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	440b      	add	r3, r1
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	60fb      	str	r3, [r7, #12]
		if(value == 1){
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d101      	bne.n	800325a <new_car+0x4e>
			return 1;
 8003256:	2301      	movs	r3, #1
 8003258:	e00a      	b.n	8003270 <new_car+0x64>
		}else{
			return 0;
 800325a:	2300      	movs	r3, #0
 800325c:	e008      	b.n	8003270 <new_car+0x64>
		}
	}else{
		if (value < (4096 - traffic_value)){
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f5c3 5280 	rsb	r2, r3, #4096	; 0x1000
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	429a      	cmp	r2, r3
 8003268:	d901      	bls.n	800326e <new_car+0x62>
			return 1;
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <new_car+0x64>
		}else{
			return 0;
 800326e:	2300      	movs	r3, #0
		}
	}
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	2aaaaaab 	.word	0x2aaaaaab

0800327c <generate_traffic>:

uint32_t generate_traffic(uint32_t traffic_value, uint32_t STATE_TRAFFIC){
 800327c:	b580      	push	{r7, lr}
 800327e:	b08a      	sub	sp, #40	; 0x28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
	uint32_t upper_cars = (STATE_TRAFFIC)&CLEARED_TRAFFIC;
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	4b33      	ldr	r3, [pc, #204]	; (8003358 <generate_traffic+0xdc>)
 800328a:	4013      	ands	r3, r2
 800328c:	617b      	str	r3, [r7, #20]
	uint32_t approaching_cars = (STATE_TRAFFIC)&APPROACHING_TRAFFIC;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	b2db      	uxtb	r3, r3
 8003292:	627b      	str	r3, [r7, #36]	; 0x24

	upper_cars = upper_cars << 0b1;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	617b      	str	r3, [r7, #20]

	if(STATE_TRAFFIC & green){
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <generate_traffic+0x30>
		approaching_cars = approaching_cars << 0b1;
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
 80032aa:	e043      	b.n	8003334 <generate_traffic+0xb8>
	}else{
		if(approaching_cars & (1 << 7)){
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d03b      	beq.n	800332e <generate_traffic+0xb2>
			//car in the front, skip.
			//find first zero
			int i;
			for(i = 6; i > 0; i--){
 80032b6:	2306      	movs	r3, #6
 80032b8:	623b      	str	r3, [r7, #32]
 80032ba:	e034      	b.n	8003326 <generate_traffic+0xaa>
				if((approaching_cars & (1 << i)) == 0){
 80032bc:	2201      	movs	r2, #1
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	461a      	mov	r2, r3
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d128      	bne.n	8003320 <generate_traffic+0xa4>
					//shift lower i - 1 bits
					int j, temp = 0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	61bb      	str	r3, [r7, #24]
					for(j = 0; j < i; j++){
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
 80032d6:	e009      	b.n	80032ec <generate_traffic+0x70>
						temp = temp | (1 << j);
 80032d8:	2201      	movs	r2, #1
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
					for(j = 0; j < i; j++){
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	3301      	adds	r3, #1
 80032ea:	61fb      	str	r3, [r7, #28]
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	dbf1      	blt.n	80032d8 <generate_traffic+0x5c>
					}

					uint8_t lower = approaching_cars & temp;
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	4013      	ands	r3, r2
 80032fe:	74fb      	strb	r3, [r7, #19]
					lower = lower << 1;
 8003300:	7cfb      	ldrb	r3, [r7, #19]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	74fb      	strb	r3, [r7, #19]
					uint8_t upper = (approaching_cars & (0xFF & ~temp));
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	43db      	mvns	r3, r3
 800330c:	b2da      	uxtb	r2, r3
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	b2db      	uxtb	r3, r3
 8003312:	4013      	ands	r3, r2
 8003314:	74bb      	strb	r3, [r7, #18]

					approaching_cars = upper + lower;
 8003316:	7cba      	ldrb	r2, [r7, #18]
 8003318:	7cfb      	ldrb	r3, [r7, #19]
 800331a:	4413      	add	r3, r2
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800331e:	e009      	b.n	8003334 <generate_traffic+0xb8>
			for(i = 6; i > 0; i--){
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	3b01      	subs	r3, #1
 8003324:	623b      	str	r3, [r7, #32]
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	2b00      	cmp	r3, #0
 800332a:	dcc7      	bgt.n	80032bc <generate_traffic+0x40>
 800332c:	e002      	b.n	8003334 <generate_traffic+0xb8>
				}
			}
		}else{
			approaching_cars = approaching_cars << 0b1;
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}

	//generate new car
	uint32_t car = new_car(traffic_value);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7ff ff69 	bl	800320c <new_car>
 800333a:	60f8      	str	r0, [r7, #12]

	STATE_TRAFFIC = (upper_cars & CLEARED_TRAFFIC) | (approaching_cars) | car;
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	4b06      	ldr	r3, [pc, #24]	; (8003358 <generate_traffic+0xdc>)
 8003340:	4013      	ands	r3, r2
 8003342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003344:	431a      	orrs	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4313      	orrs	r3, r2
 800334a:	603b      	str	r3, [r7, #0]

	return STATE_TRAFFIC;
 800334c:	683b      	ldr	r3, [r7, #0]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3728      	adds	r7, #40	; 0x28
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	0007ff00 	.word	0x0007ff00

0800335c <display_lights_debug>:

char display_lights_debug(uint32_t lights){
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
	//debugging purposes//
	switch(lights){
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800336a:	d00a      	beq.n	8003382 <display_lights_debug+0x26>
 800336c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003370:	d003      	beq.n	800337a <display_lights_debug+0x1e>
 8003372:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003376:	d002      	beq.n	800337e <display_lights_debug+0x22>
 8003378:	e005      	b.n	8003386 <display_lights_debug+0x2a>
		case green:
			return 'g';
 800337a:	2367      	movs	r3, #103	; 0x67
 800337c:	e004      	b.n	8003388 <display_lights_debug+0x2c>
		case red:
			return 'r';
 800337e:	2372      	movs	r3, #114	; 0x72
 8003380:	e002      	b.n	8003388 <display_lights_debug+0x2c>
		case yellow:
			return 'y';
 8003382:	2379      	movs	r3, #121	; 0x79
 8003384:	e000      	b.n	8003388 <display_lights_debug+0x2c>
		default:
			return '?';
 8003386:	233f      	movs	r3, #63	; 0x3f
	}
}
 8003388:	4618      	mov	r0, r3
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <Traffic_Generator_Task>:

static void Traffic_Generator_Task( void *pvParameters )
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
	uint32_t traffic_val = 3;
 800339c:	2303      	movs	r3, #3
 800339e:	613b      	str	r3, [r7, #16]
	int32_t flow_value = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	60fb      	str	r3, [r7, #12]

	uint32_t board_state = red;
 80033a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80033a8:	60bb      	str	r3, [r7, #8]
	uint32_t lights = red;
 80033aa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80033ae:	61fb      	str	r3, [r7, #28]
	xQueueSend( xBoardStateQueue, &board_state, 0);
 80033b0:	4b2f      	ldr	r3, [pc, #188]	; (8003470 <Traffic_Generator_Task+0xdc>)
 80033b2:	6818      	ldr	r0, [r3, #0]
 80033b4:	f107 0108 	add.w	r1, r7, #8
 80033b8:	2300      	movs	r3, #0
 80033ba:	2200      	movs	r2, #0
 80033bc:	f7fd faee 	bl	800099c <xQueueGenericSend>
	vTaskDelay(50);
 80033c0:	2032      	movs	r0, #50	; 0x32
 80033c2:	f7fe f821 	bl	8001408 <vTaskDelay>

	for( ;; )
	{
		vTaskDelay(500);
 80033c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033ca:	f7fe f81d 	bl	8001408 <vTaskDelay>
		/* Wait until something arrives in the queue - this task will block
		indefinitely provided INCLUDE_vTaskSuspend is set to 1 in
		FreeRTOSConfig.h.  http://www.freertos.org/a00118.html */
		xQueueReceive( xPotResistanceQueue, &traffic_val, 0);
 80033ce:	4b29      	ldr	r3, [pc, #164]	; (8003474 <Traffic_Generator_Task+0xe0>)
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	f107 0110 	add.w	r1, r7, #16
 80033d6:	2300      	movs	r3, #0
 80033d8:	2200      	movs	r2, #0
 80033da:	f7fd fc6d 	bl	8000cb8 <xQueueGenericReceive>
		xQueueReceive( xFlowQueue, &flow_value, 0);
 80033de:	4b26      	ldr	r3, [pc, #152]	; (8003478 <Traffic_Generator_Task+0xe4>)
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	f107 010c 	add.w	r1, r7, #12
 80033e6:	2300      	movs	r3, #0
 80033e8:	2200      	movs	r2, #0
 80033ea:	f7fd fc65 	bl	8000cb8 <xQueueGenericReceive>

		//Traffic value pulled off the queue, which is the value of the potentiometer.
		xQueueReceive( xBoardStateQueue, &board_state, portMAX_DELAY);
 80033ee:	4b20      	ldr	r3, [pc, #128]	; (8003470 <Traffic_Generator_Task+0xdc>)
 80033f0:	6818      	ldr	r0, [r3, #0]
 80033f2:	f107 0108 	add.w	r1, r7, #8
 80033f6:	2300      	movs	r3, #0
 80033f8:	f04f 32ff 	mov.w	r2, #4294967295
 80033fc:	f7fd fc5c 	bl	8000cb8 <xQueueGenericReceive>
		uint32_t traffic = generate_traffic(traffic_val, board_state);
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	4611      	mov	r1, r2
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff ff38 	bl	800327c <generate_traffic>
 800340c:	61b8      	str	r0, [r7, #24]

		lights = board_state & light_state;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8003414:	61fb      	str	r3, [r7, #28]
		char lights_value = display_lights_debug(lights);
 8003416:	69f8      	ldr	r0, [r7, #28]
 8003418:	f7ff ffa0 	bl	800335c <display_lights_debug>
 800341c:	4603      	mov	r3, r0
 800341e:	75fb      	strb	r3, [r7, #23]

		board_state = (lights) | traffic;
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	4313      	orrs	r3, r2
 8003426:	60bb      	str	r3, [r7, #8]

		if(traffic & 1){
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <Traffic_Generator_Task+0xa6>
			//new car, increment flow.
			flow_value++;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	3301      	adds	r3, #1
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	e002      	b.n	8003440 <Traffic_Generator_Task+0xac>
		}else{
			flow_value--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3b01      	subs	r3, #1
 800343e:	60fb      	str	r3, [r7, #12]
		}

		printf("Lights: %c Flow: %i Traffic: %u\n", lights_value, flow_value, traffic);
 8003440:	7df9      	ldrb	r1, [r7, #23]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	480d      	ldr	r0, [pc, #52]	; (800347c <Traffic_Generator_Task+0xe8>)
 8003448:	f000 fd56 	bl	8003ef8 <printf>

		//send flow value for traffic light state task and board state.
		xQueueSend( xFlowQueue, &flow_value, 0);
 800344c:	4b0a      	ldr	r3, [pc, #40]	; (8003478 <Traffic_Generator_Task+0xe4>)
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	f107 010c 	add.w	r1, r7, #12
 8003454:	2300      	movs	r3, #0
 8003456:	2200      	movs	r2, #0
 8003458:	f7fd faa0 	bl	800099c <xQueueGenericSend>
		xQueueSend( xBoardStateQueue, &board_state, 0);
 800345c:	4b04      	ldr	r3, [pc, #16]	; (8003470 <Traffic_Generator_Task+0xdc>)
 800345e:	6818      	ldr	r0, [r3, #0]
 8003460:	f107 0108 	add.w	r1, r7, #8
 8003464:	2300      	movs	r3, #0
 8003466:	2200      	movs	r2, #0
 8003468:	f7fd fa98 	bl	800099c <xQueueGenericSend>
	{
 800346c:	e7ab      	b.n	80033c6 <Traffic_Generator_Task+0x32>
 800346e:	bf00      	nop
 8003470:	20001df0 	.word	0x20001df0
 8003474:	20001de8 	.word	0x20001de8
 8003478:	20001dec 	.word	0x20001dec
 800347c:	080049ec 	.word	0x080049ec

08003480 <vTrafficLight_Callback>:
	}
}
/*-----------------------------------------------------------*/
static void vTrafficLight_Callback( xTimerHandle xTrafficLight )
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
	uint32_t board_state = 0;
 8003488:	2300      	movs	r3, #0
 800348a:	60bb      	str	r3, [r7, #8]

	xQueueReceive( xBoardStateQueue, &board_state, portMAX_DELAY );
 800348c:	4b1d      	ldr	r3, [pc, #116]	; (8003504 <vTrafficLight_Callback+0x84>)
 800348e:	6818      	ldr	r0, [r3, #0]
 8003490:	f107 0108 	add.w	r1, r7, #8
 8003494:	2300      	movs	r3, #0
 8003496:	f04f 32ff 	mov.w	r2, #4294967295
 800349a:	f7fd fc0d 	bl	8000cb8 <xQueueGenericReceive>

	uint32_t current_light_state = board_state & light_state;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 80034a4:	60fb      	str	r3, [r7, #12]

	switch(current_light_state){
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ac:	d00a      	beq.n	80034c4 <vTrafficLight_Callback+0x44>
 80034ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034b2:	d003      	beq.n	80034bc <vTrafficLight_Callback+0x3c>
 80034b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80034b8:	d008      	beq.n	80034cc <vTrafficLight_Callback+0x4c>
 80034ba:	e00b      	b.n	80034d4 <vTrafficLight_Callback+0x54>
		case green:
			current_light_state = yellow;
 80034bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034c0:	60fb      	str	r3, [r7, #12]
			break;
 80034c2:	e00b      	b.n	80034dc <vTrafficLight_Callback+0x5c>
		case yellow:
			current_light_state = red;
 80034c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80034c8:	60fb      	str	r3, [r7, #12]
			break;
 80034ca:	e007      	b.n	80034dc <vTrafficLight_Callback+0x5c>
		case red:
			current_light_state = green;
 80034cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80034d0:	60fb      	str	r3, [r7, #12]
			break;
 80034d2:	e003      	b.n	80034dc <vTrafficLight_Callback+0x5c>
		default:
			printf("light error\n");
 80034d4:	480c      	ldr	r0, [pc, #48]	; (8003508 <vTrafficLight_Callback+0x88>)
 80034d6:	f000 fde5 	bl	80040a4 <puts>
			break;
 80034da:	bf00      	nop
	}

	board_state = current_light_state | (board_state & ALL_TRAFFIC);
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f3c3 0212 	ubfx	r2, r3, #0, #19
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60bb      	str	r3, [r7, #8]

	xQueueSend( xBoardStateQueue, &board_state, portMAX_DELAY );
 80034e8:	4b06      	ldr	r3, [pc, #24]	; (8003504 <vTrafficLight_Callback+0x84>)
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	f107 0108 	add.w	r1, r7, #8
 80034f0:	2300      	movs	r3, #0
 80034f2:	f04f 32ff 	mov.w	r2, #4294967295
 80034f6:	f7fd fa51 	bl	800099c <xQueueGenericSend>
}
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20001df0 	.word	0x20001df0
 8003508:	08004a10 	.word	0x08004a10

0800350c <Traffic_Light_State_Task>:
/*-----------------------------------------------------------*/
static void Traffic_Light_State_Task( void *pvParameters )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08c      	sub	sp, #48	; 0x30
 8003510:	af02      	add	r7, sp, #8
 8003512:	6078      	str	r0, [r7, #4]
	xTimerHandle xTrafficLightTimer = NULL;
 8003514:	2300      	movs	r3, #0
 8003516:	61fb      	str	r3, [r7, #28]
	uint32_t default_delay = mainSOFTWARE_TIMER_PERIOD_MS * 4;
 8003518:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800351c:	61bb      	str	r3, [r7, #24]
	xTrafficLightTimer = xTimerCreate(	"TrafficLightTimer", 	/* A text name, purely to help debugging. */
 800351e:	4b58      	ldr	r3, [pc, #352]	; (8003680 <Traffic_Light_State_Task+0x174>)
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	2300      	movs	r3, #0
 8003524:	2200      	movs	r2, #0
 8003526:	69b9      	ldr	r1, [r7, #24]
 8003528:	4856      	ldr	r0, [pc, #344]	; (8003684 <Traffic_Light_State_Task+0x178>)
 800352a:	f7fe fd89 	bl	8002040 <xTimerCreate>
 800352e:	61f8      	str	r0, [r7, #28]
										pdFALSE,				/* This is a periodic timer, so xAutoReload is set to pdTRUE. */
										( void * ) 0,			/* The ID is not used, so can be set to anything. */
										vTrafficLight_Callback	/* The callback function that switches the LED off. */
										);

	int32_t flow_value = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	60fb      	str	r3, [r7, #12]
	uint32_t board_state = 0;
 8003534:	2300      	movs	r3, #0
 8003536:	60bb      	str	r3, [r7, #8]
	int32_t new_green_time = default_delay;
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t new_red_time = default_delay;
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	623b      	str	r3, [r7, #32]
	int delay = 100;
 8003540:	2364      	movs	r3, #100	; 0x64
 8003542:	617b      	str	r3, [r7, #20]

	xTimerStart( xTrafficLightTimer, 0);
 8003544:	f7fe f88a 	bl	800165c <xTaskGetTickCount>
 8003548:	4602      	mov	r2, r0
 800354a:	2300      	movs	r3, #0
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	2300      	movs	r3, #0
 8003550:	2101      	movs	r1, #1
 8003552:	69f8      	ldr	r0, [r7, #28]
 8003554:	f7fe fdc2 	bl	80020dc <xTimerGenericCommand>
	for( ;; )
	{
		vTaskDelay(delay);
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	4618      	mov	r0, r3
 800355c:	f7fd ff54 	bl	8001408 <vTaskDelay>
		//set the timer period according to current light state and flow value.

		xQueueReceive( xBoardStateQueue, &board_state, portMAX_DELAY );
 8003560:	4b49      	ldr	r3, [pc, #292]	; (8003688 <Traffic_Light_State_Task+0x17c>)
 8003562:	6818      	ldr	r0, [r3, #0]
 8003564:	f107 0108 	add.w	r1, r7, #8
 8003568:	2300      	movs	r3, #0
 800356a:	f04f 32ff 	mov.w	r2, #4294967295
 800356e:	f7fd fba3 	bl	8000cb8 <xQueueGenericReceive>
		xQueueReceive( xFlowQueue, &flow_value, 0 );
 8003572:	4b46      	ldr	r3, [pc, #280]	; (800368c <Traffic_Light_State_Task+0x180>)
 8003574:	6818      	ldr	r0, [r3, #0]
 8003576:	f107 010c 	add.w	r1, r7, #12
 800357a:	2300      	movs	r3, #0
 800357c:	2200      	movs	r2, #0
 800357e:	f7fd fb9b 	bl	8000cb8 <xQueueGenericReceive>

		uint32_t current_light_state = board_state & light_state;
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8003588:	613b      	str	r3, [r7, #16]

		//wait until timer finished.
		 if( xTimerIsTimerActive( xTrafficLightTimer ) == pdFALSE ){
 800358a:	69f8      	ldr	r0, [r7, #28]
 800358c:	f7ff f840 	bl	8002610 <xTimerIsTimerActive>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d160      	bne.n	8003658 <Traffic_Light_State_Task+0x14c>
			switch(current_light_state){
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800359c:	d029      	beq.n	80035f2 <Traffic_Light_State_Task+0xe6>
 800359e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035a2:	d003      	beq.n	80035ac <Traffic_Light_State_Task+0xa0>
 80035a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80035a8:	d02d      	beq.n	8003606 <Traffic_Light_State_Task+0xfa>
 80035aa:	e04f      	b.n	800364c <Traffic_Light_State_Task+0x140>
				case green:
					//increase green time if flow is positive

					new_green_time = default_delay + (flow_value * 500);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80035b2:	fb02 f303 	mul.w	r3, r2, r3
 80035b6:	461a      	mov	r2, r3
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	4413      	add	r3, r2
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24

					if(new_green_time > default_delay * 2){
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	005a      	lsls	r2, r3, #1
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d203      	bcs.n	80035d0 <Traffic_Light_State_Task+0xc4>
						//if more than double, set to double.
						new_green_time = default_delay * 2;
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
 80035ce:	e007      	b.n	80035e0 <Traffic_Light_State_Task+0xd4>
					}else if(new_green_time < default_delay / 2){
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	085a      	lsrs	r2, r3, #1
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d902      	bls.n	80035e0 <Traffic_Light_State_Task+0xd4>
						new_green_time = default_delay / 2;
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	085b      	lsrs	r3, r3, #1
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
					}

					xTimerChangePeriod(xTrafficLightTimer, new_green_time, 0);
 80035e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e2:	2300      	movs	r3, #0
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	2300      	movs	r3, #0
 80035e8:	2104      	movs	r1, #4
 80035ea:	69f8      	ldr	r0, [r7, #28]
 80035ec:	f7fe fd76 	bl	80020dc <xTimerGenericCommand>
					break;
 80035f0:	e030      	b.n	8003654 <Traffic_Light_State_Task+0x148>

				case yellow:
					//going to change red, set red delay
					xTimerChangePeriod(xTrafficLightTimer, default_delay/2, 0);
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	085a      	lsrs	r2, r3, #1
 80035f6:	2300      	movs	r3, #0
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	2300      	movs	r3, #0
 80035fc:	2104      	movs	r1, #4
 80035fe:	69f8      	ldr	r0, [r7, #28]
 8003600:	f7fe fd6c 	bl	80020dc <xTimerGenericCommand>
					break;
 8003604:	e026      	b.n	8003654 <Traffic_Light_State_Task+0x148>

				case red:
					new_red_time = default_delay - (flow_value * 500);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800360c:	fb02 f303 	mul.w	r3, r2, r3
 8003610:	461a      	mov	r2, r3
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	1a9b      	subs	r3, r3, r2
 8003616:	623b      	str	r3, [r7, #32]

					if(new_red_time > default_delay * 2){
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	005a      	lsls	r2, r3, #1
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	429a      	cmp	r2, r3
 8003620:	d203      	bcs.n	800362a <Traffic_Light_State_Task+0x11e>
						//if more than double, set to double.
						new_red_time = default_delay * 2;
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	623b      	str	r3, [r7, #32]
 8003628:	e007      	b.n	800363a <Traffic_Light_State_Task+0x12e>
					}else if(new_red_time < default_delay / 2){
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	085a      	lsrs	r2, r3, #1
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	429a      	cmp	r2, r3
 8003632:	d902      	bls.n	800363a <Traffic_Light_State_Task+0x12e>
						new_red_time = default_delay / 2;
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	085b      	lsrs	r3, r3, #1
 8003638:	623b      	str	r3, [r7, #32]
					}

					//going to change green, set green delay
					xTimerChangePeriod(xTrafficLightTimer, new_red_time, 0);
 800363a:	6a3a      	ldr	r2, [r7, #32]
 800363c:	2300      	movs	r3, #0
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	2300      	movs	r3, #0
 8003642:	2104      	movs	r1, #4
 8003644:	69f8      	ldr	r0, [r7, #28]
 8003646:	f7fe fd49 	bl	80020dc <xTimerGenericCommand>
					break;
 800364a:	e003      	b.n	8003654 <Traffic_Light_State_Task+0x148>
				default:
					printf("light task error\n");
 800364c:	4810      	ldr	r0, [pc, #64]	; (8003690 <Traffic_Light_State_Task+0x184>)
 800364e:	f000 fd29 	bl	80040a4 <puts>
					break;
 8003652:	bf00      	nop

			}
			flow_value = 0;
 8003654:	2300      	movs	r3, #0
 8003656:	60fb      	str	r3, [r7, #12]
		}

		xQueueSend( xBoardStateQueue, &board_state, portMAX_DELAY);
 8003658:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <Traffic_Light_State_Task+0x17c>)
 800365a:	6818      	ldr	r0, [r3, #0]
 800365c:	f107 0108 	add.w	r1, r7, #8
 8003660:	2300      	movs	r3, #0
 8003662:	f04f 32ff 	mov.w	r2, #4294967295
 8003666:	f7fd f999 	bl	800099c <xQueueGenericSend>
		xQueueSend( xFlowQueue, &flow_value, portMAX_DELAY);
 800366a:	4b08      	ldr	r3, [pc, #32]	; (800368c <Traffic_Light_State_Task+0x180>)
 800366c:	6818      	ldr	r0, [r3, #0]
 800366e:	f107 010c 	add.w	r1, r7, #12
 8003672:	2300      	movs	r3, #0
 8003674:	f04f 32ff 	mov.w	r2, #4294967295
 8003678:	f7fd f990 	bl	800099c <xQueueGenericSend>
	{
 800367c:	e76c      	b.n	8003558 <Traffic_Light_State_Task+0x4c>
 800367e:	bf00      	nop
 8003680:	08003481 	.word	0x08003481
 8003684:	08004a1c 	.word	0x08004a1c
 8003688:	20001df0 	.word	0x20001df0
 800368c:	20001dec 	.word	0x20001dec
 8003690:	08004a30 	.word	0x08004a30

08003694 <System_Display_Task>:
	}
}
/*-----------------------------------------------------------*/
static void System_Display_Task( void *pvParameters ){
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
	uint32_t board_state = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	60bb      	str	r3, [r7, #8]
	for( ;; ){
		vTaskDelay(500);
 80036a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80036a4:	f7fd feb0 	bl	8001408 <vTaskDelay>
		xQueueReceive( xBoardStateQueue, &board_state, portMAX_DELAY);
 80036a8:	4b12      	ldr	r3, [pc, #72]	; (80036f4 <System_Display_Task+0x60>)
 80036aa:	6818      	ldr	r0, [r3, #0]
 80036ac:	f107 0108 	add.w	r1, r7, #8
 80036b0:	2300      	movs	r3, #0
 80036b2:	f04f 32ff 	mov.w	r2, #4294967295
 80036b6:	f7fd faff 	bl	8000cb8 <xQueueGenericReceive>
		//we only want the first 6 bits of the board upper
		uint16_t board_upper = (board_state & 0x3F0000) >> 16;
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	0c1b      	lsrs	r3, r3, #16
 80036be:	b29b      	uxth	r3, r3
 80036c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036c4:	81fb      	strh	r3, [r7, #14]
		uint16_t board_lower = (board_state & 0xFFFF);
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	81bb      	strh	r3, [r7, #12]
		SPI_Bus_tx(board_upper);
 80036ca:	89fb      	ldrh	r3, [r7, #14]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 f8c1 	bl	8003854 <SPI_Bus_tx>
		vTaskDelay(1);
 80036d2:	2001      	movs	r0, #1
 80036d4:	f7fd fe98 	bl	8001408 <vTaskDelay>
		SPI_Bus_tx(board_lower);
 80036d8:	89bb      	ldrh	r3, [r7, #12]
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 f8ba 	bl	8003854 <SPI_Bus_tx>
		xQueueSend( xBoardStateQueue, &board_state, portMAX_DELAY);
 80036e0:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <System_Display_Task+0x60>)
 80036e2:	6818      	ldr	r0, [r3, #0]
 80036e4:	f107 0108 	add.w	r1, r7, #8
 80036e8:	2300      	movs	r3, #0
 80036ea:	f04f 32ff 	mov.w	r2, #4294967295
 80036ee:	f7fd f955 	bl	800099c <xQueueGenericSend>
	for( ;; ){
 80036f2:	e7d5      	b.n	80036a0 <System_Display_Task+0xc>
 80036f4:	20001df0 	.word	0x20001df0

080036f8 <prvSetupHardware>:
	}
}

/* Setup the STM32F4 Hardware	*/
static void prvSetupHardware( void )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
	/* Ensure all priority bits are assigned as preemption priority bits.
	http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	NVIC_SetPriorityGrouping( 0 );
 80036fc:	2000      	movs	r0, #0
 80036fe:	f7ff fccf 	bl	80030a0 <NVIC_SetPriorityGrouping>
	ADCInit();/* PA1 */
 8003702:	f000 f805 	bl	8003710 <ADCInit>
	SPIInit();/* PA5 = clock | PA7 = Output */
 8003706:	f000 f84b 	bl	80037a0 <SPIInit>
}
 800370a:	bf00      	nop
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <ADCInit>:
/* Kernel includes. */
#include "stm32f4xx.h"
#include "stm32f4_discovery.h"

//Use PA1
extern void ADCInit(){
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
	//GPIOA
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8003716:	2101      	movs	r1, #1
 8003718:	2001      	movs	r0, #1
 800371a:	f7ff faeb 	bl	8002cf4 <RCC_AHB1PeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_StructInit(&GPIO_InitStruct); //default parameters
 800371e:	f107 0318 	add.w	r3, r7, #24
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff fa82 	bl	8002c2c <GPIO_StructInit>
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_1;
 8003728:	2302      	movs	r3, #2
 800372a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AN;//analog mode
 800372c:	2303      	movs	r3, #3
 800372e:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;// no pullup/pulldown
 8003730:	2300      	movs	r3, #0
 8003732:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003734:	f107 0318 	add.w	r3, r7, #24
 8003738:	4619      	mov	r1, r3
 800373a:	4817      	ldr	r0, [pc, #92]	; (8003798 <ADCInit+0x88>)
 800373c:	f7ff f9e8 	bl	8002b10 <GPIO_Init>

	//ADC1
	ADC_DeInit();
 8003740:	f7fe ff8a 	bl	8002658 <ADC_DeInit>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8003744:	2101      	movs	r1, #1
 8003746:	f44f 7080 	mov.w	r0, #256	; 0x100
 800374a:	f7ff faf3 	bl	8002d34 <RCC_APB2PeriphClockCmd>

	ADC_InitTypeDef ADC_InitStruct;

	ADC_InitStruct.ADC_ContinuousConvMode=ENABLE;
 800374e:	2301      	movs	r3, #1
 8003750:	717b      	strb	r3, [r7, #5]
	ADC_InitStruct.ADC_ScanConvMode=DISABLE;
 8003752:	2300      	movs	r3, #0
 8003754:	713b      	strb	r3, [r7, #4]
	ADC_InitStruct.ADC_ExternalTrigConv=ADC_ExternalTrigConv_T1_CC1;
 8003756:	2300      	movs	r3, #0
 8003758:	60fb      	str	r3, [r7, #12]
	ADC_InitStruct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800375a:	2300      	movs	r3, #0
 800375c:	60bb      	str	r3, [r7, #8]
	ADC_InitStruct.ADC_DataAlign = ADC_DataAlign_Right;
 800375e:	2300      	movs	r3, #0
 8003760:	613b      	str	r3, [r7, #16]
	ADC_InitStruct.ADC_NbrOfConversion = 0x01;
 8003762:	2301      	movs	r3, #1
 8003764:	753b      	strb	r3, [r7, #20]

	ADC_Init(ADC1, &ADC_InitStruct);
 8003766:	463b      	mov	r3, r7
 8003768:	4619      	mov	r1, r3
 800376a:	480c      	ldr	r0, [pc, #48]	; (800379c <ADCInit+0x8c>)
 800376c:	f7fe ff82 	bl	8002674 <ADC_Init>
	ADC_Cmd(ADC1, ENABLE);
 8003770:	2101      	movs	r1, #1
 8003772:	480a      	ldr	r0, [pc, #40]	; (800379c <ADCInit+0x8c>)
 8003774:	f7fe ffd4 	bl	8002720 <ADC_Cmd>

	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_144Cycles);
 8003778:	2306      	movs	r3, #6
 800377a:	2201      	movs	r2, #1
 800377c:	2101      	movs	r1, #1
 800377e:	4807      	ldr	r0, [pc, #28]	; (800379c <ADCInit+0x8c>)
 8003780:	f7fe ffea 	bl	8002758 <ADC_RegularChannelConfig>

	ADC1->CR2 |= ADC_CR2_SWSTART;// start conversions
 8003784:	4a05      	ldr	r2, [pc, #20]	; (800379c <ADCInit+0x8c>)
 8003786:	4b05      	ldr	r3, [pc, #20]	; (800379c <ADCInit+0x8c>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800378e:	6093      	str	r3, [r2, #8]
}
 8003790:	bf00      	nop
 8003792:	3720      	adds	r7, #32
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40020000 	.word	0x40020000
 800379c:	40012000 	.word	0x40012000

080037a0 <SPIInit>:

// PA4 = NSS, PA5 = clk, PA7 = output
extern void SPIInit(void){
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af00      	add	r7, sp, #0
	// GPIOA
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80037a6:	2101      	movs	r1, #1
 80037a8:	2001      	movs	r0, #1
 80037aa:	f7ff faa3 	bl	8002cf4 <RCC_AHB1PeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_StructInit(&GPIO_InitStruct); //default parameters
 80037ae:	f107 0318 	add.w	r3, r7, #24
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff fa3a 	bl	8002c2c <GPIO_StructInit>
	GPIO_InitStruct.GPIO_Pin = (GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_7);
 80037b8:	23b0      	movs	r3, #176	; 0xb0
 80037ba:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;//Alternate Function mode
 80037bc:	2302      	movs	r3, #2
 80037be:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_25MHz;
 80037c0:	2301      	movs	r3, #1
 80037c2:	777b      	strb	r3, [r7, #29]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 80037c4:	2302      	movs	r3, #2
 80037c6:	77fb      	strb	r3, [r7, #31]
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_SPI1);
 80037c8:	2205      	movs	r2, #5
 80037ca:	2104      	movs	r1, #4
 80037cc:	481f      	ldr	r0, [pc, #124]	; (800384c <SPIInit+0xac>)
 80037ce:	f7ff fa47 	bl	8002c60 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource5, GPIO_AF_SPI1);
 80037d2:	2205      	movs	r2, #5
 80037d4:	2105      	movs	r1, #5
 80037d6:	481d      	ldr	r0, [pc, #116]	; (800384c <SPIInit+0xac>)
 80037d8:	f7ff fa42 	bl	8002c60 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_SPI1);
 80037dc:	2205      	movs	r2, #5
 80037de:	2107      	movs	r1, #7
 80037e0:	481a      	ldr	r0, [pc, #104]	; (800384c <SPIInit+0xac>)
 80037e2:	f7ff fa3d 	bl	8002c60 <GPIO_PinAFConfig>

	GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e6:	f107 0318 	add.w	r3, r7, #24
 80037ea:	4619      	mov	r1, r3
 80037ec:	4817      	ldr	r0, [pc, #92]	; (800384c <SPIInit+0xac>)
 80037ee:	f7ff f98f 	bl	8002b10 <GPIO_Init>
	// SPI
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 80037f2:	2101      	movs	r1, #1
 80037f4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80037f8:	f7ff fa9c 	bl	8002d34 <RCC_APB2PeriphClockCmd>
	SPI_InitTypeDef SPI_InitStruct;

	SPI_StructInit(&SPI_InitStruct);
 80037fc:	1d3b      	adds	r3, r7, #4
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff fb1c 	bl	8002e3c <SPI_StructInit>
	SPI_InitStruct.SPI_Direction = SPI_Direction_1Line_Tx;
 8003804:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003808:	80bb      	strh	r3, [r7, #4]
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 800380a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800380e:	80fb      	strh	r3, [r7, #6]
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_16b;
 8003810:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003814:	813b      	strh	r3, [r7, #8]
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8003816:	2300      	movs	r3, #0
 8003818:	817b      	strh	r3, [r7, #10]
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 800381a:	2300      	movs	r3, #0
 800381c:	81bb      	strh	r3, [r7, #12]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 800381e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003822:	81fb      	strh	r3, [r7, #14]
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;
 8003824:	2338      	movs	r3, #56	; 0x38
 8003826:	823b      	strh	r3, [r7, #16]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 8003828:	2300      	movs	r3, #0
 800382a:	827b      	strh	r3, [r7, #18]
	SPI_InitStruct.SPI_CRCPolynomial = 7;
 800382c:	2307      	movs	r3, #7
 800382e:	82bb      	strh	r3, [r7, #20]
	SPI_Init(SPI1, &SPI_InitStruct);
 8003830:	1d3b      	adds	r3, r7, #4
 8003832:	4619      	mov	r1, r3
 8003834:	4806      	ldr	r0, [pc, #24]	; (8003850 <SPIInit+0xb0>)
 8003836:	f7ff fabd 	bl	8002db4 <SPI_Init>
	SPI_Cmd(SPI1, ENABLE);
 800383a:	2101      	movs	r1, #1
 800383c:	4804      	ldr	r0, [pc, #16]	; (8003850 <SPIInit+0xb0>)
 800383e:	f7ff fb22 	bl	8002e86 <SPI_Cmd>

}
 8003842:	bf00      	nop
 8003844:	3720      	adds	r7, #32
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40020000 	.word	0x40020000
 8003850:	40013000 	.word	0x40013000

08003854 <SPI_Bus_tx>:

extern void SPI_Bus_tx(uint16_t data){
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	80fb      	strh	r3, [r7, #6]
	SPI1->DR = data;
 800385e:	4a04      	ldr	r2, [pc, #16]	; (8003870 <SPI_Bus_tx+0x1c>)
 8003860:	88fb      	ldrh	r3, [r7, #6]
 8003862:	8193      	strh	r3, [r2, #12]

	//wait until TXE == 1
	//while( ((SPI1->SR) & SPI_I2S_FLAG_TXE) != 1){}
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	40013000 	.word	0x40013000

08003874 <read_adc>:

float read_adc(void){
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
	return ADC1->DR;
 8003878:	4b06      	ldr	r3, [pc, #24]	; (8003894 <read_adc+0x20>)
 800387a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387c:	ee07 3a90 	vmov	s15, r3
 8003880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003884:	ee17 3a90 	vmov	r3, s15
}
 8003888:	4618      	mov	r0, r3
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40012000 	.word	0x40012000

08003898 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003898:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800389a:	e003      	b.n	80038a4 <LoopCopyDataInit>

0800389c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800389c:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800389e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80038a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80038a2:	3104      	adds	r1, #4

080038a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80038a4:	480a      	ldr	r0, [pc, #40]	; (80038d0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80038a6:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80038a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80038aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80038ac:	d3f6      	bcc.n	800389c <CopyDataInit>
  ldr  r2, =_sbss
 80038ae:	4a0a      	ldr	r2, [pc, #40]	; (80038d8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80038b0:	e002      	b.n	80038b8 <LoopFillZerobss>

080038b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80038b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80038b4:	f842 3b04 	str.w	r3, [r2], #4

080038b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80038b8:	4b08      	ldr	r3, [pc, #32]	; (80038dc <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80038ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80038bc:	d3f9      	bcc.n	80038b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80038be:	f000 f8f3 	bl	8003aa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038c2:	f000 fb63 	bl	8003f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038c6:	f7ff fc0f 	bl	80030e8 <main>
  bx  lr    
 80038ca:	4770      	bx	lr
  ldr  r3, =_sidata
 80038cc:	08004ac8 	.word	0x08004ac8
  ldr  r0, =_sdata
 80038d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80038d4:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 80038d8:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 80038dc:	20001ec0 	.word	0x20001ec0

080038e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038e0:	e7fe      	b.n	80038e0 <ADC_IRQHandler>

080038e2 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80038e2:	b480      	push	{r7}
 80038e4:	af00      	add	r7, sp, #0
}
 80038e6:	bf00      	nop
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80038f4:	e7fe      	b.n	80038f4 <HardFault_Handler+0x4>

080038f6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80038f6:	b480      	push	{r7}
 80038f8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80038fa:	e7fe      	b.n	80038fa <MemManage_Handler+0x4>

080038fc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003900:	e7fe      	b.n	8003900 <BusFault_Handler+0x4>

08003902 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003902:	b480      	push	{r7}
 8003904:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003906:	e7fe      	b.n	8003906 <UsageFault_Handler+0x4>

08003908 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
}
 800390c:	bf00      	nop
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
	...

08003918 <ITM_SendChar>:

    \param [in]     ch  Character to transmit
    \return             Character to transmit
 */
static __INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8003920:	4b13      	ldr	r3, [pc, #76]	; (8003970 <ITM_SendChar+0x58>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d01a      	beq.n	8003962 <ITM_SendChar+0x4a>
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 800392c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003930:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003934:	f003 0301 	and.w	r3, r3, #1
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8003938:	2b00      	cmp	r3, #0
 800393a:	d012      	beq.n	8003962 <ITM_SendChar+0x4a>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 800393c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003940:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003944:	f003 0301 	and.w	r3, r3, #1
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00a      	beq.n	8003962 <ITM_SendChar+0x4a>
  {
    while (ITM->PORT[0].u32 == 0);
 800394c:	bf00      	nop
 800394e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0fa      	beq.n	800394e <ITM_SendChar+0x36>
    ITM->PORT[0].u8 = (uint8_t) ch;
 8003958:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003962:	687b      	ldr	r3, [r7, #4]
}
 8003964:	4618      	mov	r0, r3
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	e000edf0 	.word	0xe000edf0

08003974 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	
	int i=0;
 8003980:	2300      	movs	r3, #0
 8003982:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	e009      	b.n	800399e <_write+0x2a>
		ITM_SendChar((*ptr++));
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	60ba      	str	r2, [r7, #8]
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff ffc0 	bl	8003918 <ITM_SendChar>
	for(i=0;i<len;i++)
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	3301      	adds	r3, #1
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	dbf1      	blt.n	800398a <_write+0x16>
	return len;
 80039a6:	687b      	ldr	r3, [r7, #4]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <_sbrk>:

void * _sbrk(int32_t incr)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 80039b8:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <_sbrk+0x38>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d102      	bne.n	80039c6 <_sbrk+0x16>
		heap_end = & end;
 80039c0:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <_sbrk+0x38>)
 80039c2:	4a0a      	ldr	r2, [pc, #40]	; (80039ec <_sbrk+0x3c>)
 80039c4:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 80039c6:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <_sbrk+0x38>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 80039cc:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <_sbrk+0x38>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4413      	add	r3, r2
 80039d4:	4a04      	ldr	r2, [pc, #16]	; (80039e8 <_sbrk+0x38>)
 80039d6:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 80039d8:	68fb      	ldr	r3, [r7, #12]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	20001df4 	.word	0x20001df4
 80039ec:	20001ec0 	.word	0x20001ec0

080039f0 <_close>:

int _close(int32_t file)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 80039f8:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <_close+0x20>)
 80039fa:	2258      	movs	r2, #88	; 0x58
 80039fc:	601a      	str	r2, [r3, #0]
	return -1;
 80039fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	20001ebc 	.word	0x20001ebc

08003a14 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 8003a1e:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <_fstat+0x20>)
 8003a20:	2258      	movs	r2, #88	; 0x58
 8003a22:	601a      	str	r2, [r3, #0]
	return -1;
 8003a24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	20001ebc 	.word	0x20001ebc

08003a38 <_isatty>:

int _isatty(int32_t file)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8003a40:	4b04      	ldr	r3, [pc, #16]	; (8003a54 <_isatty+0x1c>)
 8003a42:	2258      	movs	r2, #88	; 0x58
 8003a44:	601a      	str	r2, [r3, #0]
	return 0;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	20001ebc 	.word	0x20001ebc

08003a58 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8003a64:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <_lseek+0x24>)
 8003a66:	2258      	movs	r2, #88	; 0x58
 8003a68:	601a      	str	r2, [r3, #0]
	return -1;
 8003a6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	20001ebc 	.word	0x20001ebc

08003a80 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8003a8c:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <_read+0x24>)
 8003a8e:	2258      	movs	r2, #88	; 0x58
 8003a90:	601a      	str	r2, [r3, #0]
	return -1;
 8003a92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20001ebc 	.word	0x20001ebc

08003aa8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003aac:	4a16      	ldr	r2, [pc, #88]	; (8003b08 <SystemInit+0x60>)
 8003aae:	4b16      	ldr	r3, [pc, #88]	; (8003b08 <SystemInit+0x60>)
 8003ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ab8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003abc:	4a13      	ldr	r2, [pc, #76]	; (8003b0c <SystemInit+0x64>)
 8003abe:	4b13      	ldr	r3, [pc, #76]	; (8003b0c <SystemInit+0x64>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003ac8:	4b10      	ldr	r3, [pc, #64]	; (8003b0c <SystemInit+0x64>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003ace:	4a0f      	ldr	r2, [pc, #60]	; (8003b0c <SystemInit+0x64>)
 8003ad0:	4b0e      	ldr	r3, [pc, #56]	; (8003b0c <SystemInit+0x64>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003adc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003ade:	4b0b      	ldr	r3, [pc, #44]	; (8003b0c <SystemInit+0x64>)
 8003ae0:	4a0b      	ldr	r2, [pc, #44]	; (8003b10 <SystemInit+0x68>)
 8003ae2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003ae4:	4a09      	ldr	r2, [pc, #36]	; (8003b0c <SystemInit+0x64>)
 8003ae6:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <SystemInit+0x64>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003af0:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <SystemInit+0x64>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003af6:	f000 f80d 	bl	8003b14 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003afa:	4b03      	ldr	r3, [pc, #12]	; (8003b08 <SystemInit+0x60>)
 8003afc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b00:	609a      	str	r2, [r3, #8]
#endif
}
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	e000ed00 	.word	0xe000ed00
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	24003010 	.word	0x24003010

08003b14 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	607b      	str	r3, [r7, #4]
 8003b1e:	2300      	movs	r3, #0
 8003b20:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003b22:	4a36      	ldr	r2, [pc, #216]	; (8003bfc <SetSysClock+0xe8>)
 8003b24:	4b35      	ldr	r3, [pc, #212]	; (8003bfc <SetSysClock+0xe8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b2c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003b2e:	4b33      	ldr	r3, [pc, #204]	; (8003bfc <SetSysClock+0xe8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b36:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d103      	bne.n	8003b4c <SetSysClock+0x38>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003b4a:	d1f0      	bne.n	8003b2e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003b4c:	4b2b      	ldr	r3, [pc, #172]	; (8003bfc <SetSysClock+0xe8>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d002      	beq.n	8003b5e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	e001      	b.n	8003b62 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d142      	bne.n	8003bee <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003b68:	4a24      	ldr	r2, [pc, #144]	; (8003bfc <SetSysClock+0xe8>)
 8003b6a:	4b24      	ldr	r3, [pc, #144]	; (8003bfc <SetSysClock+0xe8>)
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b72:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8003b74:	4a22      	ldr	r2, [pc, #136]	; (8003c00 <SetSysClock+0xec>)
 8003b76:	4b22      	ldr	r3, [pc, #136]	; (8003c00 <SetSysClock+0xec>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b7e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003b80:	4a1e      	ldr	r2, [pc, #120]	; (8003bfc <SetSysClock+0xe8>)
 8003b82:	4b1e      	ldr	r3, [pc, #120]	; (8003bfc <SetSysClock+0xe8>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003b88:	4a1c      	ldr	r2, [pc, #112]	; (8003bfc <SetSysClock+0xe8>)
 8003b8a:	4b1c      	ldr	r3, [pc, #112]	; (8003bfc <SetSysClock+0xe8>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b92:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003b94:	4a19      	ldr	r2, [pc, #100]	; (8003bfc <SetSysClock+0xe8>)
 8003b96:	4b19      	ldr	r3, [pc, #100]	; (8003bfc <SetSysClock+0xe8>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003b9e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003ba0:	4b16      	ldr	r3, [pc, #88]	; (8003bfc <SetSysClock+0xe8>)
 8003ba2:	4a18      	ldr	r2, [pc, #96]	; (8003c04 <SetSysClock+0xf0>)
 8003ba4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003ba6:	4a15      	ldr	r2, [pc, #84]	; (8003bfc <SetSysClock+0xe8>)
 8003ba8:	4b14      	ldr	r3, [pc, #80]	; (8003bfc <SetSysClock+0xe8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bb0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003bb2:	bf00      	nop
 8003bb4:	4b11      	ldr	r3, [pc, #68]	; (8003bfc <SetSysClock+0xe8>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0f9      	beq.n	8003bb4 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003bc0:	4b11      	ldr	r3, [pc, #68]	; (8003c08 <SetSysClock+0xf4>)
 8003bc2:	f240 6205 	movw	r2, #1541	; 0x605
 8003bc6:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003bc8:	4a0c      	ldr	r2, [pc, #48]	; (8003bfc <SetSysClock+0xe8>)
 8003bca:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <SetSysClock+0xe8>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f023 0303 	bic.w	r3, r3, #3
 8003bd2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003bd4:	4a09      	ldr	r2, [pc, #36]	; (8003bfc <SetSysClock+0xe8>)
 8003bd6:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <SetSysClock+0xe8>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f043 0302 	orr.w	r3, r3, #2
 8003bde:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8003be0:	bf00      	nop
 8003be2:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <SetSysClock+0xe8>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 030c 	and.w	r3, r3, #12
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d1f9      	bne.n	8003be2 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	40007000 	.word	0x40007000
 8003c04:	07405408 	.word	0x07405408
 8003c08:	40023c00 	.word	0x40023c00

08003c0c <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
	int div = 1;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003c1c:	e004      	b.n	8003c28 <ts_itoa+0x1c>
		div *= base;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	fb02 f303 	mul.w	r3, r2, r3
 8003c26:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d2f3      	bcs.n	8003c1e <ts_itoa+0x12>

	while (div != 0)
 8003c36:	e029      	b.n	8003c8c <ts_itoa+0x80>
	{
		int num = d/div;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c40:	613b      	str	r3, [r7, #16]
		d = d%div;
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c4a:	fb02 f201 	mul.w	r2, r2, r1
 8003c4e:	1a9b      	subs	r3, r3, r2
 8003c50:	60bb      	str	r3, [r7, #8]
		div /= base;
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	fb92 f3f3 	sdiv	r3, r2, r3
 8003c5a:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	2b09      	cmp	r3, #9
 8003c60:	dd0a      	ble.n	8003c78 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	1c59      	adds	r1, r3, #1
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	6011      	str	r1, [r2, #0]
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	3237      	adds	r2, #55	; 0x37
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	701a      	strb	r2, [r3, #0]
 8003c76:	e009      	b.n	8003c8c <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	1c59      	adds	r1, r3, #1
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	6011      	str	r1, [r2, #0]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	3230      	adds	r2, #48	; 0x30
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1d2      	bne.n	8003c38 <ts_itoa+0x2c>
	}
}
 8003c92:	bf00      	nop
 8003c94:	371c      	adds	r7, #28
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b088      	sub	sp, #32
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	60f8      	str	r0, [r7, #12]
 8003ca6:	60b9      	str	r1, [r7, #8]
 8003ca8:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8003cae:	e07d      	b.n	8003dac <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b25      	cmp	r3, #37	; 0x25
 8003cb6:	d171      	bne.n	8003d9c <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	60bb      	str	r3, [r7, #8]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	2b64      	cmp	r3, #100	; 0x64
 8003cc4:	d01e      	beq.n	8003d04 <ts_formatstring+0x66>
 8003cc6:	2b64      	cmp	r3, #100	; 0x64
 8003cc8:	dc06      	bgt.n	8003cd8 <ts_formatstring+0x3a>
 8003cca:	2b58      	cmp	r3, #88	; 0x58
 8003ccc:	d050      	beq.n	8003d70 <ts_formatstring+0xd2>
 8003cce:	2b63      	cmp	r3, #99	; 0x63
 8003cd0:	d00e      	beq.n	8003cf0 <ts_formatstring+0x52>
 8003cd2:	2b25      	cmp	r3, #37	; 0x25
 8003cd4:	d058      	beq.n	8003d88 <ts_formatstring+0xea>
 8003cd6:	e05d      	b.n	8003d94 <ts_formatstring+0xf6>
 8003cd8:	2b73      	cmp	r3, #115	; 0x73
 8003cda:	d02b      	beq.n	8003d34 <ts_formatstring+0x96>
 8003cdc:	2b73      	cmp	r3, #115	; 0x73
 8003cde:	dc02      	bgt.n	8003ce6 <ts_formatstring+0x48>
 8003ce0:	2b69      	cmp	r3, #105	; 0x69
 8003ce2:	d00f      	beq.n	8003d04 <ts_formatstring+0x66>
 8003ce4:	e056      	b.n	8003d94 <ts_formatstring+0xf6>
 8003ce6:	2b75      	cmp	r3, #117	; 0x75
 8003ce8:	d037      	beq.n	8003d5a <ts_formatstring+0xbc>
 8003cea:	2b78      	cmp	r3, #120	; 0x78
 8003cec:	d040      	beq.n	8003d70 <ts_formatstring+0xd2>
 8003cee:	e051      	b.n	8003d94 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	60fa      	str	r2, [r7, #12]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	1d11      	adds	r1, r2, #4
 8003cfa:	6079      	str	r1, [r7, #4]
 8003cfc:	6812      	ldr	r2, [r2, #0]
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	701a      	strb	r2, [r3, #0]
				break;
 8003d02:	e047      	b.n	8003d94 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	1d1a      	adds	r2, r3, #4
 8003d08:	607a      	str	r2, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	da07      	bge.n	8003d24 <ts_formatstring+0x86>
					{
						val *= -1;
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	425b      	negs	r3, r3
 8003d18:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	60fa      	str	r2, [r7, #12]
 8003d20:	222d      	movs	r2, #45	; 0x2d
 8003d22:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8003d24:	69f9      	ldr	r1, [r7, #28]
 8003d26:	f107 030c 	add.w	r3, r7, #12
 8003d2a:	220a      	movs	r2, #10
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff ff6d 	bl	8003c0c <ts_itoa>
				}
				break;
 8003d32:	e02f      	b.n	8003d94 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	1d1a      	adds	r2, r3, #4
 8003d38:	607a      	str	r2, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8003d3e:	e007      	b.n	8003d50 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	60fa      	str	r2, [r7, #12]
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	1c51      	adds	r1, r2, #1
 8003d4a:	61b9      	str	r1, [r7, #24]
 8003d4c:	7812      	ldrb	r2, [r2, #0]
 8003d4e:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1f3      	bne.n	8003d40 <ts_formatstring+0xa2>
					}
				}
				break;
 8003d58:	e01c      	b.n	8003d94 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	1d1a      	adds	r2, r3, #4
 8003d5e:	607a      	str	r2, [r7, #4]
 8003d60:	6819      	ldr	r1, [r3, #0]
 8003d62:	f107 030c 	add.w	r3, r7, #12
 8003d66:	220a      	movs	r2, #10
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff ff4f 	bl	8003c0c <ts_itoa>
				break;
 8003d6e:	e011      	b.n	8003d94 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	1d1a      	adds	r2, r3, #4
 8003d74:	607a      	str	r2, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4619      	mov	r1, r3
 8003d7a:	f107 030c 	add.w	r3, r7, #12
 8003d7e:	2210      	movs	r2, #16
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff ff43 	bl	8003c0c <ts_itoa>
				break;
 8003d86:	e005      	b.n	8003d94 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	60fa      	str	r2, [r7, #12]
 8003d8e:	2225      	movs	r2, #37	; 0x25
 8003d90:	701a      	strb	r2, [r3, #0]
				  break;
 8003d92:	bf00      	nop
			}
			fmt++;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	3301      	adds	r3, #1
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	e007      	b.n	8003dac <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	60fa      	str	r2, [r7, #12]
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	1c51      	adds	r1, r2, #1
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	7812      	ldrb	r2, [r2, #0]
 8003daa:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f47f af7d 	bne.w	8003cb0 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	1ad3      	subs	r3, r2, r3
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3720      	adds	r7, #32
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
	int length = 0;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8003dda:	e081      	b.n	8003ee0 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2b25      	cmp	r3, #37	; 0x25
 8003de2:	d177      	bne.n	8003ed4 <ts_formatlength+0x108>
		{
			++fmt;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3301      	adds	r3, #1
 8003de8:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	3b58      	subs	r3, #88	; 0x58
 8003df0:	2b20      	cmp	r3, #32
 8003df2:	d86a      	bhi.n	8003eca <ts_formatlength+0xfe>
 8003df4:	a201      	add	r2, pc, #4	; (adr r2, 8003dfc <ts_formatlength+0x30>)
 8003df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfa:	bf00      	nop
 8003dfc:	08003ebd 	.word	0x08003ebd
 8003e00:	08003ecb 	.word	0x08003ecb
 8003e04:	08003ecb 	.word	0x08003ecb
 8003e08:	08003ecb 	.word	0x08003ecb
 8003e0c:	08003ecb 	.word	0x08003ecb
 8003e10:	08003ecb 	.word	0x08003ecb
 8003e14:	08003ecb 	.word	0x08003ecb
 8003e18:	08003ecb 	.word	0x08003ecb
 8003e1c:	08003ecb 	.word	0x08003ecb
 8003e20:	08003ecb 	.word	0x08003ecb
 8003e24:	08003ecb 	.word	0x08003ecb
 8003e28:	08003e81 	.word	0x08003e81
 8003e2c:	08003e8f 	.word	0x08003e8f
 8003e30:	08003ecb 	.word	0x08003ecb
 8003e34:	08003ecb 	.word	0x08003ecb
 8003e38:	08003ecb 	.word	0x08003ecb
 8003e3c:	08003ecb 	.word	0x08003ecb
 8003e40:	08003e8f 	.word	0x08003e8f
 8003e44:	08003ecb 	.word	0x08003ecb
 8003e48:	08003ecb 	.word	0x08003ecb
 8003e4c:	08003ecb 	.word	0x08003ecb
 8003e50:	08003ecb 	.word	0x08003ecb
 8003e54:	08003ecb 	.word	0x08003ecb
 8003e58:	08003ecb 	.word	0x08003ecb
 8003e5c:	08003ecb 	.word	0x08003ecb
 8003e60:	08003ecb 	.word	0x08003ecb
 8003e64:	08003ecb 	.word	0x08003ecb
 8003e68:	08003e9d 	.word	0x08003e9d
 8003e6c:	08003ecb 	.word	0x08003ecb
 8003e70:	08003e8f 	.word	0x08003e8f
 8003e74:	08003ecb 	.word	0x08003ecb
 8003e78:	08003ecb 	.word	0x08003ecb
 8003e7c:	08003ebd 	.word	0x08003ebd
			{
			  case 'c':
		  		  va_arg(va, int);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	3304      	adds	r3, #4
 8003e84:	603b      	str	r3, [r7, #0]
				  ++length;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	60fb      	str	r3, [r7, #12]
				  break;
 8003e8c:	e025      	b.n	8003eda <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	330b      	adds	r3, #11
 8003e92:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	3304      	adds	r3, #4
 8003e98:	603b      	str	r3, [r7, #0]
				  break;
 8003e9a:	e01e      	b.n	8003eda <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	1d1a      	adds	r2, r3, #4
 8003ea0:	603a      	str	r2, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8003ea6:	e002      	b.n	8003eae <ts_formatlength+0xe2>
			  			  ++length;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	60ba      	str	r2, [r7, #8]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f6      	bne.n	8003ea8 <ts_formatlength+0xdc>
			  	  }
				  break;
 8003eba:	e00e      	b.n	8003eda <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	3308      	adds	r3, #8
 8003ec0:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	603b      	str	r3, [r7, #0]
				  break;
 8003ec8:	e007      	b.n	8003eda <ts_formatlength+0x10e>
			  default:
				  ++length;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	60fb      	str	r3, [r7, #12]
				  break;
 8003ed0:	bf00      	nop
 8003ed2:	e002      	b.n	8003eda <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3301      	adds	r3, #1
 8003ede:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f47f af79 	bne.w	8003ddc <ts_formatlength+0x10>
	}
	return length;
 8003eea:	68fb      	ldr	r3, [r7, #12]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <printf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int printf(const char *fmt, ...)
{
 8003ef8:	b40f      	push	{r0, r1, r2, r3}
 8003efa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
	int length = 0;
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8003f06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003f0a:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8003f0c:	6839      	ldr	r1, [r7, #0]
 8003f0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f10:	f7ff ff5c 	bl	8003dcc <ts_formatlength>
 8003f14:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8003f16:	466b      	mov	r3, sp
 8003f18:	461e      	mov	r6, r3
		char buf[length];
 8003f1a:	68f9      	ldr	r1, [r7, #12]
 8003f1c:	1e4b      	subs	r3, r1, #1
 8003f1e:	60bb      	str	r3, [r7, #8]
 8003f20:	460b      	mov	r3, r1
 8003f22:	461a      	mov	r2, r3
 8003f24:	f04f 0300 	mov.w	r3, #0
 8003f28:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8003f2c:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8003f30:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8003f34:	460b      	mov	r3, r1
 8003f36:	461a      	mov	r2, r3
 8003f38:	f04f 0300 	mov.w	r3, #0
 8003f3c:	00dd      	lsls	r5, r3, #3
 8003f3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f42:	00d4      	lsls	r4, r2, #3
 8003f44:	460b      	mov	r3, r1
 8003f46:	3307      	adds	r3, #7
 8003f48:	08db      	lsrs	r3, r3, #3
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	ebad 0d03 	sub.w	sp, sp, r3
 8003f50:	466b      	mov	r3, sp
 8003f52:	3300      	adds	r3, #0
 8003f54:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8003f56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003f5a:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff fe9b 	bl	8003c9e <ts_formatstring>
 8003f68:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4619      	mov	r1, r3
 8003f70:	2001      	movs	r0, #1
 8003f72:	f7ff fcff 	bl	8003974 <_write>
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f86:	b004      	add	sp, #16
 8003f88:	4770      	bx	lr
	...

08003f8c <__libc_init_array>:
 8003f8c:	b570      	push	{r4, r5, r6, lr}
 8003f8e:	4e0d      	ldr	r6, [pc, #52]	; (8003fc4 <__libc_init_array+0x38>)
 8003f90:	4c0d      	ldr	r4, [pc, #52]	; (8003fc8 <__libc_init_array+0x3c>)
 8003f92:	1ba4      	subs	r4, r4, r6
 8003f94:	10a4      	asrs	r4, r4, #2
 8003f96:	2500      	movs	r5, #0
 8003f98:	42a5      	cmp	r5, r4
 8003f9a:	d109      	bne.n	8003fb0 <__libc_init_array+0x24>
 8003f9c:	4e0b      	ldr	r6, [pc, #44]	; (8003fcc <__libc_init_array+0x40>)
 8003f9e:	4c0c      	ldr	r4, [pc, #48]	; (8003fd0 <__libc_init_array+0x44>)
 8003fa0:	f000 fd82 	bl	8004aa8 <_init>
 8003fa4:	1ba4      	subs	r4, r4, r6
 8003fa6:	10a4      	asrs	r4, r4, #2
 8003fa8:	2500      	movs	r5, #0
 8003faa:	42a5      	cmp	r5, r4
 8003fac:	d105      	bne.n	8003fba <__libc_init_array+0x2e>
 8003fae:	bd70      	pop	{r4, r5, r6, pc}
 8003fb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fb4:	4798      	blx	r3
 8003fb6:	3501      	adds	r5, #1
 8003fb8:	e7ee      	b.n	8003f98 <__libc_init_array+0xc>
 8003fba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fbe:	4798      	blx	r3
 8003fc0:	3501      	adds	r5, #1
 8003fc2:	e7f2      	b.n	8003faa <__libc_init_array+0x1e>
 8003fc4:	08004ac0 	.word	0x08004ac0
 8003fc8:	08004ac0 	.word	0x08004ac0
 8003fcc:	08004ac0 	.word	0x08004ac0
 8003fd0:	08004ac4 	.word	0x08004ac4

08003fd4 <memcpy>:
 8003fd4:	b510      	push	{r4, lr}
 8003fd6:	1e43      	subs	r3, r0, #1
 8003fd8:	440a      	add	r2, r1
 8003fda:	4291      	cmp	r1, r2
 8003fdc:	d100      	bne.n	8003fe0 <memcpy+0xc>
 8003fde:	bd10      	pop	{r4, pc}
 8003fe0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fe4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fe8:	e7f7      	b.n	8003fda <memcpy+0x6>
	...

08003fec <_puts_r>:
 8003fec:	b570      	push	{r4, r5, r6, lr}
 8003fee:	460e      	mov	r6, r1
 8003ff0:	4605      	mov	r5, r0
 8003ff2:	b118      	cbz	r0, 8003ffc <_puts_r+0x10>
 8003ff4:	6983      	ldr	r3, [r0, #24]
 8003ff6:	b90b      	cbnz	r3, 8003ffc <_puts_r+0x10>
 8003ff8:	f000 fa48 	bl	800448c <__sinit>
 8003ffc:	69ab      	ldr	r3, [r5, #24]
 8003ffe:	68ac      	ldr	r4, [r5, #8]
 8004000:	b913      	cbnz	r3, 8004008 <_puts_r+0x1c>
 8004002:	4628      	mov	r0, r5
 8004004:	f000 fa42 	bl	800448c <__sinit>
 8004008:	4b23      	ldr	r3, [pc, #140]	; (8004098 <_puts_r+0xac>)
 800400a:	429c      	cmp	r4, r3
 800400c:	d117      	bne.n	800403e <_puts_r+0x52>
 800400e:	686c      	ldr	r4, [r5, #4]
 8004010:	89a3      	ldrh	r3, [r4, #12]
 8004012:	071b      	lsls	r3, r3, #28
 8004014:	d51d      	bpl.n	8004052 <_puts_r+0x66>
 8004016:	6923      	ldr	r3, [r4, #16]
 8004018:	b1db      	cbz	r3, 8004052 <_puts_r+0x66>
 800401a:	3e01      	subs	r6, #1
 800401c:	68a3      	ldr	r3, [r4, #8]
 800401e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004022:	3b01      	subs	r3, #1
 8004024:	60a3      	str	r3, [r4, #8]
 8004026:	b9e9      	cbnz	r1, 8004064 <_puts_r+0x78>
 8004028:	2b00      	cmp	r3, #0
 800402a:	da2e      	bge.n	800408a <_puts_r+0x9e>
 800402c:	4622      	mov	r2, r4
 800402e:	210a      	movs	r1, #10
 8004030:	4628      	mov	r0, r5
 8004032:	f000 f879 	bl	8004128 <__swbuf_r>
 8004036:	3001      	adds	r0, #1
 8004038:	d011      	beq.n	800405e <_puts_r+0x72>
 800403a:	200a      	movs	r0, #10
 800403c:	bd70      	pop	{r4, r5, r6, pc}
 800403e:	4b17      	ldr	r3, [pc, #92]	; (800409c <_puts_r+0xb0>)
 8004040:	429c      	cmp	r4, r3
 8004042:	d101      	bne.n	8004048 <_puts_r+0x5c>
 8004044:	68ac      	ldr	r4, [r5, #8]
 8004046:	e7e3      	b.n	8004010 <_puts_r+0x24>
 8004048:	4b15      	ldr	r3, [pc, #84]	; (80040a0 <_puts_r+0xb4>)
 800404a:	429c      	cmp	r4, r3
 800404c:	bf08      	it	eq
 800404e:	68ec      	ldreq	r4, [r5, #12]
 8004050:	e7de      	b.n	8004010 <_puts_r+0x24>
 8004052:	4621      	mov	r1, r4
 8004054:	4628      	mov	r0, r5
 8004056:	f000 f8b9 	bl	80041cc <__swsetup_r>
 800405a:	2800      	cmp	r0, #0
 800405c:	d0dd      	beq.n	800401a <_puts_r+0x2e>
 800405e:	f04f 30ff 	mov.w	r0, #4294967295
 8004062:	bd70      	pop	{r4, r5, r6, pc}
 8004064:	2b00      	cmp	r3, #0
 8004066:	da04      	bge.n	8004072 <_puts_r+0x86>
 8004068:	69a2      	ldr	r2, [r4, #24]
 800406a:	4293      	cmp	r3, r2
 800406c:	db06      	blt.n	800407c <_puts_r+0x90>
 800406e:	290a      	cmp	r1, #10
 8004070:	d004      	beq.n	800407c <_puts_r+0x90>
 8004072:	6823      	ldr	r3, [r4, #0]
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	6022      	str	r2, [r4, #0]
 8004078:	7019      	strb	r1, [r3, #0]
 800407a:	e7cf      	b.n	800401c <_puts_r+0x30>
 800407c:	4622      	mov	r2, r4
 800407e:	4628      	mov	r0, r5
 8004080:	f000 f852 	bl	8004128 <__swbuf_r>
 8004084:	3001      	adds	r0, #1
 8004086:	d1c9      	bne.n	800401c <_puts_r+0x30>
 8004088:	e7e9      	b.n	800405e <_puts_r+0x72>
 800408a:	6823      	ldr	r3, [r4, #0]
 800408c:	200a      	movs	r0, #10
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	6022      	str	r2, [r4, #0]
 8004092:	7018      	strb	r0, [r3, #0]
 8004094:	bd70      	pop	{r4, r5, r6, pc}
 8004096:	bf00      	nop
 8004098:	08004a64 	.word	0x08004a64
 800409c:	08004a84 	.word	0x08004a84
 80040a0:	08004a44 	.word	0x08004a44

080040a4 <puts>:
 80040a4:	4b02      	ldr	r3, [pc, #8]	; (80040b0 <puts+0xc>)
 80040a6:	4601      	mov	r1, r0
 80040a8:	6818      	ldr	r0, [r3, #0]
 80040aa:	f7ff bf9f 	b.w	8003fec <_puts_r>
 80040ae:	bf00      	nop
 80040b0:	20000018 	.word	0x20000018

080040b4 <rand>:
 80040b4:	4b19      	ldr	r3, [pc, #100]	; (800411c <rand+0x68>)
 80040b6:	b510      	push	{r4, lr}
 80040b8:	681c      	ldr	r4, [r3, #0]
 80040ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80040bc:	b9d3      	cbnz	r3, 80040f4 <rand+0x40>
 80040be:	2018      	movs	r0, #24
 80040c0:	f000 fad2 	bl	8004668 <malloc>
 80040c4:	f243 330e 	movw	r3, #13070	; 0x330e
 80040c8:	63a0      	str	r0, [r4, #56]	; 0x38
 80040ca:	8003      	strh	r3, [r0, #0]
 80040cc:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80040d0:	8043      	strh	r3, [r0, #2]
 80040d2:	f241 2334 	movw	r3, #4660	; 0x1234
 80040d6:	8083      	strh	r3, [r0, #4]
 80040d8:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80040dc:	80c3      	strh	r3, [r0, #6]
 80040de:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80040e2:	8103      	strh	r3, [r0, #8]
 80040e4:	2305      	movs	r3, #5
 80040e6:	8143      	strh	r3, [r0, #10]
 80040e8:	230b      	movs	r3, #11
 80040ea:	8183      	strh	r3, [r0, #12]
 80040ec:	2201      	movs	r2, #1
 80040ee:	2300      	movs	r3, #0
 80040f0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80040f4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80040f6:	480a      	ldr	r0, [pc, #40]	; (8004120 <rand+0x6c>)
 80040f8:	690a      	ldr	r2, [r1, #16]
 80040fa:	694b      	ldr	r3, [r1, #20]
 80040fc:	4c09      	ldr	r4, [pc, #36]	; (8004124 <rand+0x70>)
 80040fe:	4350      	muls	r0, r2
 8004100:	fb04 0003 	mla	r0, r4, r3, r0
 8004104:	fba2 2304 	umull	r2, r3, r2, r4
 8004108:	3201      	adds	r2, #1
 800410a:	4403      	add	r3, r0
 800410c:	f143 0300 	adc.w	r3, r3, #0
 8004110:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004114:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8004118:	bd10      	pop	{r4, pc}
 800411a:	bf00      	nop
 800411c:	20000018 	.word	0x20000018
 8004120:	5851f42d 	.word	0x5851f42d
 8004124:	4c957f2d 	.word	0x4c957f2d

08004128 <__swbuf_r>:
 8004128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412a:	460e      	mov	r6, r1
 800412c:	4614      	mov	r4, r2
 800412e:	4605      	mov	r5, r0
 8004130:	b118      	cbz	r0, 800413a <__swbuf_r+0x12>
 8004132:	6983      	ldr	r3, [r0, #24]
 8004134:	b90b      	cbnz	r3, 800413a <__swbuf_r+0x12>
 8004136:	f000 f9a9 	bl	800448c <__sinit>
 800413a:	4b21      	ldr	r3, [pc, #132]	; (80041c0 <__swbuf_r+0x98>)
 800413c:	429c      	cmp	r4, r3
 800413e:	d12a      	bne.n	8004196 <__swbuf_r+0x6e>
 8004140:	686c      	ldr	r4, [r5, #4]
 8004142:	69a3      	ldr	r3, [r4, #24]
 8004144:	60a3      	str	r3, [r4, #8]
 8004146:	89a3      	ldrh	r3, [r4, #12]
 8004148:	071a      	lsls	r2, r3, #28
 800414a:	d52e      	bpl.n	80041aa <__swbuf_r+0x82>
 800414c:	6923      	ldr	r3, [r4, #16]
 800414e:	b363      	cbz	r3, 80041aa <__swbuf_r+0x82>
 8004150:	6923      	ldr	r3, [r4, #16]
 8004152:	6820      	ldr	r0, [r4, #0]
 8004154:	1ac0      	subs	r0, r0, r3
 8004156:	6963      	ldr	r3, [r4, #20]
 8004158:	b2f6      	uxtb	r6, r6
 800415a:	4298      	cmp	r0, r3
 800415c:	4637      	mov	r7, r6
 800415e:	db04      	blt.n	800416a <__swbuf_r+0x42>
 8004160:	4621      	mov	r1, r4
 8004162:	4628      	mov	r0, r5
 8004164:	f000 f928 	bl	80043b8 <_fflush_r>
 8004168:	bb28      	cbnz	r0, 80041b6 <__swbuf_r+0x8e>
 800416a:	68a3      	ldr	r3, [r4, #8]
 800416c:	3b01      	subs	r3, #1
 800416e:	60a3      	str	r3, [r4, #8]
 8004170:	6823      	ldr	r3, [r4, #0]
 8004172:	1c5a      	adds	r2, r3, #1
 8004174:	6022      	str	r2, [r4, #0]
 8004176:	701e      	strb	r6, [r3, #0]
 8004178:	6963      	ldr	r3, [r4, #20]
 800417a:	3001      	adds	r0, #1
 800417c:	4298      	cmp	r0, r3
 800417e:	d004      	beq.n	800418a <__swbuf_r+0x62>
 8004180:	89a3      	ldrh	r3, [r4, #12]
 8004182:	07db      	lsls	r3, r3, #31
 8004184:	d519      	bpl.n	80041ba <__swbuf_r+0x92>
 8004186:	2e0a      	cmp	r6, #10
 8004188:	d117      	bne.n	80041ba <__swbuf_r+0x92>
 800418a:	4621      	mov	r1, r4
 800418c:	4628      	mov	r0, r5
 800418e:	f000 f913 	bl	80043b8 <_fflush_r>
 8004192:	b190      	cbz	r0, 80041ba <__swbuf_r+0x92>
 8004194:	e00f      	b.n	80041b6 <__swbuf_r+0x8e>
 8004196:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <__swbuf_r+0x9c>)
 8004198:	429c      	cmp	r4, r3
 800419a:	d101      	bne.n	80041a0 <__swbuf_r+0x78>
 800419c:	68ac      	ldr	r4, [r5, #8]
 800419e:	e7d0      	b.n	8004142 <__swbuf_r+0x1a>
 80041a0:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <__swbuf_r+0xa0>)
 80041a2:	429c      	cmp	r4, r3
 80041a4:	bf08      	it	eq
 80041a6:	68ec      	ldreq	r4, [r5, #12]
 80041a8:	e7cb      	b.n	8004142 <__swbuf_r+0x1a>
 80041aa:	4621      	mov	r1, r4
 80041ac:	4628      	mov	r0, r5
 80041ae:	f000 f80d 	bl	80041cc <__swsetup_r>
 80041b2:	2800      	cmp	r0, #0
 80041b4:	d0cc      	beq.n	8004150 <__swbuf_r+0x28>
 80041b6:	f04f 37ff 	mov.w	r7, #4294967295
 80041ba:	4638      	mov	r0, r7
 80041bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041be:	bf00      	nop
 80041c0:	08004a64 	.word	0x08004a64
 80041c4:	08004a84 	.word	0x08004a84
 80041c8:	08004a44 	.word	0x08004a44

080041cc <__swsetup_r>:
 80041cc:	4b32      	ldr	r3, [pc, #200]	; (8004298 <__swsetup_r+0xcc>)
 80041ce:	b570      	push	{r4, r5, r6, lr}
 80041d0:	681d      	ldr	r5, [r3, #0]
 80041d2:	4606      	mov	r6, r0
 80041d4:	460c      	mov	r4, r1
 80041d6:	b125      	cbz	r5, 80041e2 <__swsetup_r+0x16>
 80041d8:	69ab      	ldr	r3, [r5, #24]
 80041da:	b913      	cbnz	r3, 80041e2 <__swsetup_r+0x16>
 80041dc:	4628      	mov	r0, r5
 80041de:	f000 f955 	bl	800448c <__sinit>
 80041e2:	4b2e      	ldr	r3, [pc, #184]	; (800429c <__swsetup_r+0xd0>)
 80041e4:	429c      	cmp	r4, r3
 80041e6:	d10f      	bne.n	8004208 <__swsetup_r+0x3c>
 80041e8:	686c      	ldr	r4, [r5, #4]
 80041ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	0715      	lsls	r5, r2, #28
 80041f2:	d42c      	bmi.n	800424e <__swsetup_r+0x82>
 80041f4:	06d0      	lsls	r0, r2, #27
 80041f6:	d411      	bmi.n	800421c <__swsetup_r+0x50>
 80041f8:	2209      	movs	r2, #9
 80041fa:	6032      	str	r2, [r6, #0]
 80041fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004200:	81a3      	strh	r3, [r4, #12]
 8004202:	f04f 30ff 	mov.w	r0, #4294967295
 8004206:	bd70      	pop	{r4, r5, r6, pc}
 8004208:	4b25      	ldr	r3, [pc, #148]	; (80042a0 <__swsetup_r+0xd4>)
 800420a:	429c      	cmp	r4, r3
 800420c:	d101      	bne.n	8004212 <__swsetup_r+0x46>
 800420e:	68ac      	ldr	r4, [r5, #8]
 8004210:	e7eb      	b.n	80041ea <__swsetup_r+0x1e>
 8004212:	4b24      	ldr	r3, [pc, #144]	; (80042a4 <__swsetup_r+0xd8>)
 8004214:	429c      	cmp	r4, r3
 8004216:	bf08      	it	eq
 8004218:	68ec      	ldreq	r4, [r5, #12]
 800421a:	e7e6      	b.n	80041ea <__swsetup_r+0x1e>
 800421c:	0751      	lsls	r1, r2, #29
 800421e:	d512      	bpl.n	8004246 <__swsetup_r+0x7a>
 8004220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004222:	b141      	cbz	r1, 8004236 <__swsetup_r+0x6a>
 8004224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004228:	4299      	cmp	r1, r3
 800422a:	d002      	beq.n	8004232 <__swsetup_r+0x66>
 800422c:	4630      	mov	r0, r6
 800422e:	f000 fa2b 	bl	8004688 <_free_r>
 8004232:	2300      	movs	r3, #0
 8004234:	6363      	str	r3, [r4, #52]	; 0x34
 8004236:	89a3      	ldrh	r3, [r4, #12]
 8004238:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800423c:	81a3      	strh	r3, [r4, #12]
 800423e:	2300      	movs	r3, #0
 8004240:	6063      	str	r3, [r4, #4]
 8004242:	6923      	ldr	r3, [r4, #16]
 8004244:	6023      	str	r3, [r4, #0]
 8004246:	89a3      	ldrh	r3, [r4, #12]
 8004248:	f043 0308 	orr.w	r3, r3, #8
 800424c:	81a3      	strh	r3, [r4, #12]
 800424e:	6923      	ldr	r3, [r4, #16]
 8004250:	b94b      	cbnz	r3, 8004266 <__swsetup_r+0x9a>
 8004252:	89a3      	ldrh	r3, [r4, #12]
 8004254:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800425c:	d003      	beq.n	8004266 <__swsetup_r+0x9a>
 800425e:	4621      	mov	r1, r4
 8004260:	4630      	mov	r0, r6
 8004262:	f000 f9c1 	bl	80045e8 <__smakebuf_r>
 8004266:	89a2      	ldrh	r2, [r4, #12]
 8004268:	f012 0301 	ands.w	r3, r2, #1
 800426c:	d00c      	beq.n	8004288 <__swsetup_r+0xbc>
 800426e:	2300      	movs	r3, #0
 8004270:	60a3      	str	r3, [r4, #8]
 8004272:	6963      	ldr	r3, [r4, #20]
 8004274:	425b      	negs	r3, r3
 8004276:	61a3      	str	r3, [r4, #24]
 8004278:	6923      	ldr	r3, [r4, #16]
 800427a:	b953      	cbnz	r3, 8004292 <__swsetup_r+0xc6>
 800427c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004280:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004284:	d1ba      	bne.n	80041fc <__swsetup_r+0x30>
 8004286:	bd70      	pop	{r4, r5, r6, pc}
 8004288:	0792      	lsls	r2, r2, #30
 800428a:	bf58      	it	pl
 800428c:	6963      	ldrpl	r3, [r4, #20]
 800428e:	60a3      	str	r3, [r4, #8]
 8004290:	e7f2      	b.n	8004278 <__swsetup_r+0xac>
 8004292:	2000      	movs	r0, #0
 8004294:	e7f7      	b.n	8004286 <__swsetup_r+0xba>
 8004296:	bf00      	nop
 8004298:	20000018 	.word	0x20000018
 800429c:	08004a64 	.word	0x08004a64
 80042a0:	08004a84 	.word	0x08004a84
 80042a4:	08004a44 	.word	0x08004a44

080042a8 <__sflush_r>:
 80042a8:	898a      	ldrh	r2, [r1, #12]
 80042aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042ae:	4605      	mov	r5, r0
 80042b0:	0710      	lsls	r0, r2, #28
 80042b2:	460c      	mov	r4, r1
 80042b4:	d45a      	bmi.n	800436c <__sflush_r+0xc4>
 80042b6:	684b      	ldr	r3, [r1, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	dc05      	bgt.n	80042c8 <__sflush_r+0x20>
 80042bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	dc02      	bgt.n	80042c8 <__sflush_r+0x20>
 80042c2:	2000      	movs	r0, #0
 80042c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042ca:	2e00      	cmp	r6, #0
 80042cc:	d0f9      	beq.n	80042c2 <__sflush_r+0x1a>
 80042ce:	2300      	movs	r3, #0
 80042d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80042d4:	682f      	ldr	r7, [r5, #0]
 80042d6:	602b      	str	r3, [r5, #0]
 80042d8:	d033      	beq.n	8004342 <__sflush_r+0x9a>
 80042da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80042dc:	89a3      	ldrh	r3, [r4, #12]
 80042de:	075a      	lsls	r2, r3, #29
 80042e0:	d505      	bpl.n	80042ee <__sflush_r+0x46>
 80042e2:	6863      	ldr	r3, [r4, #4]
 80042e4:	1ac0      	subs	r0, r0, r3
 80042e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042e8:	b10b      	cbz	r3, 80042ee <__sflush_r+0x46>
 80042ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042ec:	1ac0      	subs	r0, r0, r3
 80042ee:	2300      	movs	r3, #0
 80042f0:	4602      	mov	r2, r0
 80042f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042f4:	6a21      	ldr	r1, [r4, #32]
 80042f6:	4628      	mov	r0, r5
 80042f8:	47b0      	blx	r6
 80042fa:	1c43      	adds	r3, r0, #1
 80042fc:	89a3      	ldrh	r3, [r4, #12]
 80042fe:	d106      	bne.n	800430e <__sflush_r+0x66>
 8004300:	6829      	ldr	r1, [r5, #0]
 8004302:	291d      	cmp	r1, #29
 8004304:	d84b      	bhi.n	800439e <__sflush_r+0xf6>
 8004306:	4a2b      	ldr	r2, [pc, #172]	; (80043b4 <__sflush_r+0x10c>)
 8004308:	40ca      	lsrs	r2, r1
 800430a:	07d6      	lsls	r6, r2, #31
 800430c:	d547      	bpl.n	800439e <__sflush_r+0xf6>
 800430e:	2200      	movs	r2, #0
 8004310:	6062      	str	r2, [r4, #4]
 8004312:	04d9      	lsls	r1, r3, #19
 8004314:	6922      	ldr	r2, [r4, #16]
 8004316:	6022      	str	r2, [r4, #0]
 8004318:	d504      	bpl.n	8004324 <__sflush_r+0x7c>
 800431a:	1c42      	adds	r2, r0, #1
 800431c:	d101      	bne.n	8004322 <__sflush_r+0x7a>
 800431e:	682b      	ldr	r3, [r5, #0]
 8004320:	b903      	cbnz	r3, 8004324 <__sflush_r+0x7c>
 8004322:	6560      	str	r0, [r4, #84]	; 0x54
 8004324:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004326:	602f      	str	r7, [r5, #0]
 8004328:	2900      	cmp	r1, #0
 800432a:	d0ca      	beq.n	80042c2 <__sflush_r+0x1a>
 800432c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004330:	4299      	cmp	r1, r3
 8004332:	d002      	beq.n	800433a <__sflush_r+0x92>
 8004334:	4628      	mov	r0, r5
 8004336:	f000 f9a7 	bl	8004688 <_free_r>
 800433a:	2000      	movs	r0, #0
 800433c:	6360      	str	r0, [r4, #52]	; 0x34
 800433e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004342:	6a21      	ldr	r1, [r4, #32]
 8004344:	2301      	movs	r3, #1
 8004346:	4628      	mov	r0, r5
 8004348:	47b0      	blx	r6
 800434a:	1c41      	adds	r1, r0, #1
 800434c:	d1c6      	bne.n	80042dc <__sflush_r+0x34>
 800434e:	682b      	ldr	r3, [r5, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0c3      	beq.n	80042dc <__sflush_r+0x34>
 8004354:	2b1d      	cmp	r3, #29
 8004356:	d001      	beq.n	800435c <__sflush_r+0xb4>
 8004358:	2b16      	cmp	r3, #22
 800435a:	d101      	bne.n	8004360 <__sflush_r+0xb8>
 800435c:	602f      	str	r7, [r5, #0]
 800435e:	e7b0      	b.n	80042c2 <__sflush_r+0x1a>
 8004360:	89a3      	ldrh	r3, [r4, #12]
 8004362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004366:	81a3      	strh	r3, [r4, #12]
 8004368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800436c:	690f      	ldr	r7, [r1, #16]
 800436e:	2f00      	cmp	r7, #0
 8004370:	d0a7      	beq.n	80042c2 <__sflush_r+0x1a>
 8004372:	0793      	lsls	r3, r2, #30
 8004374:	680e      	ldr	r6, [r1, #0]
 8004376:	bf08      	it	eq
 8004378:	694b      	ldreq	r3, [r1, #20]
 800437a:	600f      	str	r7, [r1, #0]
 800437c:	bf18      	it	ne
 800437e:	2300      	movne	r3, #0
 8004380:	eba6 0807 	sub.w	r8, r6, r7
 8004384:	608b      	str	r3, [r1, #8]
 8004386:	f1b8 0f00 	cmp.w	r8, #0
 800438a:	dd9a      	ble.n	80042c2 <__sflush_r+0x1a>
 800438c:	4643      	mov	r3, r8
 800438e:	463a      	mov	r2, r7
 8004390:	6a21      	ldr	r1, [r4, #32]
 8004392:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004394:	4628      	mov	r0, r5
 8004396:	47b0      	blx	r6
 8004398:	2800      	cmp	r0, #0
 800439a:	dc07      	bgt.n	80043ac <__sflush_r+0x104>
 800439c:	89a3      	ldrh	r3, [r4, #12]
 800439e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043a2:	81a3      	strh	r3, [r4, #12]
 80043a4:	f04f 30ff 	mov.w	r0, #4294967295
 80043a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043ac:	4407      	add	r7, r0
 80043ae:	eba8 0800 	sub.w	r8, r8, r0
 80043b2:	e7e8      	b.n	8004386 <__sflush_r+0xde>
 80043b4:	20400001 	.word	0x20400001

080043b8 <_fflush_r>:
 80043b8:	b538      	push	{r3, r4, r5, lr}
 80043ba:	690b      	ldr	r3, [r1, #16]
 80043bc:	4605      	mov	r5, r0
 80043be:	460c      	mov	r4, r1
 80043c0:	b1db      	cbz	r3, 80043fa <_fflush_r+0x42>
 80043c2:	b118      	cbz	r0, 80043cc <_fflush_r+0x14>
 80043c4:	6983      	ldr	r3, [r0, #24]
 80043c6:	b90b      	cbnz	r3, 80043cc <_fflush_r+0x14>
 80043c8:	f000 f860 	bl	800448c <__sinit>
 80043cc:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <_fflush_r+0x48>)
 80043ce:	429c      	cmp	r4, r3
 80043d0:	d109      	bne.n	80043e6 <_fflush_r+0x2e>
 80043d2:	686c      	ldr	r4, [r5, #4]
 80043d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043d8:	b17b      	cbz	r3, 80043fa <_fflush_r+0x42>
 80043da:	4621      	mov	r1, r4
 80043dc:	4628      	mov	r0, r5
 80043de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043e2:	f7ff bf61 	b.w	80042a8 <__sflush_r>
 80043e6:	4b07      	ldr	r3, [pc, #28]	; (8004404 <_fflush_r+0x4c>)
 80043e8:	429c      	cmp	r4, r3
 80043ea:	d101      	bne.n	80043f0 <_fflush_r+0x38>
 80043ec:	68ac      	ldr	r4, [r5, #8]
 80043ee:	e7f1      	b.n	80043d4 <_fflush_r+0x1c>
 80043f0:	4b05      	ldr	r3, [pc, #20]	; (8004408 <_fflush_r+0x50>)
 80043f2:	429c      	cmp	r4, r3
 80043f4:	bf08      	it	eq
 80043f6:	68ec      	ldreq	r4, [r5, #12]
 80043f8:	e7ec      	b.n	80043d4 <_fflush_r+0x1c>
 80043fa:	2000      	movs	r0, #0
 80043fc:	bd38      	pop	{r3, r4, r5, pc}
 80043fe:	bf00      	nop
 8004400:	08004a64 	.word	0x08004a64
 8004404:	08004a84 	.word	0x08004a84
 8004408:	08004a44 	.word	0x08004a44

0800440c <_cleanup_r>:
 800440c:	4901      	ldr	r1, [pc, #4]	; (8004414 <_cleanup_r+0x8>)
 800440e:	f000 b8a9 	b.w	8004564 <_fwalk_reent>
 8004412:	bf00      	nop
 8004414:	080043b9 	.word	0x080043b9

08004418 <std.isra.0>:
 8004418:	2300      	movs	r3, #0
 800441a:	b510      	push	{r4, lr}
 800441c:	4604      	mov	r4, r0
 800441e:	6003      	str	r3, [r0, #0]
 8004420:	6043      	str	r3, [r0, #4]
 8004422:	6083      	str	r3, [r0, #8]
 8004424:	8181      	strh	r1, [r0, #12]
 8004426:	6643      	str	r3, [r0, #100]	; 0x64
 8004428:	81c2      	strh	r2, [r0, #14]
 800442a:	6103      	str	r3, [r0, #16]
 800442c:	6143      	str	r3, [r0, #20]
 800442e:	6183      	str	r3, [r0, #24]
 8004430:	4619      	mov	r1, r3
 8004432:	2208      	movs	r2, #8
 8004434:	305c      	adds	r0, #92	; 0x5c
 8004436:	f000 f91f 	bl	8004678 <memset>
 800443a:	4b05      	ldr	r3, [pc, #20]	; (8004450 <std.isra.0+0x38>)
 800443c:	6263      	str	r3, [r4, #36]	; 0x24
 800443e:	4b05      	ldr	r3, [pc, #20]	; (8004454 <std.isra.0+0x3c>)
 8004440:	62a3      	str	r3, [r4, #40]	; 0x28
 8004442:	4b05      	ldr	r3, [pc, #20]	; (8004458 <std.isra.0+0x40>)
 8004444:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004446:	4b05      	ldr	r3, [pc, #20]	; (800445c <std.isra.0+0x44>)
 8004448:	6224      	str	r4, [r4, #32]
 800444a:	6323      	str	r3, [r4, #48]	; 0x30
 800444c:	bd10      	pop	{r4, pc}
 800444e:	bf00      	nop
 8004450:	08004801 	.word	0x08004801
 8004454:	08004823 	.word	0x08004823
 8004458:	0800485b 	.word	0x0800485b
 800445c:	0800487f 	.word	0x0800487f

08004460 <__sfmoreglue>:
 8004460:	b570      	push	{r4, r5, r6, lr}
 8004462:	1e4a      	subs	r2, r1, #1
 8004464:	2568      	movs	r5, #104	; 0x68
 8004466:	4355      	muls	r5, r2
 8004468:	460e      	mov	r6, r1
 800446a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800446e:	f000 f959 	bl	8004724 <_malloc_r>
 8004472:	4604      	mov	r4, r0
 8004474:	b140      	cbz	r0, 8004488 <__sfmoreglue+0x28>
 8004476:	2100      	movs	r1, #0
 8004478:	e880 0042 	stmia.w	r0, {r1, r6}
 800447c:	300c      	adds	r0, #12
 800447e:	60a0      	str	r0, [r4, #8]
 8004480:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004484:	f000 f8f8 	bl	8004678 <memset>
 8004488:	4620      	mov	r0, r4
 800448a:	bd70      	pop	{r4, r5, r6, pc}

0800448c <__sinit>:
 800448c:	6983      	ldr	r3, [r0, #24]
 800448e:	b510      	push	{r4, lr}
 8004490:	4604      	mov	r4, r0
 8004492:	bb33      	cbnz	r3, 80044e2 <__sinit+0x56>
 8004494:	6483      	str	r3, [r0, #72]	; 0x48
 8004496:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004498:	6503      	str	r3, [r0, #80]	; 0x50
 800449a:	4b12      	ldr	r3, [pc, #72]	; (80044e4 <__sinit+0x58>)
 800449c:	4a12      	ldr	r2, [pc, #72]	; (80044e8 <__sinit+0x5c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6282      	str	r2, [r0, #40]	; 0x28
 80044a2:	4298      	cmp	r0, r3
 80044a4:	bf04      	itt	eq
 80044a6:	2301      	moveq	r3, #1
 80044a8:	6183      	streq	r3, [r0, #24]
 80044aa:	f000 f81f 	bl	80044ec <__sfp>
 80044ae:	6060      	str	r0, [r4, #4]
 80044b0:	4620      	mov	r0, r4
 80044b2:	f000 f81b 	bl	80044ec <__sfp>
 80044b6:	60a0      	str	r0, [r4, #8]
 80044b8:	4620      	mov	r0, r4
 80044ba:	f000 f817 	bl	80044ec <__sfp>
 80044be:	2200      	movs	r2, #0
 80044c0:	60e0      	str	r0, [r4, #12]
 80044c2:	2104      	movs	r1, #4
 80044c4:	6860      	ldr	r0, [r4, #4]
 80044c6:	f7ff ffa7 	bl	8004418 <std.isra.0>
 80044ca:	2201      	movs	r2, #1
 80044cc:	2109      	movs	r1, #9
 80044ce:	68a0      	ldr	r0, [r4, #8]
 80044d0:	f7ff ffa2 	bl	8004418 <std.isra.0>
 80044d4:	2202      	movs	r2, #2
 80044d6:	2112      	movs	r1, #18
 80044d8:	68e0      	ldr	r0, [r4, #12]
 80044da:	f7ff ff9d 	bl	8004418 <std.isra.0>
 80044de:	2301      	movs	r3, #1
 80044e0:	61a3      	str	r3, [r4, #24]
 80044e2:	bd10      	pop	{r4, pc}
 80044e4:	08004aa4 	.word	0x08004aa4
 80044e8:	0800440d 	.word	0x0800440d

080044ec <__sfp>:
 80044ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ee:	4b1c      	ldr	r3, [pc, #112]	; (8004560 <__sfp+0x74>)
 80044f0:	681e      	ldr	r6, [r3, #0]
 80044f2:	69b3      	ldr	r3, [r6, #24]
 80044f4:	4607      	mov	r7, r0
 80044f6:	b913      	cbnz	r3, 80044fe <__sfp+0x12>
 80044f8:	4630      	mov	r0, r6
 80044fa:	f7ff ffc7 	bl	800448c <__sinit>
 80044fe:	3648      	adds	r6, #72	; 0x48
 8004500:	68b4      	ldr	r4, [r6, #8]
 8004502:	6873      	ldr	r3, [r6, #4]
 8004504:	3b01      	subs	r3, #1
 8004506:	d503      	bpl.n	8004510 <__sfp+0x24>
 8004508:	6833      	ldr	r3, [r6, #0]
 800450a:	b133      	cbz	r3, 800451a <__sfp+0x2e>
 800450c:	6836      	ldr	r6, [r6, #0]
 800450e:	e7f7      	b.n	8004500 <__sfp+0x14>
 8004510:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004514:	b16d      	cbz	r5, 8004532 <__sfp+0x46>
 8004516:	3468      	adds	r4, #104	; 0x68
 8004518:	e7f4      	b.n	8004504 <__sfp+0x18>
 800451a:	2104      	movs	r1, #4
 800451c:	4638      	mov	r0, r7
 800451e:	f7ff ff9f 	bl	8004460 <__sfmoreglue>
 8004522:	6030      	str	r0, [r6, #0]
 8004524:	2800      	cmp	r0, #0
 8004526:	d1f1      	bne.n	800450c <__sfp+0x20>
 8004528:	230c      	movs	r3, #12
 800452a:	603b      	str	r3, [r7, #0]
 800452c:	4604      	mov	r4, r0
 800452e:	4620      	mov	r0, r4
 8004530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004532:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004536:	81e3      	strh	r3, [r4, #14]
 8004538:	2301      	movs	r3, #1
 800453a:	81a3      	strh	r3, [r4, #12]
 800453c:	6665      	str	r5, [r4, #100]	; 0x64
 800453e:	6025      	str	r5, [r4, #0]
 8004540:	60a5      	str	r5, [r4, #8]
 8004542:	6065      	str	r5, [r4, #4]
 8004544:	6125      	str	r5, [r4, #16]
 8004546:	6165      	str	r5, [r4, #20]
 8004548:	61a5      	str	r5, [r4, #24]
 800454a:	2208      	movs	r2, #8
 800454c:	4629      	mov	r1, r5
 800454e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004552:	f000 f891 	bl	8004678 <memset>
 8004556:	6365      	str	r5, [r4, #52]	; 0x34
 8004558:	63a5      	str	r5, [r4, #56]	; 0x38
 800455a:	64a5      	str	r5, [r4, #72]	; 0x48
 800455c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800455e:	e7e6      	b.n	800452e <__sfp+0x42>
 8004560:	08004aa4 	.word	0x08004aa4

08004564 <_fwalk_reent>:
 8004564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004568:	4680      	mov	r8, r0
 800456a:	4689      	mov	r9, r1
 800456c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004570:	2600      	movs	r6, #0
 8004572:	b914      	cbnz	r4, 800457a <_fwalk_reent+0x16>
 8004574:	4630      	mov	r0, r6
 8004576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800457a:	68a5      	ldr	r5, [r4, #8]
 800457c:	6867      	ldr	r7, [r4, #4]
 800457e:	3f01      	subs	r7, #1
 8004580:	d501      	bpl.n	8004586 <_fwalk_reent+0x22>
 8004582:	6824      	ldr	r4, [r4, #0]
 8004584:	e7f5      	b.n	8004572 <_fwalk_reent+0xe>
 8004586:	89ab      	ldrh	r3, [r5, #12]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d907      	bls.n	800459c <_fwalk_reent+0x38>
 800458c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004590:	3301      	adds	r3, #1
 8004592:	d003      	beq.n	800459c <_fwalk_reent+0x38>
 8004594:	4629      	mov	r1, r5
 8004596:	4640      	mov	r0, r8
 8004598:	47c8      	blx	r9
 800459a:	4306      	orrs	r6, r0
 800459c:	3568      	adds	r5, #104	; 0x68
 800459e:	e7ee      	b.n	800457e <_fwalk_reent+0x1a>

080045a0 <__swhatbuf_r>:
 80045a0:	b570      	push	{r4, r5, r6, lr}
 80045a2:	460e      	mov	r6, r1
 80045a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045a8:	2900      	cmp	r1, #0
 80045aa:	b090      	sub	sp, #64	; 0x40
 80045ac:	4614      	mov	r4, r2
 80045ae:	461d      	mov	r5, r3
 80045b0:	da07      	bge.n	80045c2 <__swhatbuf_r+0x22>
 80045b2:	2300      	movs	r3, #0
 80045b4:	602b      	str	r3, [r5, #0]
 80045b6:	89b3      	ldrh	r3, [r6, #12]
 80045b8:	061a      	lsls	r2, r3, #24
 80045ba:	d410      	bmi.n	80045de <__swhatbuf_r+0x3e>
 80045bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045c0:	e00e      	b.n	80045e0 <__swhatbuf_r+0x40>
 80045c2:	aa01      	add	r2, sp, #4
 80045c4:	f000 f982 	bl	80048cc <_fstat_r>
 80045c8:	2800      	cmp	r0, #0
 80045ca:	dbf2      	blt.n	80045b2 <__swhatbuf_r+0x12>
 80045cc:	9a02      	ldr	r2, [sp, #8]
 80045ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80045d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80045d6:	425a      	negs	r2, r3
 80045d8:	415a      	adcs	r2, r3
 80045da:	602a      	str	r2, [r5, #0]
 80045dc:	e7ee      	b.n	80045bc <__swhatbuf_r+0x1c>
 80045de:	2340      	movs	r3, #64	; 0x40
 80045e0:	2000      	movs	r0, #0
 80045e2:	6023      	str	r3, [r4, #0]
 80045e4:	b010      	add	sp, #64	; 0x40
 80045e6:	bd70      	pop	{r4, r5, r6, pc}

080045e8 <__smakebuf_r>:
 80045e8:	898b      	ldrh	r3, [r1, #12]
 80045ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045ec:	079d      	lsls	r5, r3, #30
 80045ee:	4606      	mov	r6, r0
 80045f0:	460c      	mov	r4, r1
 80045f2:	d507      	bpl.n	8004604 <__smakebuf_r+0x1c>
 80045f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045f8:	6023      	str	r3, [r4, #0]
 80045fa:	6123      	str	r3, [r4, #16]
 80045fc:	2301      	movs	r3, #1
 80045fe:	6163      	str	r3, [r4, #20]
 8004600:	b002      	add	sp, #8
 8004602:	bd70      	pop	{r4, r5, r6, pc}
 8004604:	ab01      	add	r3, sp, #4
 8004606:	466a      	mov	r2, sp
 8004608:	f7ff ffca 	bl	80045a0 <__swhatbuf_r>
 800460c:	9900      	ldr	r1, [sp, #0]
 800460e:	4605      	mov	r5, r0
 8004610:	4630      	mov	r0, r6
 8004612:	f000 f887 	bl	8004724 <_malloc_r>
 8004616:	b948      	cbnz	r0, 800462c <__smakebuf_r+0x44>
 8004618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800461c:	059a      	lsls	r2, r3, #22
 800461e:	d4ef      	bmi.n	8004600 <__smakebuf_r+0x18>
 8004620:	f023 0303 	bic.w	r3, r3, #3
 8004624:	f043 0302 	orr.w	r3, r3, #2
 8004628:	81a3      	strh	r3, [r4, #12]
 800462a:	e7e3      	b.n	80045f4 <__smakebuf_r+0xc>
 800462c:	4b0d      	ldr	r3, [pc, #52]	; (8004664 <__smakebuf_r+0x7c>)
 800462e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004630:	89a3      	ldrh	r3, [r4, #12]
 8004632:	6020      	str	r0, [r4, #0]
 8004634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004638:	81a3      	strh	r3, [r4, #12]
 800463a:	9b00      	ldr	r3, [sp, #0]
 800463c:	6163      	str	r3, [r4, #20]
 800463e:	9b01      	ldr	r3, [sp, #4]
 8004640:	6120      	str	r0, [r4, #16]
 8004642:	b15b      	cbz	r3, 800465c <__smakebuf_r+0x74>
 8004644:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004648:	4630      	mov	r0, r6
 800464a:	f000 f951 	bl	80048f0 <_isatty_r>
 800464e:	b128      	cbz	r0, 800465c <__smakebuf_r+0x74>
 8004650:	89a3      	ldrh	r3, [r4, #12]
 8004652:	f023 0303 	bic.w	r3, r3, #3
 8004656:	f043 0301 	orr.w	r3, r3, #1
 800465a:	81a3      	strh	r3, [r4, #12]
 800465c:	89a3      	ldrh	r3, [r4, #12]
 800465e:	431d      	orrs	r5, r3
 8004660:	81a5      	strh	r5, [r4, #12]
 8004662:	e7cd      	b.n	8004600 <__smakebuf_r+0x18>
 8004664:	0800440d 	.word	0x0800440d

08004668 <malloc>:
 8004668:	4b02      	ldr	r3, [pc, #8]	; (8004674 <malloc+0xc>)
 800466a:	4601      	mov	r1, r0
 800466c:	6818      	ldr	r0, [r3, #0]
 800466e:	f000 b859 	b.w	8004724 <_malloc_r>
 8004672:	bf00      	nop
 8004674:	20000018 	.word	0x20000018

08004678 <memset>:
 8004678:	4402      	add	r2, r0
 800467a:	4603      	mov	r3, r0
 800467c:	4293      	cmp	r3, r2
 800467e:	d100      	bne.n	8004682 <memset+0xa>
 8004680:	4770      	bx	lr
 8004682:	f803 1b01 	strb.w	r1, [r3], #1
 8004686:	e7f9      	b.n	800467c <memset+0x4>

08004688 <_free_r>:
 8004688:	b538      	push	{r3, r4, r5, lr}
 800468a:	4605      	mov	r5, r0
 800468c:	2900      	cmp	r1, #0
 800468e:	d045      	beq.n	800471c <_free_r+0x94>
 8004690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004694:	1f0c      	subs	r4, r1, #4
 8004696:	2b00      	cmp	r3, #0
 8004698:	bfb8      	it	lt
 800469a:	18e4      	addlt	r4, r4, r3
 800469c:	f000 f94a 	bl	8004934 <__malloc_lock>
 80046a0:	4a1f      	ldr	r2, [pc, #124]	; (8004720 <_free_r+0x98>)
 80046a2:	6813      	ldr	r3, [r2, #0]
 80046a4:	4610      	mov	r0, r2
 80046a6:	b933      	cbnz	r3, 80046b6 <_free_r+0x2e>
 80046a8:	6063      	str	r3, [r4, #4]
 80046aa:	6014      	str	r4, [r2, #0]
 80046ac:	4628      	mov	r0, r5
 80046ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046b2:	f000 b940 	b.w	8004936 <__malloc_unlock>
 80046b6:	42a3      	cmp	r3, r4
 80046b8:	d90c      	bls.n	80046d4 <_free_r+0x4c>
 80046ba:	6821      	ldr	r1, [r4, #0]
 80046bc:	1862      	adds	r2, r4, r1
 80046be:	4293      	cmp	r3, r2
 80046c0:	bf04      	itt	eq
 80046c2:	681a      	ldreq	r2, [r3, #0]
 80046c4:	685b      	ldreq	r3, [r3, #4]
 80046c6:	6063      	str	r3, [r4, #4]
 80046c8:	bf04      	itt	eq
 80046ca:	1852      	addeq	r2, r2, r1
 80046cc:	6022      	streq	r2, [r4, #0]
 80046ce:	6004      	str	r4, [r0, #0]
 80046d0:	e7ec      	b.n	80046ac <_free_r+0x24>
 80046d2:	4613      	mov	r3, r2
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	b10a      	cbz	r2, 80046dc <_free_r+0x54>
 80046d8:	42a2      	cmp	r2, r4
 80046da:	d9fa      	bls.n	80046d2 <_free_r+0x4a>
 80046dc:	6819      	ldr	r1, [r3, #0]
 80046de:	1858      	adds	r0, r3, r1
 80046e0:	42a0      	cmp	r0, r4
 80046e2:	d10b      	bne.n	80046fc <_free_r+0x74>
 80046e4:	6820      	ldr	r0, [r4, #0]
 80046e6:	4401      	add	r1, r0
 80046e8:	1858      	adds	r0, r3, r1
 80046ea:	4282      	cmp	r2, r0
 80046ec:	6019      	str	r1, [r3, #0]
 80046ee:	d1dd      	bne.n	80046ac <_free_r+0x24>
 80046f0:	6810      	ldr	r0, [r2, #0]
 80046f2:	6852      	ldr	r2, [r2, #4]
 80046f4:	605a      	str	r2, [r3, #4]
 80046f6:	4401      	add	r1, r0
 80046f8:	6019      	str	r1, [r3, #0]
 80046fa:	e7d7      	b.n	80046ac <_free_r+0x24>
 80046fc:	d902      	bls.n	8004704 <_free_r+0x7c>
 80046fe:	230c      	movs	r3, #12
 8004700:	602b      	str	r3, [r5, #0]
 8004702:	e7d3      	b.n	80046ac <_free_r+0x24>
 8004704:	6820      	ldr	r0, [r4, #0]
 8004706:	1821      	adds	r1, r4, r0
 8004708:	428a      	cmp	r2, r1
 800470a:	bf04      	itt	eq
 800470c:	6811      	ldreq	r1, [r2, #0]
 800470e:	6852      	ldreq	r2, [r2, #4]
 8004710:	6062      	str	r2, [r4, #4]
 8004712:	bf04      	itt	eq
 8004714:	1809      	addeq	r1, r1, r0
 8004716:	6021      	streq	r1, [r4, #0]
 8004718:	605c      	str	r4, [r3, #4]
 800471a:	e7c7      	b.n	80046ac <_free_r+0x24>
 800471c:	bd38      	pop	{r3, r4, r5, pc}
 800471e:	bf00      	nop
 8004720:	20001df8 	.word	0x20001df8

08004724 <_malloc_r>:
 8004724:	b570      	push	{r4, r5, r6, lr}
 8004726:	1ccd      	adds	r5, r1, #3
 8004728:	f025 0503 	bic.w	r5, r5, #3
 800472c:	3508      	adds	r5, #8
 800472e:	2d0c      	cmp	r5, #12
 8004730:	bf38      	it	cc
 8004732:	250c      	movcc	r5, #12
 8004734:	2d00      	cmp	r5, #0
 8004736:	4606      	mov	r6, r0
 8004738:	db01      	blt.n	800473e <_malloc_r+0x1a>
 800473a:	42a9      	cmp	r1, r5
 800473c:	d903      	bls.n	8004746 <_malloc_r+0x22>
 800473e:	230c      	movs	r3, #12
 8004740:	6033      	str	r3, [r6, #0]
 8004742:	2000      	movs	r0, #0
 8004744:	bd70      	pop	{r4, r5, r6, pc}
 8004746:	f000 f8f5 	bl	8004934 <__malloc_lock>
 800474a:	4a23      	ldr	r2, [pc, #140]	; (80047d8 <_malloc_r+0xb4>)
 800474c:	6814      	ldr	r4, [r2, #0]
 800474e:	4621      	mov	r1, r4
 8004750:	b991      	cbnz	r1, 8004778 <_malloc_r+0x54>
 8004752:	4c22      	ldr	r4, [pc, #136]	; (80047dc <_malloc_r+0xb8>)
 8004754:	6823      	ldr	r3, [r4, #0]
 8004756:	b91b      	cbnz	r3, 8004760 <_malloc_r+0x3c>
 8004758:	4630      	mov	r0, r6
 800475a:	f000 f841 	bl	80047e0 <_sbrk_r>
 800475e:	6020      	str	r0, [r4, #0]
 8004760:	4629      	mov	r1, r5
 8004762:	4630      	mov	r0, r6
 8004764:	f000 f83c 	bl	80047e0 <_sbrk_r>
 8004768:	1c43      	adds	r3, r0, #1
 800476a:	d126      	bne.n	80047ba <_malloc_r+0x96>
 800476c:	230c      	movs	r3, #12
 800476e:	6033      	str	r3, [r6, #0]
 8004770:	4630      	mov	r0, r6
 8004772:	f000 f8e0 	bl	8004936 <__malloc_unlock>
 8004776:	e7e4      	b.n	8004742 <_malloc_r+0x1e>
 8004778:	680b      	ldr	r3, [r1, #0]
 800477a:	1b5b      	subs	r3, r3, r5
 800477c:	d41a      	bmi.n	80047b4 <_malloc_r+0x90>
 800477e:	2b0b      	cmp	r3, #11
 8004780:	d90f      	bls.n	80047a2 <_malloc_r+0x7e>
 8004782:	600b      	str	r3, [r1, #0]
 8004784:	50cd      	str	r5, [r1, r3]
 8004786:	18cc      	adds	r4, r1, r3
 8004788:	4630      	mov	r0, r6
 800478a:	f000 f8d4 	bl	8004936 <__malloc_unlock>
 800478e:	f104 000b 	add.w	r0, r4, #11
 8004792:	1d23      	adds	r3, r4, #4
 8004794:	f020 0007 	bic.w	r0, r0, #7
 8004798:	1ac3      	subs	r3, r0, r3
 800479a:	d01b      	beq.n	80047d4 <_malloc_r+0xb0>
 800479c:	425a      	negs	r2, r3
 800479e:	50e2      	str	r2, [r4, r3]
 80047a0:	bd70      	pop	{r4, r5, r6, pc}
 80047a2:	428c      	cmp	r4, r1
 80047a4:	bf0d      	iteet	eq
 80047a6:	6863      	ldreq	r3, [r4, #4]
 80047a8:	684b      	ldrne	r3, [r1, #4]
 80047aa:	6063      	strne	r3, [r4, #4]
 80047ac:	6013      	streq	r3, [r2, #0]
 80047ae:	bf18      	it	ne
 80047b0:	460c      	movne	r4, r1
 80047b2:	e7e9      	b.n	8004788 <_malloc_r+0x64>
 80047b4:	460c      	mov	r4, r1
 80047b6:	6849      	ldr	r1, [r1, #4]
 80047b8:	e7ca      	b.n	8004750 <_malloc_r+0x2c>
 80047ba:	1cc4      	adds	r4, r0, #3
 80047bc:	f024 0403 	bic.w	r4, r4, #3
 80047c0:	42a0      	cmp	r0, r4
 80047c2:	d005      	beq.n	80047d0 <_malloc_r+0xac>
 80047c4:	1a21      	subs	r1, r4, r0
 80047c6:	4630      	mov	r0, r6
 80047c8:	f000 f80a 	bl	80047e0 <_sbrk_r>
 80047cc:	3001      	adds	r0, #1
 80047ce:	d0cd      	beq.n	800476c <_malloc_r+0x48>
 80047d0:	6025      	str	r5, [r4, #0]
 80047d2:	e7d9      	b.n	8004788 <_malloc_r+0x64>
 80047d4:	bd70      	pop	{r4, r5, r6, pc}
 80047d6:	bf00      	nop
 80047d8:	20001df8 	.word	0x20001df8
 80047dc:	20001dfc 	.word	0x20001dfc

080047e0 <_sbrk_r>:
 80047e0:	b538      	push	{r3, r4, r5, lr}
 80047e2:	4c06      	ldr	r4, [pc, #24]	; (80047fc <_sbrk_r+0x1c>)
 80047e4:	2300      	movs	r3, #0
 80047e6:	4605      	mov	r5, r0
 80047e8:	4608      	mov	r0, r1
 80047ea:	6023      	str	r3, [r4, #0]
 80047ec:	f7ff f8e0 	bl	80039b0 <_sbrk>
 80047f0:	1c43      	adds	r3, r0, #1
 80047f2:	d102      	bne.n	80047fa <_sbrk_r+0x1a>
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	b103      	cbz	r3, 80047fa <_sbrk_r+0x1a>
 80047f8:	602b      	str	r3, [r5, #0]
 80047fa:	bd38      	pop	{r3, r4, r5, pc}
 80047fc:	20001ebc 	.word	0x20001ebc

08004800 <__sread>:
 8004800:	b510      	push	{r4, lr}
 8004802:	460c      	mov	r4, r1
 8004804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004808:	f000 f896 	bl	8004938 <_read_r>
 800480c:	2800      	cmp	r0, #0
 800480e:	bfab      	itete	ge
 8004810:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004812:	89a3      	ldrhlt	r3, [r4, #12]
 8004814:	181b      	addge	r3, r3, r0
 8004816:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800481a:	bfac      	ite	ge
 800481c:	6563      	strge	r3, [r4, #84]	; 0x54
 800481e:	81a3      	strhlt	r3, [r4, #12]
 8004820:	bd10      	pop	{r4, pc}

08004822 <__swrite>:
 8004822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004826:	461f      	mov	r7, r3
 8004828:	898b      	ldrh	r3, [r1, #12]
 800482a:	05db      	lsls	r3, r3, #23
 800482c:	4605      	mov	r5, r0
 800482e:	460c      	mov	r4, r1
 8004830:	4616      	mov	r6, r2
 8004832:	d505      	bpl.n	8004840 <__swrite+0x1e>
 8004834:	2302      	movs	r3, #2
 8004836:	2200      	movs	r2, #0
 8004838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800483c:	f000 f868 	bl	8004910 <_lseek_r>
 8004840:	89a3      	ldrh	r3, [r4, #12]
 8004842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004846:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800484a:	81a3      	strh	r3, [r4, #12]
 800484c:	4632      	mov	r2, r6
 800484e:	463b      	mov	r3, r7
 8004850:	4628      	mov	r0, r5
 8004852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004856:	f000 b817 	b.w	8004888 <_write_r>

0800485a <__sseek>:
 800485a:	b510      	push	{r4, lr}
 800485c:	460c      	mov	r4, r1
 800485e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004862:	f000 f855 	bl	8004910 <_lseek_r>
 8004866:	1c43      	adds	r3, r0, #1
 8004868:	89a3      	ldrh	r3, [r4, #12]
 800486a:	bf15      	itete	ne
 800486c:	6560      	strne	r0, [r4, #84]	; 0x54
 800486e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004872:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004876:	81a3      	strheq	r3, [r4, #12]
 8004878:	bf18      	it	ne
 800487a:	81a3      	strhne	r3, [r4, #12]
 800487c:	bd10      	pop	{r4, pc}

0800487e <__sclose>:
 800487e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004882:	f000 b813 	b.w	80048ac <_close_r>
	...

08004888 <_write_r>:
 8004888:	b538      	push	{r3, r4, r5, lr}
 800488a:	4c07      	ldr	r4, [pc, #28]	; (80048a8 <_write_r+0x20>)
 800488c:	4605      	mov	r5, r0
 800488e:	4608      	mov	r0, r1
 8004890:	4611      	mov	r1, r2
 8004892:	2200      	movs	r2, #0
 8004894:	6022      	str	r2, [r4, #0]
 8004896:	461a      	mov	r2, r3
 8004898:	f7ff f86c 	bl	8003974 <_write>
 800489c:	1c43      	adds	r3, r0, #1
 800489e:	d102      	bne.n	80048a6 <_write_r+0x1e>
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	b103      	cbz	r3, 80048a6 <_write_r+0x1e>
 80048a4:	602b      	str	r3, [r5, #0]
 80048a6:	bd38      	pop	{r3, r4, r5, pc}
 80048a8:	20001ebc 	.word	0x20001ebc

080048ac <_close_r>:
 80048ac:	b538      	push	{r3, r4, r5, lr}
 80048ae:	4c06      	ldr	r4, [pc, #24]	; (80048c8 <_close_r+0x1c>)
 80048b0:	2300      	movs	r3, #0
 80048b2:	4605      	mov	r5, r0
 80048b4:	4608      	mov	r0, r1
 80048b6:	6023      	str	r3, [r4, #0]
 80048b8:	f7ff f89a 	bl	80039f0 <_close>
 80048bc:	1c43      	adds	r3, r0, #1
 80048be:	d102      	bne.n	80048c6 <_close_r+0x1a>
 80048c0:	6823      	ldr	r3, [r4, #0]
 80048c2:	b103      	cbz	r3, 80048c6 <_close_r+0x1a>
 80048c4:	602b      	str	r3, [r5, #0]
 80048c6:	bd38      	pop	{r3, r4, r5, pc}
 80048c8:	20001ebc 	.word	0x20001ebc

080048cc <_fstat_r>:
 80048cc:	b538      	push	{r3, r4, r5, lr}
 80048ce:	4c07      	ldr	r4, [pc, #28]	; (80048ec <_fstat_r+0x20>)
 80048d0:	2300      	movs	r3, #0
 80048d2:	4605      	mov	r5, r0
 80048d4:	4608      	mov	r0, r1
 80048d6:	4611      	mov	r1, r2
 80048d8:	6023      	str	r3, [r4, #0]
 80048da:	f7ff f89b 	bl	8003a14 <_fstat>
 80048de:	1c43      	adds	r3, r0, #1
 80048e0:	d102      	bne.n	80048e8 <_fstat_r+0x1c>
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	b103      	cbz	r3, 80048e8 <_fstat_r+0x1c>
 80048e6:	602b      	str	r3, [r5, #0]
 80048e8:	bd38      	pop	{r3, r4, r5, pc}
 80048ea:	bf00      	nop
 80048ec:	20001ebc 	.word	0x20001ebc

080048f0 <_isatty_r>:
 80048f0:	b538      	push	{r3, r4, r5, lr}
 80048f2:	4c06      	ldr	r4, [pc, #24]	; (800490c <_isatty_r+0x1c>)
 80048f4:	2300      	movs	r3, #0
 80048f6:	4605      	mov	r5, r0
 80048f8:	4608      	mov	r0, r1
 80048fa:	6023      	str	r3, [r4, #0]
 80048fc:	f7ff f89c 	bl	8003a38 <_isatty>
 8004900:	1c43      	adds	r3, r0, #1
 8004902:	d102      	bne.n	800490a <_isatty_r+0x1a>
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	b103      	cbz	r3, 800490a <_isatty_r+0x1a>
 8004908:	602b      	str	r3, [r5, #0]
 800490a:	bd38      	pop	{r3, r4, r5, pc}
 800490c:	20001ebc 	.word	0x20001ebc

08004910 <_lseek_r>:
 8004910:	b538      	push	{r3, r4, r5, lr}
 8004912:	4c07      	ldr	r4, [pc, #28]	; (8004930 <_lseek_r+0x20>)
 8004914:	4605      	mov	r5, r0
 8004916:	4608      	mov	r0, r1
 8004918:	4611      	mov	r1, r2
 800491a:	2200      	movs	r2, #0
 800491c:	6022      	str	r2, [r4, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	f7ff f89a 	bl	8003a58 <_lseek>
 8004924:	1c43      	adds	r3, r0, #1
 8004926:	d102      	bne.n	800492e <_lseek_r+0x1e>
 8004928:	6823      	ldr	r3, [r4, #0]
 800492a:	b103      	cbz	r3, 800492e <_lseek_r+0x1e>
 800492c:	602b      	str	r3, [r5, #0]
 800492e:	bd38      	pop	{r3, r4, r5, pc}
 8004930:	20001ebc 	.word	0x20001ebc

08004934 <__malloc_lock>:
 8004934:	4770      	bx	lr

08004936 <__malloc_unlock>:
 8004936:	4770      	bx	lr

08004938 <_read_r>:
 8004938:	b538      	push	{r3, r4, r5, lr}
 800493a:	4c07      	ldr	r4, [pc, #28]	; (8004958 <_read_r+0x20>)
 800493c:	4605      	mov	r5, r0
 800493e:	4608      	mov	r0, r1
 8004940:	4611      	mov	r1, r2
 8004942:	2200      	movs	r2, #0
 8004944:	6022      	str	r2, [r4, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	f7ff f89a 	bl	8003a80 <_read>
 800494c:	1c43      	adds	r3, r0, #1
 800494e:	d102      	bne.n	8004956 <_read_r+0x1e>
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	b103      	cbz	r3, 8004956 <_read_r+0x1e>
 8004954:	602b      	str	r3, [r5, #0]
 8004956:	bd38      	pop	{r3, r4, r5, pc}
 8004958:	20001ebc 	.word	0x20001ebc
 800495c:	454c4449 	.word	0x454c4449
 8004960:	00000000 	.word	0x00000000
 8004964:	20726d54 	.word	0x20726d54
 8004968:	00637653 	.word	0x00637653
 800496c:	51726d54 	.word	0x51726d54
 8004970:	00000000 	.word	0x00000000
 8004974:	51746f50 	.word	0x51746f50
 8004978:	65756575 	.word	0x65756575
 800497c:	00000000 	.word	0x00000000
 8004980:	776f6c46 	.word	0x776f6c46
 8004984:	75657551 	.word	0x75657551
 8004988:	00000065 	.word	0x00000065
 800498c:	72616f42 	.word	0x72616f42
 8004990:	61745364 	.word	0x61745364
 8004994:	75516574 	.word	0x75516574
 8004998:	00657565 	.word	0x00657565
 800499c:	656e6547 	.word	0x656e6547
 80049a0:	6f746172 	.word	0x6f746172
 80049a4:	61545f72 	.word	0x61545f72
 80049a8:	00006b73 	.word	0x00006b73
 80049ac:	776f6c46 	.word	0x776f6c46
 80049b0:	6a64415f 	.word	0x6a64415f
 80049b4:	6d747375 	.word	0x6d747375
 80049b8:	5f746e65 	.word	0x5f746e65
 80049bc:	6b736154 	.word	0x6b736154
 80049c0:	00000000 	.word	0x00000000
 80049c4:	6867694c 	.word	0x6867694c
 80049c8:	74535f74 	.word	0x74535f74
 80049cc:	5f657461 	.word	0x5f657461
 80049d0:	6b736154 	.word	0x6b736154
 80049d4:	00000000 	.word	0x00000000
 80049d8:	72616f42 	.word	0x72616f42
 80049dc:	74535f64 	.word	0x74535f64
 80049e0:	5f657461 	.word	0x5f657461
 80049e4:	6b736154 	.word	0x6b736154
 80049e8:	00000000 	.word	0x00000000
 80049ec:	6867694c 	.word	0x6867694c
 80049f0:	203a7374 	.word	0x203a7374
 80049f4:	46206325 	.word	0x46206325
 80049f8:	3a776f6c 	.word	0x3a776f6c
 80049fc:	20692520 	.word	0x20692520
 8004a00:	66617254 	.word	0x66617254
 8004a04:	3a636966 	.word	0x3a636966
 8004a08:	0a752520 	.word	0x0a752520
 8004a0c:	00000000 	.word	0x00000000
 8004a10:	6867696c 	.word	0x6867696c
 8004a14:	72652074 	.word	0x72652074
 8004a18:	00726f72 	.word	0x00726f72
 8004a1c:	66617254 	.word	0x66617254
 8004a20:	4c636966 	.word	0x4c636966
 8004a24:	74686769 	.word	0x74686769
 8004a28:	656d6954 	.word	0x656d6954
 8004a2c:	00000072 	.word	0x00000072
 8004a30:	6867696c 	.word	0x6867696c
 8004a34:	61742074 	.word	0x61742074
 8004a38:	65206b73 	.word	0x65206b73
 8004a3c:	726f7272 	.word	0x726f7272
 8004a40:	00000000 	.word	0x00000000

08004a44 <__sf_fake_stderr>:
	...

08004a64 <__sf_fake_stdin>:
	...

08004a84 <__sf_fake_stdout>:
	...

08004aa4 <_global_impure_ptr>:
 8004aa4:	2000001c                                ... 

08004aa8 <_init>:
 8004aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aaa:	bf00      	nop
 8004aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aae:	bc08      	pop	{r3}
 8004ab0:	469e      	mov	lr, r3
 8004ab2:	4770      	bx	lr

08004ab4 <_fini>:
 8004ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab6:	bf00      	nop
 8004ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aba:	bc08      	pop	{r3}
 8004abc:	469e      	mov	lr, r3
 8004abe:	4770      	bx	lr
