
ece455.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08004b30  08004b30  00014b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08004b34  08004b34  00014b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  20000000  08004b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
  6 .bss          00001e4c  2000007c  2000007c  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20001ec8  20001ec8  0002007c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001106c  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000027e9  00000000  00000000  00031116  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000010a0  00000000  00000000  00033900  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f48  00000000  00000000  000349a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006919  00000000  00000000  000358e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000053b7  00000000  00000000  0003c201  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000415b8  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00004c8c  00000000  00000000  00041634  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b18 	.word	0x08004b18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08004b18 	.word	0x08004b18

080001d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f103 0208 	add.w	r2, r3, #8
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f04f 32ff 	mov.w	r2, #4294967295
 80001e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f103 0208 	add.w	r2, r3, #8
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f103 0208 	add.w	r2, r3, #8
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2200      	movs	r2, #0
 800021c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr

0800022a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800022a:	b480      	push	{r7}
 800022c:	b085      	sub	sp, #20
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
 8000232:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	68fa      	ldr	r2, [r7, #12]
 800023e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	689a      	ldr	r2, [r3, #8]
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	683a      	ldr	r2, [r7, #0]
 800024e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	1c5a      	adds	r2, r3, #1
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	3714      	adds	r7, #20
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000288:	d103      	bne.n	8000292 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	691b      	ldr	r3, [r3, #16]
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	e00c      	b.n	80002ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3308      	adds	r3, #8
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	e002      	b.n	80002a0 <vListInsert+0x2e>
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d9f6      	bls.n	800029a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	685a      	ldr	r2, [r3, #4]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	683a      	ldr	r2, [r7, #0]
 80002ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	601a      	str	r2, [r3, #0]
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	6892      	ldr	r2, [r2, #8]
 80002fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	6852      	ldr	r2, [r2, #4]
 8000304:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	685a      	ldr	r2, [r3, #4]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	429a      	cmp	r2, r3
 800030e:	d103      	bne.n	8000318 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	689a      	ldr	r2, [r3, #8]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	1e5a      	subs	r2, r3, #1
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	681b      	ldr	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	3b04      	subs	r3, #4
 8000348:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	3b04      	subs	r3, #4
 8000356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	f023 0201 	bic.w	r2, r3, #1
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	3b04      	subs	r3, #4
 8000366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <pxPortInitialiseStack+0x64>)
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	3b14      	subs	r3, #20
 8000372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	3b04      	subs	r3, #4
 800037e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f06f 0202 	mvn.w	r2, #2
 8000386:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	3b20      	subs	r3, #32
 800038c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800038e:	68fb      	ldr	r3, [r7, #12]
}
 8000390:	4618      	mov	r0, r3
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	080003a1 	.word	0x080003a1

080003a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <prvTaskExitError+0x38>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003ae:	d009      	beq.n	80003c4 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80003b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003b4:	f383 8811 	msr	BASEPRI, r3
 80003b8:	f3bf 8f6f 	isb	sy
 80003bc:	f3bf 8f4f 	dsb	sy
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	e7fe      	b.n	80003c2 <prvTaskExitError+0x22>
 80003c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003c8:	f383 8811 	msr	BASEPRI, r3
 80003cc:	f3bf 8f6f 	isb	sy
 80003d0:	f3bf 8f4f 	dsb	sy
 80003d4:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 80003d6:	e7fe      	b.n	80003d6 <prvTaskExitError+0x36>
 80003d8:	20000000 	.word	0x20000000
 80003dc:	00000000 	.word	0x00000000

080003e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <pxCurrentTCBConst2>)
 80003e2:	6819      	ldr	r1, [r3, #0]
 80003e4:	6808      	ldr	r0, [r1, #0]
 80003e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003ea:	f380 8809 	msr	PSP, r0
 80003ee:	f3bf 8f6f 	isb	sy
 80003f2:	f04f 0000 	mov.w	r0, #0
 80003f6:	f380 8811 	msr	BASEPRI, r0
 80003fa:	4770      	bx	lr
 80003fc:	f3af 8000 	nop.w

08000400 <pxCurrentTCBConst2>:
 8000400:	20001ca8 	.word	0x20001ca8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000404:	bf00      	nop
 8000406:	bf00      	nop

08000408 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000408:	4806      	ldr	r0, [pc, #24]	; (8000424 <prvPortStartFirstTask+0x1c>)
 800040a:	6800      	ldr	r0, [r0, #0]
 800040c:	6800      	ldr	r0, [r0, #0]
 800040e:	f380 8808 	msr	MSP, r0
 8000412:	b662      	cpsie	i
 8000414:	b661      	cpsie	f
 8000416:	f3bf 8f4f 	dsb	sy
 800041a:	f3bf 8f6f 	isb	sy
 800041e:	df00      	svc	0
 8000420:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000422:	bf00      	nop
 8000424:	e000ed08 	.word	0xe000ed08

08000428 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800042e:	4b3b      	ldr	r3, [pc, #236]	; (800051c <xPortStartScheduler+0xf4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a3b      	ldr	r2, [pc, #236]	; (8000520 <xPortStartScheduler+0xf8>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d109      	bne.n	800044c <xPortStartScheduler+0x24>
 8000438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800043c:	f383 8811 	msr	BASEPRI, r3
 8000440:	f3bf 8f6f 	isb	sy
 8000444:	f3bf 8f4f 	dsb	sy
 8000448:	613b      	str	r3, [r7, #16]
 800044a:	e7fe      	b.n	800044a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800044c:	4b33      	ldr	r3, [pc, #204]	; (800051c <xPortStartScheduler+0xf4>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a34      	ldr	r2, [pc, #208]	; (8000524 <xPortStartScheduler+0xfc>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d109      	bne.n	800046a <xPortStartScheduler+0x42>
 8000456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800045a:	f383 8811 	msr	BASEPRI, r3
 800045e:	f3bf 8f6f 	isb	sy
 8000462:	f3bf 8f4f 	dsb	sy
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	e7fe      	b.n	8000468 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800046a:	4b2f      	ldr	r3, [pc, #188]	; (8000528 <xPortStartScheduler+0x100>)
 800046c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	b2db      	uxtb	r3, r3
 8000474:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	22ff      	movs	r2, #255	; 0xff
 800047a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b27      	ldr	r3, [pc, #156]	; (800052c <xPortStartScheduler+0x104>)
 8000490:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000492:	4b27      	ldr	r3, [pc, #156]	; (8000530 <xPortStartScheduler+0x108>)
 8000494:	2207      	movs	r2, #7
 8000496:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000498:	e009      	b.n	80004ae <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800049a:	4b25      	ldr	r3, [pc, #148]	; (8000530 <xPortStartScheduler+0x108>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	3b01      	subs	r3, #1
 80004a0:	4a23      	ldr	r2, [pc, #140]	; (8000530 <xPortStartScheduler+0x108>)
 80004a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004b6:	2b80      	cmp	r3, #128	; 0x80
 80004b8:	d0ef      	beq.n	800049a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80004ba:	4b1d      	ldr	r3, [pc, #116]	; (8000530 <xPortStartScheduler+0x108>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	021b      	lsls	r3, r3, #8
 80004c0:	4a1b      	ldr	r2, [pc, #108]	; (8000530 <xPortStartScheduler+0x108>)
 80004c2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80004c4:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <xPortStartScheduler+0x108>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80004cc:	4a18      	ldr	r2, [pc, #96]	; (8000530 <xPortStartScheduler+0x108>)
 80004ce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80004d8:	4a16      	ldr	r2, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80004e4:	4a13      	ldr	r2, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80004ee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80004f0:	f000 f8d2 	bl	8000698 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80004f4:	4b10      	ldr	r3, [pc, #64]	; (8000538 <xPortStartScheduler+0x110>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80004fa:	f000 f8e9 	bl	80006d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80004fe:	4a0f      	ldr	r2, [pc, #60]	; (800053c <xPortStartScheduler+0x114>)
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <xPortStartScheduler+0x114>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000508:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800050a:	f7ff ff7d 	bl	8000408 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800050e:	f7ff ff47 	bl	80003a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000512:	2300      	movs	r3, #0
}
 8000514:	4618      	mov	r0, r3
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	e000ed00 	.word	0xe000ed00
 8000520:	410fc271 	.word	0x410fc271
 8000524:	410fc270 	.word	0x410fc270
 8000528:	e000e400 	.word	0xe000e400
 800052c:	20000098 	.word	0x20000098
 8000530:	2000009c 	.word	0x2000009c
 8000534:	e000ed20 	.word	0xe000ed20
 8000538:	20000000 	.word	0x20000000
 800053c:	e000ef34 	.word	0xe000ef34

08000540 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800054a:	f383 8811 	msr	BASEPRI, r3
 800054e:	f3bf 8f6f 	isb	sy
 8000552:	f3bf 8f4f 	dsb	sy
 8000556:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000558:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <vPortEnterCritical+0x54>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <vPortEnterCritical+0x54>)
 8000560:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <vPortEnterCritical+0x54>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d10e      	bne.n	8000588 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <vPortEnterCritical+0x58>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d009      	beq.n	8000588 <vPortEnterCritical+0x48>
 8000574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000578:	f383 8811 	msr	BASEPRI, r3
 800057c:	f3bf 8f6f 	isb	sy
 8000580:	f3bf 8f4f 	dsb	sy
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	e7fe      	b.n	8000586 <vPortEnterCritical+0x46>
	}
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	20000000 	.word	0x20000000
 8000598:	e000ed04 	.word	0xe000ed04

0800059c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <vPortExitCritical+0x4c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d109      	bne.n	80005be <vPortExitCritical+0x22>
 80005aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ae:	f383 8811 	msr	BASEPRI, r3
 80005b2:	f3bf 8f6f 	isb	sy
 80005b6:	f3bf 8f4f 	dsb	sy
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	e7fe      	b.n	80005bc <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <vPortExitCritical+0x4c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d104      	bne.n	80005da <vPortExitCritical+0x3e>
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000000 	.word	0x20000000
 80005ec:	00000000 	.word	0x00000000

080005f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80005f0:	f3ef 8009 	mrs	r0, PSP
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <pxCurrentTCBConst>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	f01e 0f10 	tst.w	lr, #16
 8000600:	bf08      	it	eq
 8000602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800060a:	6010      	str	r0, [r2, #0]
 800060c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8000610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000614:	f380 8811 	msr	BASEPRI, r0
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f001 f8e8 	bl	80017f4 <vTaskSwitchContext>
 8000624:	f04f 0000 	mov.w	r0, #0
 8000628:	f380 8811 	msr	BASEPRI, r0
 800062c:	bc08      	pop	{r3}
 800062e:	6819      	ldr	r1, [r3, #0]
 8000630:	6808      	ldr	r0, [r1, #0]
 8000632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000636:	f01e 0f10 	tst.w	lr, #16
 800063a:	bf08      	it	eq
 800063c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000640:	f380 8809 	msr	PSP, r0
 8000644:	f3bf 8f6f 	isb	sy
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	f3af 8000 	nop.w

08000650 <pxCurrentTCBConst>:
 8000650:	20001ca8 	.word	0x20001ca8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000654:	bf00      	nop
 8000656:	bf00      	nop

08000658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	__asm volatile
 800065e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000662:	f383 8811 	msr	BASEPRI, r3
 8000666:	f3bf 8f6f 	isb	sy
 800066a:	f3bf 8f4f 	dsb	sy
 800066e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000670:	f001 f804 	bl	800167c <xTaskIncrementTick>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d003      	beq.n	8000682 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <SysTick_Handler+0x3c>)
 800067c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	e000ed04 	.word	0xe000ed04

08000698 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800069c:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <vPortSetupTimerInterrupt+0x28>)
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <vPortSetupTimerInterrupt+0x2c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4909      	ldr	r1, [pc, #36]	; (80006c8 <vPortSetupTimerInterrupt+0x30>)
 80006a4:	fba1 1303 	umull	r1, r3, r1, r3
 80006a8:	099b      	lsrs	r3, r3, #6
 80006aa:	3b01      	subs	r3, #1
 80006ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <vPortSetupTimerInterrupt+0x34>)
 80006b0:	2207      	movs	r2, #7
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000e014 	.word	0xe000e014
 80006c4:	20000014 	.word	0x20000014
 80006c8:	10624dd3 	.word	0x10624dd3
 80006cc:	e000e010 	.word	0xe000e010

080006d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80006d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80006e0 <vPortEnableVFP+0x10>
 80006d4:	6801      	ldr	r1, [r0, #0]
 80006d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006da:	6001      	str	r1, [r0, #0]
 80006dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80006de:	bf00      	nop
 80006e0:	e000ed88 	.word	0xe000ed88

080006e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80006ea:	f3ef 8305 	mrs	r3, IPSR
 80006ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b0f      	cmp	r3, #15
 80006f4:	d913      	bls.n	800071e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80006f6:	4a16      	ldr	r2, [pc, #88]	; (8000750 <vPortValidateInterruptPriority+0x6c>)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <vPortValidateInterruptPriority+0x70>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	7afa      	ldrb	r2, [r7, #11]
 8000706:	429a      	cmp	r2, r3
 8000708:	d209      	bcs.n	800071e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800070a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070e:	f383 8811 	msr	BASEPRI, r3
 8000712:	f3bf 8f6f 	isb	sy
 8000716:	f3bf 8f4f 	dsb	sy
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	e7fe      	b.n	800071c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <vPortValidateInterruptPriority+0x74>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <vPortValidateInterruptPriority+0x78>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	429a      	cmp	r2, r3
 800072c:	d909      	bls.n	8000742 <vPortValidateInterruptPriority+0x5e>
 800072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000732:	f383 8811 	msr	BASEPRI, r3
 8000736:	f3bf 8f6f 	isb	sy
 800073a:	f3bf 8f4f 	dsb	sy
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	e7fe      	b.n	8000740 <vPortValidateInterruptPriority+0x5c>
	}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000e3f0 	.word	0xe000e3f0
 8000754:	20000098 	.word	0x20000098
 8000758:	e000ed0c 	.word	0xe000ed0c
 800075c:	2000009c 	.word	0x2000009c

08000760 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	2b00      	cmp	r3, #0
 8000774:	d004      	beq.n	8000780 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	f023 0307 	bic.w	r3, r3, #7
 800077c:	3308      	adds	r3, #8
 800077e:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8000780:	f000 fec2 	bl	8001508 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8000784:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <pvPortMalloc+0x80>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d105      	bne.n	8000798 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <pvPortMalloc+0x84>)
 800078e:	f023 0307 	bic.w	r3, r3, #7
 8000792:	461a      	mov	r2, r3
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <pvPortMalloc+0x80>)
 8000796:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <pvPortMalloc+0x88>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4413      	add	r3, r2
 80007a0:	f641 32f7 	movw	r2, #7159	; 0x1bf7
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d813      	bhi.n	80007d0 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <pvPortMalloc+0x88>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	441a      	add	r2, r3
 80007b0:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <pvPortMalloc+0x88>)
 80007b2:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d90b      	bls.n	80007d0 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <pvPortMalloc+0x80>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <pvPortMalloc+0x88>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4413      	add	r3, r2
 80007c2:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <pvPortMalloc+0x88>)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4413      	add	r3, r2
 80007cc:	4a06      	ldr	r2, [pc, #24]	; (80007e8 <pvPortMalloc+0x88>)
 80007ce:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80007d0:	f000 fea8 	bl	8001524 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 80007d4:	68fb      	ldr	r3, [r7, #12]
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20001ca4 	.word	0x20001ca4
 80007e4:	200000a8 	.word	0x200000a8
 80007e8:	20001ca0 	.word	0x20001ca0

080007ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d009      	beq.n	800080e <vPortFree+0x22>
 80007fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007fe:	f383 8811 	msr	BASEPRI, r3
 8000802:	f3bf 8f6f 	isb	sy
 8000806:	f3bf 8f4f 	dsb	sy
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	e7fe      	b.n	800080c <vPortFree+0x20>
}
 800080e:	bf00      	nop
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d109      	bne.n	8000844 <xQueueGenericReset+0x28>
 8000830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000834:	f383 8811 	msr	BASEPRI, r3
 8000838:	f3bf 8f6f 	isb	sy
 800083c:	f3bf 8f4f 	dsb	sy
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	e7fe      	b.n	8000842 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000844:	f7ff fe7c 	bl	8000540 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000850:	68f9      	ldr	r1, [r7, #12]
 8000852:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000854:	fb01 f303 	mul.w	r3, r1, r3
 8000858:	441a      	add	r2, r3
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	2200      	movs	r2, #0
 8000862:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000874:	3b01      	subs	r3, #1
 8000876:	68f9      	ldr	r1, [r7, #12]
 8000878:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800087a:	fb01 f303 	mul.w	r3, r1, r3
 800087e:	441a      	add	r2, r3
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	22ff      	movs	r2, #255	; 0xff
 8000888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	22ff      	movs	r2, #255	; 0xff
 8000890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d114      	bne.n	80008c4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	691b      	ldr	r3, [r3, #16]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d01a      	beq.n	80008d8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	3310      	adds	r3, #16
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 f84c 	bl	8001944 <xTaskRemoveFromEventList>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d012      	beq.n	80008d8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <xQueueGenericReset+0xcc>)
 80008b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	f3bf 8f4f 	dsb	sy
 80008be:	f3bf 8f6f 	isb	sy
 80008c2:	e009      	b.n	80008d8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	3310      	adds	r3, #16
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fc81 	bl	80001d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	3324      	adds	r3, #36	; 0x24
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fc7c 	bl	80001d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80008d8:	f7ff fe60 	bl	800059c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80008dc:	2301      	movs	r3, #1
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	e000ed04 	.word	0xe000ed04

080008ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af02      	add	r7, sp, #8
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	4613      	mov	r3, r2
 80008f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d109      	bne.n	8000914 <xQueueGenericCreate+0x28>
 8000900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000904:	f383 8811 	msr	BASEPRI, r3
 8000908:	f3bf 8f6f 	isb	sy
 800090c:	f3bf 8f4f 	dsb	sy
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	e7fe      	b.n	8000912 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d102      	bne.n	8000920 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
 800091e:	e004      	b.n	800092a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	fb02 f303 	mul.w	r3, r2, r3
 8000928:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	3348      	adds	r3, #72	; 0x48
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff ff16 	bl	8000760 <pvPortMalloc>
 8000934:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000936:	69bb      	ldr	r3, [r7, #24]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d00b      	beq.n	8000954 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	3348      	adds	r3, #72	; 0x48
 8000940:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000942:	79fa      	ldrb	r2, [r7, #7]
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	4613      	mov	r3, r2
 800094a:	697a      	ldr	r2, [r7, #20]
 800094c:	68b9      	ldr	r1, [r7, #8]
 800094e:	68f8      	ldr	r0, [r7, #12]
 8000950:	f000 f805 	bl	800095e <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8000954:	69bb      	ldr	r3, [r7, #24]
	}
 8000956:	4618      	mov	r0, r3
 8000958:	3720      	adds	r7, #32
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b084      	sub	sp, #16
 8000962:	af00      	add	r7, sp, #0
 8000964:	60f8      	str	r0, [r7, #12]
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d103      	bne.n	800097a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	e002      	b.n	8000980 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800097a:	69bb      	ldr	r3, [r7, #24]
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	68ba      	ldr	r2, [r7, #8]
 800098a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800098c:	2101      	movs	r1, #1
 800098e:	69b8      	ldr	r0, [r7, #24]
 8000990:	f7ff ff44 	bl	800081c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000994:	bf00      	nop
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08e      	sub	sp, #56	; 0x38
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
 80009a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80009aa:	2300      	movs	r3, #0
 80009ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80009b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d109      	bne.n	80009cc <xQueueGenericSend+0x30>
 80009b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009bc:	f383 8811 	msr	BASEPRI, r3
 80009c0:	f3bf 8f6f 	isb	sy
 80009c4:	f3bf 8f4f 	dsb	sy
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80009ca:	e7fe      	b.n	80009ca <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d103      	bne.n	80009da <xQueueGenericSend+0x3e>
 80009d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d101      	bne.n	80009de <xQueueGenericSend+0x42>
 80009da:	2301      	movs	r3, #1
 80009dc:	e000      	b.n	80009e0 <xQueueGenericSend+0x44>
 80009de:	2300      	movs	r3, #0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d109      	bne.n	80009f8 <xQueueGenericSend+0x5c>
 80009e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009e8:	f383 8811 	msr	BASEPRI, r3
 80009ec:	f3bf 8f6f 	isb	sy
 80009f0:	f3bf 8f4f 	dsb	sy
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
 80009f6:	e7fe      	b.n	80009f6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	d103      	bne.n	8000a06 <xQueueGenericSend+0x6a>
 80009fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d101      	bne.n	8000a0a <xQueueGenericSend+0x6e>
 8000a06:	2301      	movs	r3, #1
 8000a08:	e000      	b.n	8000a0c <xQueueGenericSend+0x70>
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d109      	bne.n	8000a24 <xQueueGenericSend+0x88>
 8000a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a14:	f383 8811 	msr	BASEPRI, r3
 8000a18:	f3bf 8f6f 	isb	sy
 8000a1c:	f3bf 8f4f 	dsb	sy
 8000a20:	623b      	str	r3, [r7, #32]
 8000a22:	e7fe      	b.n	8000a22 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000a24:	f001 f948 	bl	8001cb8 <xTaskGetSchedulerState>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d102      	bne.n	8000a34 <xQueueGenericSend+0x98>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d101      	bne.n	8000a38 <xQueueGenericSend+0x9c>
 8000a34:	2301      	movs	r3, #1
 8000a36:	e000      	b.n	8000a3a <xQueueGenericSend+0x9e>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d109      	bne.n	8000a52 <xQueueGenericSend+0xb6>
 8000a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a42:	f383 8811 	msr	BASEPRI, r3
 8000a46:	f3bf 8f6f 	isb	sy
 8000a4a:	f3bf 8f4f 	dsb	sy
 8000a4e:	61fb      	str	r3, [r7, #28]
 8000a50:	e7fe      	b.n	8000a50 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000a52:	f7ff fd75 	bl	8000540 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d302      	bcc.n	8000a68 <xQueueGenericSend+0xcc>
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d129      	bne.n	8000abc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000a68:	683a      	ldr	r2, [r7, #0]
 8000a6a:	68b9      	ldr	r1, [r7, #8]
 8000a6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a6e:	f000 fa35 	bl	8000edc <prvCopyDataToQueue>
 8000a72:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d010      	beq.n	8000a9e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a7e:	3324      	adds	r3, #36	; 0x24
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 ff5f 	bl	8001944 <xTaskRemoveFromEventList>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d013      	beq.n	8000ab4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000a8c:	4b3f      	ldr	r3, [pc, #252]	; (8000b8c <xQueueGenericSend+0x1f0>)
 8000a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	f3bf 8f4f 	dsb	sy
 8000a98:	f3bf 8f6f 	isb	sy
 8000a9c:	e00a      	b.n	8000ab4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d007      	beq.n	8000ab4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000aa4:	4b39      	ldr	r3, [pc, #228]	; (8000b8c <xQueueGenericSend+0x1f0>)
 8000aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	f3bf 8f4f 	dsb	sy
 8000ab0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000ab4:	f7ff fd72 	bl	800059c <vPortExitCritical>
				return pdPASS;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e063      	b.n	8000b84 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d103      	bne.n	8000aca <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000ac2:	f7ff fd6b 	bl	800059c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e05c      	b.n	8000b84 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d106      	bne.n	8000ade <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 ff97 	bl	8001a08 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000ada:	2301      	movs	r3, #1
 8000adc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000ade:	f7ff fd5d 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000ae2:	f000 fd11 	bl	8001508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000ae6:	f7ff fd2b 	bl	8000540 <vPortEnterCritical>
 8000aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000af0:	b25b      	sxtb	r3, r3
 8000af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af6:	d103      	bne.n	8000b00 <xQueueGenericSend+0x164>
 8000af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000afa:	2200      	movs	r2, #0
 8000afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b06:	b25b      	sxtb	r3, r3
 8000b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b0c:	d103      	bne.n	8000b16 <xQueueGenericSend+0x17a>
 8000b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b10:	2200      	movs	r2, #0
 8000b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000b16:	f7ff fd41 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000b1a:	1d3a      	adds	r2, r7, #4
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4611      	mov	r1, r2
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 ff94 	bl	8001a50 <xTaskCheckForTimeOut>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d124      	bne.n	8000b78 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000b2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b30:	f000 facc 	bl	80010cc <prvIsQueueFull>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d018      	beq.n	8000b6c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b3c:	3310      	adds	r3, #16
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	4611      	mov	r1, r2
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 feb0 	bl	80018a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b4a:	f000 fa57 	bl	8000ffc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000b4e:	f000 fce9 	bl	8001524 <xTaskResumeAll>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	f47f af7c 	bne.w	8000a52 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <xQueueGenericSend+0x1f0>)
 8000b5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	f3bf 8f4f 	dsb	sy
 8000b66:	f3bf 8f6f 	isb	sy
 8000b6a:	e772      	b.n	8000a52 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b6e:	f000 fa45 	bl	8000ffc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000b72:	f000 fcd7 	bl	8001524 <xTaskResumeAll>
 8000b76:	e76c      	b.n	8000a52 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000b78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b7a:	f000 fa3f 	bl	8000ffc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000b7e:	f000 fcd1 	bl	8001524 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000b82:	2300      	movs	r3, #0
		}
	}
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3738      	adds	r7, #56	; 0x38
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	e000ed04 	.word	0xe000ed04

08000b90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08e      	sub	sp, #56	; 0x38
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
 8000b9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d109      	bne.n	8000bbc <xQueueGenericSendFromISR+0x2c>
 8000ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bac:	f383 8811 	msr	BASEPRI, r3
 8000bb0:	f3bf 8f6f 	isb	sy
 8000bb4:	f3bf 8f4f 	dsb	sy
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8000bba:	e7fe      	b.n	8000bba <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d103      	bne.n	8000bca <xQueueGenericSendFromISR+0x3a>
 8000bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d101      	bne.n	8000bce <xQueueGenericSendFromISR+0x3e>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e000      	b.n	8000bd0 <xQueueGenericSendFromISR+0x40>
 8000bce:	2300      	movs	r3, #0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d109      	bne.n	8000be8 <xQueueGenericSendFromISR+0x58>
 8000bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bd8:	f383 8811 	msr	BASEPRI, r3
 8000bdc:	f3bf 8f6f 	isb	sy
 8000be0:	f3bf 8f4f 	dsb	sy
 8000be4:	623b      	str	r3, [r7, #32]
 8000be6:	e7fe      	b.n	8000be6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d103      	bne.n	8000bf6 <xQueueGenericSendFromISR+0x66>
 8000bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d101      	bne.n	8000bfa <xQueueGenericSendFromISR+0x6a>
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e000      	b.n	8000bfc <xQueueGenericSendFromISR+0x6c>
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d109      	bne.n	8000c14 <xQueueGenericSendFromISR+0x84>
 8000c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c04:	f383 8811 	msr	BASEPRI, r3
 8000c08:	f3bf 8f6f 	isb	sy
 8000c0c:	f3bf 8f4f 	dsb	sy
 8000c10:	61fb      	str	r3, [r7, #28]
 8000c12:	e7fe      	b.n	8000c12 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000c14:	f7ff fd66 	bl	80006e4 <vPortValidateInterruptPriority>
	__asm volatile
 8000c18:	f3ef 8211 	mrs	r2, BASEPRI
 8000c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c20:	f383 8811 	msr	BASEPRI, r3
 8000c24:	f3bf 8f6f 	isb	sy
 8000c28:	f3bf 8f4f 	dsb	sy
 8000c2c:	61ba      	str	r2, [r7, #24]
 8000c2e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8000c30:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d302      	bcc.n	8000c46 <xQueueGenericSendFromISR+0xb6>
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d12c      	bne.n	8000ca0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000c50:	683a      	ldr	r2, [r7, #0]
 8000c52:	68b9      	ldr	r1, [r7, #8]
 8000c54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c56:	f000 f941 	bl	8000edc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000c5a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c62:	d112      	bne.n	8000c8a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d016      	beq.n	8000c9a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c6e:	3324      	adds	r3, #36	; 0x24
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 fe67 	bl	8001944 <xTaskRemoveFromEventList>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d00e      	beq.n	8000c9a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d00b      	beq.n	8000c9a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2201      	movs	r2, #1
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	e007      	b.n	8000c9a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000c8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c8e:	3301      	adds	r3, #1
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	b25a      	sxtb	r2, r3
 8000c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8000c9e:	e001      	b.n	8000ca4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8000ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca6:	613b      	str	r3, [r7, #16]
	__asm volatile
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3738      	adds	r7, #56	; 0x38
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08e      	sub	sp, #56	; 0x38
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
 8000cc4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d109      	bne.n	8000ce8 <xQueueGenericReceive+0x30>
	__asm volatile
 8000cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cd8:	f383 8811 	msr	BASEPRI, r3
 8000cdc:	f3bf 8f6f 	isb	sy
 8000ce0:	f3bf 8f4f 	dsb	sy
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ce6:	e7fe      	b.n	8000ce6 <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d103      	bne.n	8000cf6 <xQueueGenericReceive+0x3e>
 8000cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d101      	bne.n	8000cfa <xQueueGenericReceive+0x42>
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e000      	b.n	8000cfc <xQueueGenericReceive+0x44>
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d109      	bne.n	8000d14 <xQueueGenericReceive+0x5c>
 8000d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d04:	f383 8811 	msr	BASEPRI, r3
 8000d08:	f3bf 8f6f 	isb	sy
 8000d0c:	f3bf 8f4f 	dsb	sy
 8000d10:	623b      	str	r3, [r7, #32]
 8000d12:	e7fe      	b.n	8000d12 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d14:	f000 ffd0 	bl	8001cb8 <xTaskGetSchedulerState>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d102      	bne.n	8000d24 <xQueueGenericReceive+0x6c>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d101      	bne.n	8000d28 <xQueueGenericReceive+0x70>
 8000d24:	2301      	movs	r3, #1
 8000d26:	e000      	b.n	8000d2a <xQueueGenericReceive+0x72>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d109      	bne.n	8000d42 <xQueueGenericReceive+0x8a>
 8000d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d32:	f383 8811 	msr	BASEPRI, r3
 8000d36:	f3bf 8f6f 	isb	sy
 8000d3a:	f3bf 8f4f 	dsb	sy
 8000d3e:	61fb      	str	r3, [r7, #28]
 8000d40:	e7fe      	b.n	8000d40 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8000d42:	f7ff fbfd 	bl	8000540 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d046      	beq.n	8000de0 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8000d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000d58:	68b9      	ldr	r1, [r7, #8]
 8000d5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d5c:	f000 f928 	bl	8000fb0 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d121      	bne.n	8000daa <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8000d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d68:	1e5a      	subs	r2, r3, #1
 8000d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d6c:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d104      	bne.n	8000d80 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8000d76:	f001 f8b7 	bl	8001ee8 <pvTaskIncrementMutexHeldCount>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d7e:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d82:	691b      	ldr	r3, [r3, #16]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d027      	beq.n	8000dd8 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d8a:	3310      	adds	r3, #16
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 fdd9 	bl	8001944 <xTaskRemoveFromEventList>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d01f      	beq.n	8000dd8 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8000d98:	4b4f      	ldr	r3, [pc, #316]	; (8000ed8 <xQueueGenericReceive+0x220>)
 8000d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	f3bf 8f4f 	dsb	sy
 8000da4:	f3bf 8f6f 	isb	sy
 8000da8:	e016      	b.n	8000dd8 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8000daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dae:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d00f      	beq.n	8000dd8 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dba:	3324      	adds	r3, #36	; 0x24
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 fdc1 	bl	8001944 <xTaskRemoveFromEventList>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d007      	beq.n	8000dd8 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8000dc8:	4b43      	ldr	r3, [pc, #268]	; (8000ed8 <xQueueGenericReceive+0x220>)
 8000dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	f3bf 8f4f 	dsb	sy
 8000dd4:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8000dd8:	f7ff fbe0 	bl	800059c <vPortExitCritical>
				return pdPASS;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e077      	b.n	8000ed0 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d103      	bne.n	8000dee <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000de6:	f7ff fbd9 	bl	800059c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e070      	b.n	8000ed0 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d106      	bne.n	8000e02 <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 fe05 	bl	8001a08 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000e02:	f7ff fbcb 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000e06:	f000 fb7f 	bl	8001508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000e0a:	f7ff fb99 	bl	8000540 <vPortEnterCritical>
 8000e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e14:	b25b      	sxtb	r3, r3
 8000e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e1a:	d103      	bne.n	8000e24 <xQueueGenericReceive+0x16c>
 8000e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e30:	d103      	bne.n	8000e3a <xQueueGenericReceive+0x182>
 8000e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e3a:	f7ff fbaf 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e3e:	1d3a      	adds	r2, r7, #4
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4611      	mov	r1, r2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 fe02 	bl	8001a50 <xTaskCheckForTimeOut>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d131      	bne.n	8000eb6 <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e54:	f000 f924 	bl	80010a0 <prvIsQueueEmpty>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d025      	beq.n	8000eaa <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d108      	bne.n	8000e78 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8000e66:	f7ff fb6b 	bl	8000540 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8000e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 ff40 	bl	8001cf4 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8000e74:	f7ff fb92 	bl	800059c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e7a:	3324      	adds	r3, #36	; 0x24
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	4611      	mov	r1, r2
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 fd11 	bl	80018a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000e86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e88:	f000 f8b8 	bl	8000ffc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000e8c:	f000 fb4a 	bl	8001524 <xTaskResumeAll>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f47f af55 	bne.w	8000d42 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <xQueueGenericReceive+0x220>)
 8000e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	f3bf 8f4f 	dsb	sy
 8000ea4:	f3bf 8f6f 	isb	sy
 8000ea8:	e74b      	b.n	8000d42 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000eaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000eac:	f000 f8a6 	bl	8000ffc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000eb0:	f000 fb38 	bl	8001524 <xTaskResumeAll>
 8000eb4:	e745      	b.n	8000d42 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8000eb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000eb8:	f000 f8a0 	bl	8000ffc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000ebc:	f000 fb32 	bl	8001524 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000ec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ec2:	f000 f8ed 	bl	80010a0 <prvIsQueueEmpty>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f43f af3a 	beq.w	8000d42 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8000ece:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3738      	adds	r7, #56	; 0x38
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	e000ed04 	.word	0xe000ed04

08000edc <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ef0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d10d      	bne.n	8000f16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d14d      	bne.n	8000f9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 ff6a 	bl	8001de0 <xTaskPriorityDisinherit>
 8000f0c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2200      	movs	r2, #0
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	e043      	b.n	8000f9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d119      	bne.n	8000f50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	6898      	ldr	r0, [r3, #8]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	461a      	mov	r2, r3
 8000f26:	68b9      	ldr	r1, [r7, #8]
 8000f28:	f003 f89e 	bl	8004068 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	441a      	add	r2, r3
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d32b      	bcc.n	8000f9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	e026      	b.n	8000f9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	68d8      	ldr	r0, [r3, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	461a      	mov	r2, r3
 8000f5a:	68b9      	ldr	r1, [r7, #8]
 8000f5c:	f003 f884 	bl	8004068 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	68da      	ldr	r2, [r3, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	425b      	negs	r3, r3
 8000f6a:	441a      	add	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d207      	bcs.n	8000f8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	685a      	ldr	r2, [r3, #4]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	425b      	negs	r3, r3
 8000f86:	441a      	add	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d105      	bne.n	8000f9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d002      	beq.n	8000f9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	1c5a      	adds	r2, r3, #1
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8000fa6:	697b      	ldr	r3, [r7, #20]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d018      	beq.n	8000ff4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	68da      	ldr	r2, [r3, #12]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	441a      	add	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68da      	ldr	r2, [r3, #12]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d303      	bcc.n	8000fe4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68d9      	ldr	r1, [r3, #12]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	461a      	mov	r2, r3
 8000fee:	6838      	ldr	r0, [r7, #0]
 8000ff0:	f003 f83a 	bl	8004068 <memcpy>
	}
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001004:	f7ff fa9c 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800100e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001010:	e011      	b.n	8001036 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001016:	2b00      	cmp	r3, #0
 8001018:	d012      	beq.n	8001040 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3324      	adds	r3, #36	; 0x24
 800101e:	4618      	mov	r0, r3
 8001020:	f000 fc90 	bl	8001944 <xTaskRemoveFromEventList>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800102a:	f000 fd6f 	bl	8001b0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	3b01      	subs	r3, #1
 8001032:	b2db      	uxtb	r3, r3
 8001034:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103a:	2b00      	cmp	r3, #0
 800103c:	dce9      	bgt.n	8001012 <prvUnlockQueue+0x16>
 800103e:	e000      	b.n	8001042 <prvUnlockQueue+0x46>
					break;
 8001040:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	22ff      	movs	r2, #255	; 0xff
 8001046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800104a:	f7ff faa7 	bl	800059c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800104e:	f7ff fa77 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001058:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800105a:	e011      	b.n	8001080 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d012      	beq.n	800108a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3310      	adds	r3, #16
 8001068:	4618      	mov	r0, r3
 800106a:	f000 fc6b 	bl	8001944 <xTaskRemoveFromEventList>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001074:	f000 fd4a 	bl	8001b0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001078:	7bbb      	ldrb	r3, [r7, #14]
 800107a:	3b01      	subs	r3, #1
 800107c:	b2db      	uxtb	r3, r3
 800107e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001080:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001084:	2b00      	cmp	r3, #0
 8001086:	dce9      	bgt.n	800105c <prvUnlockQueue+0x60>
 8001088:	e000      	b.n	800108c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800108a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	22ff      	movs	r2, #255	; 0xff
 8001090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001094:	f7ff fa82 	bl	800059c <vPortExitCritical>
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80010a8:	f7ff fa4a 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d102      	bne.n	80010ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80010b4:	2301      	movs	r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	e001      	b.n	80010be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80010be:	f7ff fa6d 	bl	800059c <vPortExitCritical>

	return xReturn;
 80010c2:	68fb      	ldr	r3, [r7, #12]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80010d4:	f7ff fa34 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d102      	bne.n	80010ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80010e4:	2301      	movs	r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	e001      	b.n	80010ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80010ee:	f7ff fa55 	bl	800059c <vPortExitCritical>

	return xReturn;
 80010f2:	68fb      	ldr	r3, [r7, #12]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	e014      	b.n	8001136 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800110c:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <vQueueAddToRegistry+0x4c>)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10b      	bne.n	8001130 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001118:	490b      	ldr	r1, [pc, #44]	; (8001148 <vQueueAddToRegistry+0x4c>)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001122:	4a09      	ldr	r2, [pc, #36]	; (8001148 <vQueueAddToRegistry+0x4c>)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	4413      	add	r3, r2
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800112e:	e005      	b.n	800113c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	3301      	adds	r3, #1
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2b07      	cmp	r3, #7
 800113a:	d9e7      	bls.n	800110c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	20001e04 	.word	0x20001e04

0800114c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800115c:	f7ff f9f0 	bl	8000540 <vPortEnterCritical>
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001166:	b25b      	sxtb	r3, r3
 8001168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800116c:	d103      	bne.n	8001176 <vQueueWaitForMessageRestricted+0x2a>
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	2200      	movs	r2, #0
 8001172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800117c:	b25b      	sxtb	r3, r3
 800117e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001182:	d103      	bne.n	800118c <vQueueWaitForMessageRestricted+0x40>
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800118c:	f7ff fa06 	bl	800059c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001194:	2b00      	cmp	r3, #0
 8001196:	d106      	bne.n	80011a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	3324      	adds	r3, #36	; 0x24
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	68b9      	ldr	r1, [r7, #8]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 fba5 	bl	80018f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80011a6:	6978      	ldr	r0, [r7, #20]
 80011a8:	f7ff ff28 	bl	8000ffc <prvUnlockQueue>
	}
 80011ac:	bf00      	nop
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08c      	sub	sp, #48	; 0x30
 80011b8:	af04      	add	r7, sp, #16
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	4613      	mov	r3, r2
 80011c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80011c4:	88fb      	ldrh	r3, [r7, #6]
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fac9 	bl	8000760 <pvPortMalloc>
 80011ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00e      	beq.n	80011f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80011d6:	2050      	movs	r0, #80	; 0x50
 80011d8:	f7ff fac2 	bl	8000760 <pvPortMalloc>
 80011dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	631a      	str	r2, [r3, #48]	; 0x30
 80011ea:	e005      	b.n	80011f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80011ec:	6978      	ldr	r0, [r7, #20]
 80011ee:	f7ff fafd 	bl	80007ec <vPortFree>
 80011f2:	e001      	b.n	80011f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d013      	beq.n	8001226 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80011fe:	88fa      	ldrh	r2, [r7, #6]
 8001200:	2300      	movs	r3, #0
 8001202:	9303      	str	r3, [sp, #12]
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	9302      	str	r3, [sp, #8]
 8001208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	68b9      	ldr	r1, [r7, #8]
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f000 f80e 	bl	8001236 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800121a:	69f8      	ldr	r0, [r7, #28]
 800121c:	f000 f88a 	bl	8001334 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001220:	2301      	movs	r3, #1
 8001222:	61bb      	str	r3, [r7, #24]
 8001224:	e002      	b.n	800122c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
 800122a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800122c:	69bb      	ldr	r3, [r7, #24]
	}
 800122e:	4618      	mov	r0, r3
 8001230:	3720      	adds	r7, #32
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b088      	sub	sp, #32
 800123a:	af00      	add	r7, sp, #0
 800123c:	60f8      	str	r0, [r7, #12]
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800124e:	3b01      	subs	r3, #1
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	f023 0307 	bic.w	r3, r3, #7
 800125c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	2b00      	cmp	r3, #0
 8001266:	d009      	beq.n	800127c <prvInitialiseNewTask+0x46>
 8001268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800126c:	f383 8811 	msr	BASEPRI, r3
 8001270:	f3bf 8f6f 	isb	sy
 8001274:	f3bf 8f4f 	dsb	sy
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	e7fe      	b.n	800127a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	e012      	b.n	80012a8 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	4413      	add	r3, r2
 8001288:	7819      	ldrb	r1, [r3, #0]
 800128a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	4413      	add	r3, r2
 8001290:	3334      	adds	r3, #52	; 0x34
 8001292:	460a      	mov	r2, r1
 8001294:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	4413      	add	r3, r2
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d006      	beq.n	80012b0 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3301      	adds	r3, #1
 80012a6:	61fb      	str	r3, [r7, #28]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	2b09      	cmp	r3, #9
 80012ac:	d9e9      	bls.n	8001282 <prvInitialiseNewTask+0x4c>
 80012ae:	e000      	b.n	80012b2 <prvInitialiseNewTask+0x7c>
		{
			break;
 80012b0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80012b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80012ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012bc:	2b04      	cmp	r3, #4
 80012be:	d901      	bls.n	80012c4 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80012c0:	2304      	movs	r3, #4
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80012c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80012ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012ce:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 80012d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d2:	2200      	movs	r2, #0
 80012d4:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80012d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d8:	3304      	adds	r3, #4
 80012da:	4618      	mov	r0, r3
 80012dc:	f7fe ff98 	bl	8000210 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80012e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e2:	3318      	adds	r3, #24
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7fe ff93 	bl	8000210 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80012ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80012f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f2:	f1c3 0205 	rsb	r2, r3, #5
 80012f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80012fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001302:	2200      	movs	r2, #0
 8001304:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001308:	2200      	movs	r2, #0
 800130a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	68f9      	ldr	r1, [r7, #12]
 8001312:	69b8      	ldr	r0, [r7, #24]
 8001314:	f7ff f810 	bl	8000338 <pxPortInitialiseStack>
 8001318:	4602      	mov	r2, r0
 800131a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800131c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800131e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001328:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800132a:	bf00      	nop
 800132c:	3720      	adds	r7, #32
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800133c:	f7ff f900 	bl	8000540 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001340:	4b2a      	ldr	r3, [pc, #168]	; (80013ec <prvAddNewTaskToReadyList+0xb8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	4a29      	ldr	r2, [pc, #164]	; (80013ec <prvAddNewTaskToReadyList+0xb8>)
 8001348:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800134a:	4b29      	ldr	r3, [pc, #164]	; (80013f0 <prvAddNewTaskToReadyList+0xbc>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d109      	bne.n	8001366 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001352:	4a27      	ldr	r2, [pc, #156]	; (80013f0 <prvAddNewTaskToReadyList+0xbc>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001358:	4b24      	ldr	r3, [pc, #144]	; (80013ec <prvAddNewTaskToReadyList+0xb8>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d110      	bne.n	8001382 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001360:	f000 fbf8 	bl	8001b54 <prvInitialiseTaskLists>
 8001364:	e00d      	b.n	8001382 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001366:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <prvAddNewTaskToReadyList+0xc0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d109      	bne.n	8001382 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800136e:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <prvAddNewTaskToReadyList+0xbc>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001378:	429a      	cmp	r2, r3
 800137a:	d802      	bhi.n	8001382 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800137c:	4a1c      	ldr	r2, [pc, #112]	; (80013f0 <prvAddNewTaskToReadyList+0xbc>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001382:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <prvAddNewTaskToReadyList+0xc4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	3301      	adds	r3, #1
 8001388:	4a1b      	ldr	r2, [pc, #108]	; (80013f8 <prvAddNewTaskToReadyList+0xc4>)
 800138a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001390:	2201      	movs	r2, #1
 8001392:	409a      	lsls	r2, r3
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <prvAddNewTaskToReadyList+0xc8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4313      	orrs	r3, r2
 800139a:	4a18      	ldr	r2, [pc, #96]	; (80013fc <prvAddNewTaskToReadyList+0xc8>)
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013a2:	4613      	mov	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4a15      	ldr	r2, [pc, #84]	; (8001400 <prvAddNewTaskToReadyList+0xcc>)
 80013ac:	441a      	add	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3304      	adds	r3, #4
 80013b2:	4619      	mov	r1, r3
 80013b4:	4610      	mov	r0, r2
 80013b6:	f7fe ff38 	bl	800022a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80013ba:	f7ff f8ef 	bl	800059c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80013be:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <prvAddNewTaskToReadyList+0xc0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00e      	beq.n	80013e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <prvAddNewTaskToReadyList+0xbc>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d207      	bcs.n	80013e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <prvAddNewTaskToReadyList+0xd0>)
 80013d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	f3bf 8f4f 	dsb	sy
 80013e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20001d80 	.word	0x20001d80
 80013f0:	20001ca8 	.word	0x20001ca8
 80013f4:	20001d8c 	.word	0x20001d8c
 80013f8:	20001d9c 	.word	0x20001d9c
 80013fc:	20001d88 	.word	0x20001d88
 8001400:	20001cac 	.word	0x20001cac
 8001404:	e000ed04 	.word	0xe000ed04

08001408 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d016      	beq.n	8001448 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <vTaskDelay+0x60>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d009      	beq.n	8001436 <vTaskDelay+0x2e>
 8001422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001426:	f383 8811 	msr	BASEPRI, r3
 800142a:	f3bf 8f6f 	isb	sy
 800142e:	f3bf 8f4f 	dsb	sy
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	e7fe      	b.n	8001434 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001436:	f000 f867 	bl	8001508 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800143a:	2100      	movs	r1, #0
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 fd67 	bl	8001f10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001442:	f000 f86f 	bl	8001524 <xTaskResumeAll>
 8001446:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d107      	bne.n	800145e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800144e:	4b07      	ldr	r3, [pc, #28]	; (800146c <vTaskDelay+0x64>)
 8001450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	f3bf 8f4f 	dsb	sy
 800145a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20001da8 	.word	0x20001da8
 800146c:	e000ed04 	.word	0xe000ed04

08001470 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001476:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <vTaskStartScheduler+0x80>)
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	2300      	movs	r3, #0
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2300      	movs	r3, #0
 8001480:	2282      	movs	r2, #130	; 0x82
 8001482:	491c      	ldr	r1, [pc, #112]	; (80014f4 <vTaskStartScheduler+0x84>)
 8001484:	481c      	ldr	r0, [pc, #112]	; (80014f8 <vTaskStartScheduler+0x88>)
 8001486:	f7ff fe95 	bl	80011b4 <xTaskCreate>
 800148a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d102      	bne.n	8001498 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8001492:	f000 fda3 	bl	8001fdc <xTimerCreateTimerTask>
 8001496:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d115      	bne.n	80014ca <vTaskStartScheduler+0x5a>
 800149e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014a2:	f383 8811 	msr	BASEPRI, r3
 80014a6:	f3bf 8f6f 	isb	sy
 80014aa:	f3bf 8f4f 	dsb	sy
 80014ae:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <vTaskStartScheduler+0x8c>)
 80014b2:	f04f 32ff 	mov.w	r2, #4294967295
 80014b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <vTaskStartScheduler+0x90>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <vTaskStartScheduler+0x94>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80014c4:	f7fe ffb0 	bl	8000428 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80014c8:	e00d      	b.n	80014e6 <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d0:	d109      	bne.n	80014e6 <vTaskStartScheduler+0x76>
 80014d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014d6:	f383 8811 	msr	BASEPRI, r3
 80014da:	f3bf 8f6f 	isb	sy
 80014de:	f3bf 8f4f 	dsb	sy
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	e7fe      	b.n	80014e4 <vTaskStartScheduler+0x74>
}
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20001da4 	.word	0x20001da4
 80014f4:	080049f0 	.word	0x080049f0
 80014f8:	08001b25 	.word	0x08001b25
 80014fc:	20001da0 	.word	0x20001da0
 8001500:	20001d8c 	.word	0x20001d8c
 8001504:	20001d84 	.word	0x20001d84

08001508 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <vTaskSuspendAll+0x18>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	3301      	adds	r3, #1
 8001512:	4a03      	ldr	r2, [pc, #12]	; (8001520 <vTaskSuspendAll+0x18>)
 8001514:	6013      	str	r3, [r2, #0]
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	20001da8 	.word	0x20001da8

08001524 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001532:	4b41      	ldr	r3, [pc, #260]	; (8001638 <xTaskResumeAll+0x114>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d109      	bne.n	800154e <xTaskResumeAll+0x2a>
 800153a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800153e:	f383 8811 	msr	BASEPRI, r3
 8001542:	f3bf 8f6f 	isb	sy
 8001546:	f3bf 8f4f 	dsb	sy
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	e7fe      	b.n	800154c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800154e:	f7fe fff7 	bl	8000540 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001552:	4b39      	ldr	r3, [pc, #228]	; (8001638 <xTaskResumeAll+0x114>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	3b01      	subs	r3, #1
 8001558:	4a37      	ldr	r2, [pc, #220]	; (8001638 <xTaskResumeAll+0x114>)
 800155a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800155c:	4b36      	ldr	r3, [pc, #216]	; (8001638 <xTaskResumeAll+0x114>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d161      	bne.n	8001628 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001564:	4b35      	ldr	r3, [pc, #212]	; (800163c <xTaskResumeAll+0x118>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d05d      	beq.n	8001628 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800156c:	e02e      	b.n	80015cc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800156e:	4b34      	ldr	r3, [pc, #208]	; (8001640 <xTaskResumeAll+0x11c>)
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3318      	adds	r3, #24
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe feb2 	bl	80002e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3304      	adds	r3, #4
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe fead 	bl	80002e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	2201      	movs	r2, #1
 8001590:	409a      	lsls	r2, r3
 8001592:	4b2c      	ldr	r3, [pc, #176]	; (8001644 <xTaskResumeAll+0x120>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4313      	orrs	r3, r2
 8001598:	4a2a      	ldr	r2, [pc, #168]	; (8001644 <xTaskResumeAll+0x120>)
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4a27      	ldr	r2, [pc, #156]	; (8001648 <xTaskResumeAll+0x124>)
 80015aa:	441a      	add	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	3304      	adds	r3, #4
 80015b0:	4619      	mov	r1, r3
 80015b2:	4610      	mov	r0, r2
 80015b4:	f7fe fe39 	bl	800022a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015bc:	4b23      	ldr	r3, [pc, #140]	; (800164c <xTaskResumeAll+0x128>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d302      	bcc.n	80015cc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80015c6:	4b22      	ldr	r3, [pc, #136]	; (8001650 <xTaskResumeAll+0x12c>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80015cc:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <xTaskResumeAll+0x11c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1cc      	bne.n	800156e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80015da:	f000 fb47 	bl	8001c6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80015de:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <xTaskResumeAll+0x130>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d010      	beq.n	800160c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80015ea:	f000 f847 	bl	800167c <xTaskIncrementTick>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d002      	beq.n	80015fa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80015f4:	4b16      	ldr	r3, [pc, #88]	; (8001650 <xTaskResumeAll+0x12c>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3b01      	subs	r3, #1
 80015fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f1      	bne.n	80015ea <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8001606:	4b13      	ldr	r3, [pc, #76]	; (8001654 <xTaskResumeAll+0x130>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800160c:	4b10      	ldr	r3, [pc, #64]	; (8001650 <xTaskResumeAll+0x12c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d009      	beq.n	8001628 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001614:	2301      	movs	r3, #1
 8001616:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <xTaskResumeAll+0x134>)
 800161a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	f3bf 8f4f 	dsb	sy
 8001624:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001628:	f7fe ffb8 	bl	800059c <vPortExitCritical>

	return xAlreadyYielded;
 800162c:	68bb      	ldr	r3, [r7, #8]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20001da8 	.word	0x20001da8
 800163c:	20001d80 	.word	0x20001d80
 8001640:	20001d40 	.word	0x20001d40
 8001644:	20001d88 	.word	0x20001d88
 8001648:	20001cac 	.word	0x20001cac
 800164c:	20001ca8 	.word	0x20001ca8
 8001650:	20001d94 	.word	0x20001d94
 8001654:	20001d90 	.word	0x20001d90
 8001658:	e000ed04 	.word	0xe000ed04

0800165c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001662:	4b05      	ldr	r3, [pc, #20]	; (8001678 <xTaskGetTickCount+0x1c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001668:	687b      	ldr	r3, [r7, #4]
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20001d84 	.word	0x20001d84

0800167c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001686:	4b50      	ldr	r3, [pc, #320]	; (80017c8 <xTaskIncrementTick+0x14c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	f040 808c 	bne.w	80017a8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8001690:	4b4e      	ldr	r3, [pc, #312]	; (80017cc <xTaskIncrementTick+0x150>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	3301      	adds	r3, #1
 8001696:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001698:	4a4c      	ldr	r2, [pc, #304]	; (80017cc <xTaskIncrementTick+0x150>)
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d11f      	bne.n	80016e4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80016a4:	4b4a      	ldr	r3, [pc, #296]	; (80017d0 <xTaskIncrementTick+0x154>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d009      	beq.n	80016c2 <xTaskIncrementTick+0x46>
 80016ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016b2:	f383 8811 	msr	BASEPRI, r3
 80016b6:	f3bf 8f6f 	isb	sy
 80016ba:	f3bf 8f4f 	dsb	sy
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	e7fe      	b.n	80016c0 <xTaskIncrementTick+0x44>
 80016c2:	4b43      	ldr	r3, [pc, #268]	; (80017d0 <xTaskIncrementTick+0x154>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	4b42      	ldr	r3, [pc, #264]	; (80017d4 <xTaskIncrementTick+0x158>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a40      	ldr	r2, [pc, #256]	; (80017d0 <xTaskIncrementTick+0x154>)
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	4a40      	ldr	r2, [pc, #256]	; (80017d4 <xTaskIncrementTick+0x158>)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	4b40      	ldr	r3, [pc, #256]	; (80017d8 <xTaskIncrementTick+0x15c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	3301      	adds	r3, #1
 80016dc:	4a3e      	ldr	r2, [pc, #248]	; (80017d8 <xTaskIncrementTick+0x15c>)
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	f000 fac4 	bl	8001c6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80016e4:	4b3d      	ldr	r3, [pc, #244]	; (80017dc <xTaskIncrementTick+0x160>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d34d      	bcc.n	800178a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80016ee:	4b38      	ldr	r3, [pc, #224]	; (80017d0 <xTaskIncrementTick+0x154>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <xTaskIncrementTick+0x80>
 80016f8:	2301      	movs	r3, #1
 80016fa:	e000      	b.n	80016fe <xTaskIncrementTick+0x82>
 80016fc:	2300      	movs	r3, #0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d004      	beq.n	800170c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001702:	4b36      	ldr	r3, [pc, #216]	; (80017dc <xTaskIncrementTick+0x160>)
 8001704:	f04f 32ff 	mov.w	r2, #4294967295
 8001708:	601a      	str	r2, [r3, #0]
					break;
 800170a:	e03e      	b.n	800178a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800170c:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <xTaskIncrementTick+0x154>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	429a      	cmp	r2, r3
 8001722:	d203      	bcs.n	800172c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001724:	4a2d      	ldr	r2, [pc, #180]	; (80017dc <xTaskIncrementTick+0x160>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6013      	str	r3, [r2, #0]
						break;
 800172a:	e02e      	b.n	800178a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	3304      	adds	r3, #4
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe fdd7 	bl	80002e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173a:	2b00      	cmp	r3, #0
 800173c:	d004      	beq.n	8001748 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	3318      	adds	r3, #24
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe fdce 	bl	80002e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174c:	2201      	movs	r2, #1
 800174e:	409a      	lsls	r2, r3
 8001750:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <xTaskIncrementTick+0x164>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4313      	orrs	r3, r2
 8001756:	4a22      	ldr	r2, [pc, #136]	; (80017e0 <xTaskIncrementTick+0x164>)
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4a1f      	ldr	r2, [pc, #124]	; (80017e4 <xTaskIncrementTick+0x168>)
 8001768:	441a      	add	r2, r3
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	3304      	adds	r3, #4
 800176e:	4619      	mov	r1, r3
 8001770:	4610      	mov	r0, r2
 8001772:	f7fe fd5a 	bl	800022a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800177a:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <xTaskIncrementTick+0x16c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	429a      	cmp	r2, r3
 8001782:	d3b4      	bcc.n	80016ee <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001784:	2301      	movs	r3, #1
 8001786:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001788:	e7b1      	b.n	80016ee <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800178a:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <xTaskIncrementTick+0x16c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001790:	4914      	ldr	r1, [pc, #80]	; (80017e4 <xTaskIncrementTick+0x168>)
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	440b      	add	r3, r1
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d907      	bls.n	80017b2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80017a2:	2301      	movs	r3, #1
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	e004      	b.n	80017b2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80017a8:	4b10      	ldr	r3, [pc, #64]	; (80017ec <xTaskIncrementTick+0x170>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	3301      	adds	r3, #1
 80017ae:	4a0f      	ldr	r2, [pc, #60]	; (80017ec <xTaskIncrementTick+0x170>)
 80017b0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <xTaskIncrementTick+0x174>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80017ba:	2301      	movs	r3, #1
 80017bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80017be:	697b      	ldr	r3, [r7, #20]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20001da8 	.word	0x20001da8
 80017cc:	20001d84 	.word	0x20001d84
 80017d0:	20001d38 	.word	0x20001d38
 80017d4:	20001d3c 	.word	0x20001d3c
 80017d8:	20001d98 	.word	0x20001d98
 80017dc:	20001da0 	.word	0x20001da0
 80017e0:	20001d88 	.word	0x20001d88
 80017e4:	20001cac 	.word	0x20001cac
 80017e8:	20001ca8 	.word	0x20001ca8
 80017ec:	20001d90 	.word	0x20001d90
 80017f0:	20001d94 	.word	0x20001d94

080017f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80017f4:	b480      	push	{r7}
 80017f6:	b087      	sub	sp, #28
 80017f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80017fa:	4b26      	ldr	r3, [pc, #152]	; (8001894 <vTaskSwitchContext+0xa0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001802:	4b25      	ldr	r3, [pc, #148]	; (8001898 <vTaskSwitchContext+0xa4>)
 8001804:	2201      	movs	r2, #1
 8001806:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001808:	e03e      	b.n	8001888 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800180a:	4b23      	ldr	r3, [pc, #140]	; (8001898 <vTaskSwitchContext+0xa4>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001810:	4b22      	ldr	r3, [pc, #136]	; (800189c <vTaskSwitchContext+0xa8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	fab3 f383 	clz	r3, r3
 800181c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800181e:	7afb      	ldrb	r3, [r7, #11]
 8001820:	f1c3 031f 	rsb	r3, r3, #31
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	491e      	ldr	r1, [pc, #120]	; (80018a0 <vTaskSwitchContext+0xac>)
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	440b      	add	r3, r1
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d109      	bne.n	800184e <vTaskSwitchContext+0x5a>
	__asm volatile
 800183a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800183e:	f383 8811 	msr	BASEPRI, r3
 8001842:	f3bf 8f6f 	isb	sy
 8001846:	f3bf 8f4f 	dsb	sy
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	e7fe      	b.n	800184c <vTaskSwitchContext+0x58>
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4a11      	ldr	r2, [pc, #68]	; (80018a0 <vTaskSwitchContext+0xac>)
 800185a:	4413      	add	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	3308      	adds	r3, #8
 8001870:	429a      	cmp	r2, r3
 8001872:	d104      	bne.n	800187e <vTaskSwitchContext+0x8a>
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	4a07      	ldr	r2, [pc, #28]	; (80018a4 <vTaskSwitchContext+0xb0>)
 8001886:	6013      	str	r3, [r2, #0]
}
 8001888:	bf00      	nop
 800188a:	371c      	adds	r7, #28
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	20001da8 	.word	0x20001da8
 8001898:	20001d94 	.word	0x20001d94
 800189c:	20001d88 	.word	0x20001d88
 80018a0:	20001cac 	.word	0x20001cac
 80018a4:	20001ca8 	.word	0x20001ca8

080018a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d109      	bne.n	80018cc <vTaskPlaceOnEventList+0x24>
 80018b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018bc:	f383 8811 	msr	BASEPRI, r3
 80018c0:	f3bf 8f6f 	isb	sy
 80018c4:	f3bf 8f4f 	dsb	sy
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	e7fe      	b.n	80018ca <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80018cc:	4b07      	ldr	r3, [pc, #28]	; (80018ec <vTaskPlaceOnEventList+0x44>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	3318      	adds	r3, #24
 80018d2:	4619      	mov	r1, r3
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7fe fccc 	bl	8000272 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80018da:	2101      	movs	r1, #1
 80018dc:	6838      	ldr	r0, [r7, #0]
 80018de:	f000 fb17 	bl	8001f10 <prvAddCurrentTaskToDelayedList>
}
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20001ca8 	.word	0x20001ca8

080018f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d109      	bne.n	8001916 <vTaskPlaceOnEventListRestricted+0x26>
 8001902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001906:	f383 8811 	msr	BASEPRI, r3
 800190a:	f3bf 8f6f 	isb	sy
 800190e:	f3bf 8f4f 	dsb	sy
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	e7fe      	b.n	8001914 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <vTaskPlaceOnEventListRestricted+0x50>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	3318      	adds	r3, #24
 800191c:	4619      	mov	r1, r3
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f7fe fc83 	bl	800022a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d002      	beq.n	8001930 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
 800192e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	68b8      	ldr	r0, [r7, #8]
 8001934:	f000 faec 	bl	8001f10 <prvAddCurrentTaskToDelayedList>
	}
 8001938:	bf00      	nop
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20001ca8 	.word	0x20001ca8

08001944 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d109      	bne.n	800196e <xTaskRemoveFromEventList+0x2a>
 800195a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800195e:	f383 8811 	msr	BASEPRI, r3
 8001962:	f3bf 8f6f 	isb	sy
 8001966:	f3bf 8f4f 	dsb	sy
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	e7fe      	b.n	800196c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	3318      	adds	r3, #24
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fcb6 	bl	80002e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001978:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <xTaskRemoveFromEventList+0xac>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d11c      	bne.n	80019ba <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	3304      	adds	r3, #4
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fcad 	bl	80002e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	2201      	movs	r2, #1
 8001990:	409a      	lsls	r2, r3
 8001992:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <xTaskRemoveFromEventList+0xb0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4313      	orrs	r3, r2
 8001998:	4a16      	ldr	r2, [pc, #88]	; (80019f4 <xTaskRemoveFromEventList+0xb0>)
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a0:	4613      	mov	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4a13      	ldr	r2, [pc, #76]	; (80019f8 <xTaskRemoveFromEventList+0xb4>)
 80019aa:	441a      	add	r2, r3
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	3304      	adds	r3, #4
 80019b0:	4619      	mov	r1, r3
 80019b2:	4610      	mov	r0, r2
 80019b4:	f7fe fc39 	bl	800022a <vListInsertEnd>
 80019b8:	e005      	b.n	80019c6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	3318      	adds	r3, #24
 80019be:	4619      	mov	r1, r3
 80019c0:	480e      	ldr	r0, [pc, #56]	; (80019fc <xTaskRemoveFromEventList+0xb8>)
 80019c2:	f7fe fc32 	bl	800022a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ca:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <xTaskRemoveFromEventList+0xbc>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d905      	bls.n	80019e0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80019d4:	2301      	movs	r3, #1
 80019d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80019d8:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <xTaskRemoveFromEventList+0xc0>)
 80019da:	2201      	movs	r2, #1
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	e001      	b.n	80019e4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80019e4:	697b      	ldr	r3, [r7, #20]
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20001da8 	.word	0x20001da8
 80019f4:	20001d88 	.word	0x20001d88
 80019f8:	20001cac 	.word	0x20001cac
 80019fc:	20001d40 	.word	0x20001d40
 8001a00:	20001ca8 	.word	0x20001ca8
 8001a04:	20001d94 	.word	0x20001d94

08001a08 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d109      	bne.n	8001a2a <vTaskSetTimeOutState+0x22>
 8001a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a1a:	f383 8811 	msr	BASEPRI, r3
 8001a1e:	f3bf 8f6f 	isb	sy
 8001a22:	f3bf 8f4f 	dsb	sy
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	e7fe      	b.n	8001a28 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <vTaskSetTimeOutState+0x40>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <vTaskSetTimeOutState+0x44>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	605a      	str	r2, [r3, #4]
}
 8001a3a:	bf00      	nop
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20001d98 	.word	0x20001d98
 8001a4c:	20001d84 	.word	0x20001d84

08001a50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d109      	bne.n	8001a74 <xTaskCheckForTimeOut+0x24>
 8001a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a64:	f383 8811 	msr	BASEPRI, r3
 8001a68:	f3bf 8f6f 	isb	sy
 8001a6c:	f3bf 8f4f 	dsb	sy
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	e7fe      	b.n	8001a72 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d109      	bne.n	8001a8e <xTaskCheckForTimeOut+0x3e>
 8001a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a7e:	f383 8811 	msr	BASEPRI, r3
 8001a82:	f3bf 8f6f 	isb	sy
 8001a86:	f3bf 8f4f 	dsb	sy
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	e7fe      	b.n	8001a8c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8001a8e:	f7fe fd57 	bl	8000540 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001a92:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <xTaskCheckForTimeOut+0xb4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa0:	d102      	bne.n	8001aa8 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	e026      	b.n	8001af6 <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <xTaskCheckForTimeOut+0xb8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d007      	beq.n	8001ac4 <xTaskCheckForTimeOut+0x74>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d802      	bhi.n	8001ac4 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	e018      	b.n	8001af6 <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	1ad2      	subs	r2, r2, r3
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d20e      	bcs.n	8001af2 <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6859      	ldr	r1, [r3, #4]
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1acb      	subs	r3, r1, r3
 8001ae0:	441a      	add	r2, r3
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff ff8e 	bl	8001a08 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	e001      	b.n	8001af6 <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8001af2:	2301      	movs	r3, #1
 8001af4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8001af6:	f7fe fd51 	bl	800059c <vPortExitCritical>

	return xReturn;
 8001afa:	697b      	ldr	r3, [r7, #20]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20001d84 	.word	0x20001d84
 8001b08:	20001d98 	.word	0x20001d98

08001b0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <vTaskMissedYield+0x14>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	20001d94 	.word	0x20001d94

08001b24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001b2c:	f000 f852 	bl	8001bd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <prvIdleTask+0x28>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d9f9      	bls.n	8001b2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <prvIdleTask+0x2c>)
 8001b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	f3bf 8f4f 	dsb	sy
 8001b44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001b48:	e7f0      	b.n	8001b2c <prvIdleTask+0x8>
 8001b4a:	bf00      	nop
 8001b4c:	20001cac 	.word	0x20001cac
 8001b50:	e000ed04 	.word	0xe000ed04

08001b54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
 8001b5e:	e00c      	b.n	8001b7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <prvInitialiseTaskLists+0x60>)
 8001b6c:	4413      	add	r3, r2
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fb2e 	bl	80001d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3301      	adds	r3, #1
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b04      	cmp	r3, #4
 8001b7e:	d9ef      	bls.n	8001b60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001b80:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <prvInitialiseTaskLists+0x64>)
 8001b82:	f7fe fb25 	bl	80001d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001b86:	480d      	ldr	r0, [pc, #52]	; (8001bbc <prvInitialiseTaskLists+0x68>)
 8001b88:	f7fe fb22 	bl	80001d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001b8c:	480c      	ldr	r0, [pc, #48]	; (8001bc0 <prvInitialiseTaskLists+0x6c>)
 8001b8e:	f7fe fb1f 	bl	80001d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001b92:	480c      	ldr	r0, [pc, #48]	; (8001bc4 <prvInitialiseTaskLists+0x70>)
 8001b94:	f7fe fb1c 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001b98:	480b      	ldr	r0, [pc, #44]	; (8001bc8 <prvInitialiseTaskLists+0x74>)
 8001b9a:	f7fe fb19 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <prvInitialiseTaskLists+0x78>)
 8001ba0:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <prvInitialiseTaskLists+0x64>)
 8001ba2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <prvInitialiseTaskLists+0x7c>)
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <prvInitialiseTaskLists+0x68>)
 8001ba8:	601a      	str	r2, [r3, #0]
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20001cac 	.word	0x20001cac
 8001bb8:	20001d10 	.word	0x20001d10
 8001bbc:	20001d24 	.word	0x20001d24
 8001bc0:	20001d40 	.word	0x20001d40
 8001bc4:	20001d54 	.word	0x20001d54
 8001bc8:	20001d6c 	.word	0x20001d6c
 8001bcc:	20001d38 	.word	0x20001d38
 8001bd0:	20001d3c 	.word	0x20001d3c

08001bd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001bda:	e028      	b.n	8001c2e <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8001bdc:	f7ff fc94 	bl	8001508 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001be0:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <prvCheckTasksWaitingTermination+0x6c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	bf0c      	ite	eq
 8001be8:	2301      	moveq	r3, #1
 8001bea:	2300      	movne	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8001bf0:	f7ff fc98 	bl	8001524 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d119      	bne.n	8001c2e <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8001bfa:	f7fe fca1 	bl	8000540 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <prvCheckTasksWaitingTermination+0x6c>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fb6a 	bl	80002e4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <prvCheckTasksWaitingTermination+0x70>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	3b01      	subs	r3, #1
 8001c16:	4a0b      	ldr	r2, [pc, #44]	; (8001c44 <prvCheckTasksWaitingTermination+0x70>)
 8001c18:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <prvCheckTasksWaitingTermination+0x74>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	4a09      	ldr	r2, [pc, #36]	; (8001c48 <prvCheckTasksWaitingTermination+0x74>)
 8001c22:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8001c24:	f7fe fcba 	bl	800059c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8001c28:	6838      	ldr	r0, [r7, #0]
 8001c2a:	f000 f80f 	bl	8001c4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <prvCheckTasksWaitingTermination+0x74>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1d2      	bne.n	8001bdc <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20001d54 	.word	0x20001d54
 8001c44:	20001d80 	.word	0x20001d80
 8001c48:	20001d68 	.word	0x20001d68

08001c4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fdc7 	bl	80007ec <vPortFree>
			vPortFree( pxTCB );
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7fe fdc4 	bl	80007ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c72:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <prvResetNextTaskUnblockTime+0x44>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <prvResetNextTaskUnblockTime+0x14>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <prvResetNextTaskUnblockTime+0x16>
 8001c80:	2300      	movs	r3, #0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d004      	beq.n	8001c90 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <prvResetNextTaskUnblockTime+0x48>)
 8001c88:	f04f 32ff 	mov.w	r2, #4294967295
 8001c8c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001c8e:	e008      	b.n	8001ca2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001c90:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <prvResetNextTaskUnblockTime+0x44>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	4a05      	ldr	r2, [pc, #20]	; (8001cb4 <prvResetNextTaskUnblockTime+0x48>)
 8001ca0:	6013      	str	r3, [r2, #0]
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	20001d38 	.word	0x20001d38
 8001cb4:	20001da0 	.word	0x20001da0

08001cb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <xTaskGetSchedulerState+0x34>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d102      	bne.n	8001ccc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	607b      	str	r3, [r7, #4]
 8001cca:	e008      	b.n	8001cde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <xTaskGetSchedulerState+0x38>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d102      	bne.n	8001cda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	e001      	b.n	8001cde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001cde:	687b      	ldr	r3, [r7, #4]
	}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	20001d8c 	.word	0x20001d8c
 8001cf0:	20001da8 	.word	0x20001da8

08001cf4 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d062      	beq.n	8001dcc <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d0a:	4b32      	ldr	r3, [pc, #200]	; (8001dd4 <vTaskPriorityInherit+0xe0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d25b      	bcs.n	8001dcc <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	db06      	blt.n	8001d2a <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d1c:	4b2d      	ldr	r3, [pc, #180]	; (8001dd4 <vTaskPriorityInherit+0xe0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d22:	f1c3 0205 	rsb	r2, r3, #5
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6959      	ldr	r1, [r3, #20]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4a27      	ldr	r2, [pc, #156]	; (8001dd8 <vTaskPriorityInherit+0xe4>)
 8001d3c:	4413      	add	r3, r2
 8001d3e:	4299      	cmp	r1, r3
 8001d40:	d101      	bne.n	8001d46 <vTaskPriorityInherit+0x52>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <vTaskPriorityInherit+0x54>
 8001d46:	2300      	movs	r3, #0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d03a      	beq.n	8001dc2 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	3304      	adds	r3, #4
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fac7 	bl	80002e4 <uxListRemove>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d115      	bne.n	8001d88 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d60:	491d      	ldr	r1, [pc, #116]	; (8001dd8 <vTaskPriorityInherit+0xe4>)
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10a      	bne.n	8001d88 <vTaskPriorityInherit+0x94>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d76:	2201      	movs	r2, #1
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43da      	mvns	r2, r3
 8001d7e:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <vTaskPriorityInherit+0xe8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4013      	ands	r3, r2
 8001d84:	4a15      	ldr	r2, [pc, #84]	; (8001ddc <vTaskPriorityInherit+0xe8>)
 8001d86:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001d88:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <vTaskPriorityInherit+0xe0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d96:	2201      	movs	r2, #1
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <vTaskPriorityInherit+0xe8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	4a0e      	ldr	r2, [pc, #56]	; (8001ddc <vTaskPriorityInherit+0xe8>)
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4a09      	ldr	r2, [pc, #36]	; (8001dd8 <vTaskPriorityInherit+0xe4>)
 8001db2:	441a      	add	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	3304      	adds	r3, #4
 8001db8:	4619      	mov	r1, r3
 8001dba:	4610      	mov	r0, r2
 8001dbc:	f7fe fa35 	bl	800022a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001dc0:	e004      	b.n	8001dcc <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001dc2:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <vTaskPriorityInherit+0xe0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8001dcc:	bf00      	nop
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20001ca8 	.word	0x20001ca8
 8001dd8:	20001cac 	.word	0x20001cac
 8001ddc:	20001d88 	.word	0x20001d88

08001de0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d06c      	beq.n	8001ed0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8001df6:	4b39      	ldr	r3, [pc, #228]	; (8001edc <xTaskPriorityDisinherit+0xfc>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d009      	beq.n	8001e14 <xTaskPriorityDisinherit+0x34>
 8001e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e04:	f383 8811 	msr	BASEPRI, r3
 8001e08:	f3bf 8f6f 	isb	sy
 8001e0c:	f3bf 8f4f 	dsb	sy
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	e7fe      	b.n	8001e12 <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d109      	bne.n	8001e30 <xTaskPriorityDisinherit+0x50>
 8001e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e20:	f383 8811 	msr	BASEPRI, r3
 8001e24:	f3bf 8f6f 	isb	sy
 8001e28:	f3bf 8f4f 	dsb	sy
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	e7fe      	b.n	8001e2e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e34:	1e5a      	subs	r2, r3, #1
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d044      	beq.n	8001ed0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d140      	bne.n	8001ed0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	3304      	adds	r3, #4
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fa46 	bl	80002e4 <uxListRemove>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d115      	bne.n	8001e8a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e62:	491f      	ldr	r1, [pc, #124]	; (8001ee0 <xTaskPriorityDisinherit+0x100>)
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10a      	bne.n	8001e8a <xTaskPriorityDisinherit+0xaa>
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	2201      	movs	r2, #1
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <xTaskPriorityDisinherit+0x104>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4013      	ands	r3, r2
 8001e86:	4a17      	ldr	r2, [pc, #92]	; (8001ee4 <xTaskPriorityDisinherit+0x104>)
 8001e88:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e96:	f1c3 0205 	rsb	r2, r3, #5
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	409a      	lsls	r2, r3
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <xTaskPriorityDisinherit+0x104>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	4a0d      	ldr	r2, [pc, #52]	; (8001ee4 <xTaskPriorityDisinherit+0x104>)
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4a08      	ldr	r2, [pc, #32]	; (8001ee0 <xTaskPriorityDisinherit+0x100>)
 8001ebe:	441a      	add	r2, r3
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	f7fe f9af 	bl	800022a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001ed0:	697b      	ldr	r3, [r7, #20]
	}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20001ca8 	.word	0x20001ca8
 8001ee0:	20001cac 	.word	0x20001cac
 8001ee4:	20001d88 	.word	0x20001d88

08001ee8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8001eec:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <pvTaskIncrementMutexHeldCount+0x24>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d004      	beq.n	8001efe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <pvTaskIncrementMutexHeldCount+0x24>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001efa:	3201      	adds	r2, #1
 8001efc:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 8001efe:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <pvTaskIncrementMutexHeldCount+0x24>)
 8001f00:	681b      	ldr	r3, [r3, #0]
	}
 8001f02:	4618      	mov	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	20001ca8 	.word	0x20001ca8

08001f10 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001f1a:	4b29      	ldr	r3, [pc, #164]	; (8001fc0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f20:	4b28      	ldr	r3, [pc, #160]	; (8001fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	3304      	adds	r3, #4
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe f9dc 	bl	80002e4 <uxListRemove>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10b      	bne.n	8001f4a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001f32:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	2201      	movs	r2, #1
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43da      	mvns	r2, r3
 8001f40:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4013      	ands	r3, r2
 8001f46:	4a20      	ldr	r2, [pc, #128]	; (8001fc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001f48:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f50:	d10a      	bne.n	8001f68 <prvAddCurrentTaskToDelayedList+0x58>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d007      	beq.n	8001f68 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f58:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	4619      	mov	r1, r3
 8001f60:	481a      	ldr	r0, [pc, #104]	; (8001fcc <prvAddCurrentTaskToDelayedList+0xbc>)
 8001f62:	f7fe f962 	bl	800022a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001f66:	e026      	b.n	8001fb6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001f70:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d209      	bcs.n	8001f94 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f80:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	f7fe f970 	bl	8000272 <vListInsert>
}
 8001f92:	e010      	b.n	8001fb6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f94:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	f7fe f966 	bl	8000272 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d202      	bcs.n	8001fb6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8001fb0:	4a09      	ldr	r2, [pc, #36]	; (8001fd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	6013      	str	r3, [r2, #0]
}
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20001d84 	.word	0x20001d84
 8001fc4:	20001ca8 	.word	0x20001ca8
 8001fc8:	20001d88 	.word	0x20001d88
 8001fcc:	20001d6c 	.word	0x20001d6c
 8001fd0:	20001d3c 	.word	0x20001d3c
 8001fd4:	20001d38 	.word	0x20001d38
 8001fd8:	20001da0 	.word	0x20001da0

08001fdc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8001fe6:	f000 fa8f 	bl	8002508 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8001fea:	4b11      	ldr	r3, [pc, #68]	; (8002030 <xTimerCreateTimerTask+0x54>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00b      	beq.n	800200a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <xTimerCreateTimerTask+0x58>)
 8001ff4:	9301      	str	r3, [sp, #4]
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002000:	490d      	ldr	r1, [pc, #52]	; (8002038 <xTimerCreateTimerTask+0x5c>)
 8002002:	480e      	ldr	r0, [pc, #56]	; (800203c <xTimerCreateTimerTask+0x60>)
 8002004:	f7ff f8d6 	bl	80011b4 <xTaskCreate>
 8002008:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d109      	bne.n	8002024 <xTimerCreateTimerTask+0x48>
 8002010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002014:	f383 8811 	msr	BASEPRI, r3
 8002018:	f3bf 8f6f 	isb	sy
 800201c:	f3bf 8f4f 	dsb	sy
 8002020:	603b      	str	r3, [r7, #0]
 8002022:	e7fe      	b.n	8002022 <xTimerCreateTimerTask+0x46>
	return xReturn;
 8002024:	687b      	ldr	r3, [r7, #4]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20001ddc 	.word	0x20001ddc
 8002034:	20001de0 	.word	0x20001de0
 8002038:	080049f8 	.word	0x080049f8
 800203c:	08002159 	.word	0x08002159

08002040 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08a      	sub	sp, #40	; 0x28
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d109      	bne.n	800206c <xTimerGenericCommand+0x2c>
 8002058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800205c:	f383 8811 	msr	BASEPRI, r3
 8002060:	f3bf 8f6f 	isb	sy
 8002064:	f3bf 8f4f 	dsb	sy
 8002068:	623b      	str	r3, [r7, #32]
 800206a:	e7fe      	b.n	800206a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <xTimerGenericCommand+0x94>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d02a      	beq.n	80020ca <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b05      	cmp	r3, #5
 8002084:	dc18      	bgt.n	80020b8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002086:	f7ff fe17 	bl	8001cb8 <xTaskGetSchedulerState>
 800208a:	4603      	mov	r3, r0
 800208c:	2b02      	cmp	r3, #2
 800208e:	d109      	bne.n	80020a4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002090:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <xTimerGenericCommand+0x94>)
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	f107 0114 	add.w	r1, r7, #20
 8002098:	2300      	movs	r3, #0
 800209a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800209c:	f7fe fc7e 	bl	800099c <xQueueGenericSend>
 80020a0:	6278      	str	r0, [r7, #36]	; 0x24
 80020a2:	e012      	b.n	80020ca <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <xTimerGenericCommand+0x94>)
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	f107 0114 	add.w	r1, r7, #20
 80020ac:	2300      	movs	r3, #0
 80020ae:	2200      	movs	r2, #0
 80020b0:	f7fe fc74 	bl	800099c <xQueueGenericSend>
 80020b4:	6278      	str	r0, [r7, #36]	; 0x24
 80020b6:	e008      	b.n	80020ca <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <xTimerGenericCommand+0x94>)
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	f107 0114 	add.w	r1, r7, #20
 80020c0:	2300      	movs	r3, #0
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	f7fe fd64 	bl	8000b90 <xQueueGenericSendFromISR>
 80020c8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3728      	adds	r7, #40	; 0x28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20001ddc 	.word	0x20001ddc

080020d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af02      	add	r7, sp, #8
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80020e2:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <prvProcessExpiredTimer+0x7c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	3304      	adds	r3, #4
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe f8f7 	bl	80002e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d121      	bne.n	8002142 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	699a      	ldr	r2, [r3, #24]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	18d1      	adds	r1, r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	6978      	ldr	r0, [r7, #20]
 800210c:	f000 f8c8 	bl	80022a0 <prvInsertTimerInActiveList>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d015      	beq.n	8002142 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002116:	2300      	movs	r3, #0
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	2300      	movs	r3, #0
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	2100      	movs	r1, #0
 8002120:	6978      	ldr	r0, [r7, #20]
 8002122:	f7ff ff8d 	bl	8002040 <xTimerGenericCommand>
 8002126:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d109      	bne.n	8002142 <prvProcessExpiredTimer+0x6a>
 800212e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002132:	f383 8811 	msr	BASEPRI, r3
 8002136:	f3bf 8f6f 	isb	sy
 800213a:	f3bf 8f4f 	dsb	sy
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	e7fe      	b.n	8002140 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	6978      	ldr	r0, [r7, #20]
 8002148:	4798      	blx	r3
}
 800214a:	bf00      	nop
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20001dd4 	.word	0x20001dd4

08002158 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002160:	f107 0308 	add.w	r3, r7, #8
 8002164:	4618      	mov	r0, r3
 8002166:	f000 f857 	bl	8002218 <prvGetNextExpireTime>
 800216a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	4619      	mov	r1, r3
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 f803 	bl	800217c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002176:	f000 f8d5 	bl	8002324 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800217a:	e7f1      	b.n	8002160 <prvTimerTask+0x8>

0800217c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002186:	f7ff f9bf 	bl	8001508 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800218a:	f107 0308 	add.w	r3, r7, #8
 800218e:	4618      	mov	r0, r3
 8002190:	f000 f866 	bl	8002260 <prvSampleTimeNow>
 8002194:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d130      	bne.n	80021fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10a      	bne.n	80021b8 <prvProcessTimerOrBlockTask+0x3c>
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d806      	bhi.n	80021b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80021aa:	f7ff f9bb 	bl	8001524 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80021ae:	68f9      	ldr	r1, [r7, #12]
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff ff91 	bl	80020d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80021b6:	e024      	b.n	8002202 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d008      	beq.n	80021d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80021be:	4b13      	ldr	r3, [pc, #76]	; (800220c <prvProcessTimerOrBlockTask+0x90>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80021d0:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <prvProcessTimerOrBlockTask+0x94>)
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	4619      	mov	r1, r3
 80021de:	f7fe ffb5 	bl	800114c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80021e2:	f7ff f99f 	bl	8001524 <xTaskResumeAll>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10a      	bne.n	8002202 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80021ec:	4b09      	ldr	r3, [pc, #36]	; (8002214 <prvProcessTimerOrBlockTask+0x98>)
 80021ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	f3bf 8f4f 	dsb	sy
 80021f8:	f3bf 8f6f 	isb	sy
}
 80021fc:	e001      	b.n	8002202 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80021fe:	f7ff f991 	bl	8001524 <xTaskResumeAll>
}
 8002202:	bf00      	nop
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20001dd8 	.word	0x20001dd8
 8002210:	20001ddc 	.word	0x20001ddc
 8002214:	e000ed04 	.word	0xe000ed04

08002218 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002220:	4b0e      	ldr	r3, [pc, #56]	; (800225c <prvGetNextExpireTime+0x44>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	bf0c      	ite	eq
 800222a:	2301      	moveq	r3, #1
 800222c:	2300      	movne	r3, #0
 800222e:	b2db      	uxtb	r3, r3
 8002230:	461a      	mov	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d105      	bne.n	800224a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800223e:	4b07      	ldr	r3, [pc, #28]	; (800225c <prvGetNextExpireTime+0x44>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	e001      	b.n	800224e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800224e:	68fb      	ldr	r3, [r7, #12]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	20001dd4 	.word	0x20001dd4

08002260 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002268:	f7ff f9f8 	bl	800165c <xTaskGetTickCount>
 800226c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800226e:	4b0b      	ldr	r3, [pc, #44]	; (800229c <prvSampleTimeNow+0x3c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	429a      	cmp	r2, r3
 8002276:	d205      	bcs.n	8002284 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002278:	f000 f8e6 	bl	8002448 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	e002      	b.n	800228a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800228a:	4a04      	ldr	r2, [pc, #16]	; (800229c <prvSampleTimeNow+0x3c>)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002290:	68fb      	ldr	r3, [r7, #12]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20001de4 	.word	0x20001de4

080022a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
 80022ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d812      	bhi.n	80022ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	1ad2      	subs	r2, r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d302      	bcc.n	80022da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80022d4:	2301      	movs	r3, #1
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	e01b      	b.n	8002312 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80022da:	4b10      	ldr	r3, [pc, #64]	; (800231c <prvInsertTimerInActiveList+0x7c>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	3304      	adds	r3, #4
 80022e2:	4619      	mov	r1, r3
 80022e4:	4610      	mov	r0, r2
 80022e6:	f7fd ffc4 	bl	8000272 <vListInsert>
 80022ea:	e012      	b.n	8002312 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d206      	bcs.n	8002302 <prvInsertTimerInActiveList+0x62>
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d302      	bcc.n	8002302 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80022fc:	2301      	movs	r3, #1
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	e007      	b.n	8002312 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <prvInsertTimerInActiveList+0x80>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	3304      	adds	r3, #4
 800230a:	4619      	mov	r1, r3
 800230c:	4610      	mov	r0, r2
 800230e:	f7fd ffb0 	bl	8000272 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002312:	697b      	ldr	r3, [r7, #20]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20001dd8 	.word	0x20001dd8
 8002320:	20001dd4 	.word	0x20001dd4

08002324 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08c      	sub	sp, #48	; 0x30
 8002328:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800232a:	e07a      	b.n	8002422 <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	db77      	blt.n	8002422 <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d004      	beq.n	8002348 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	3304      	adds	r3, #4
 8002342:	4618      	mov	r0, r3
 8002344:	f7fd ffce 	bl	80002e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002348:	1d3b      	adds	r3, r7, #4
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff ff88 	bl	8002260 <prvSampleTimeNow>
 8002350:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2b09      	cmp	r3, #9
 8002356:	d863      	bhi.n	8002420 <prvProcessReceivedCommands+0xfc>
 8002358:	a201      	add	r2, pc, #4	; (adr r2, 8002360 <prvProcessReceivedCommands+0x3c>)
 800235a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235e:	bf00      	nop
 8002360:	08002389 	.word	0x08002389
 8002364:	08002389 	.word	0x08002389
 8002368:	08002389 	.word	0x08002389
 800236c:	08002423 	.word	0x08002423
 8002370:	080023e3 	.word	0x080023e3
 8002374:	08002419 	.word	0x08002419
 8002378:	08002389 	.word	0x08002389
 800237c:	08002389 	.word	0x08002389
 8002380:	08002423 	.word	0x08002423
 8002384:	080023e3 	.word	0x080023e3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	18d1      	adds	r1, r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a3a      	ldr	r2, [r7, #32]
 8002394:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002396:	f7ff ff83 	bl	80022a0 <prvInsertTimerInActiveList>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d040      	beq.n	8002422 <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023a6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d138      	bne.n	8002422 <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	441a      	add	r2, r3
 80023b8:	2300      	movs	r3, #0
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	2300      	movs	r3, #0
 80023be:	2100      	movs	r1, #0
 80023c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023c2:	f7ff fe3d 	bl	8002040 <xTimerGenericCommand>
 80023c6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d129      	bne.n	8002422 <prvProcessReceivedCommands+0xfe>
 80023ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d2:	f383 8811 	msr	BASEPRI, r3
 80023d6:	f3bf 8f6f 	isb	sy
 80023da:	f3bf 8f4f 	dsb	sy
 80023de:	61bb      	str	r3, [r7, #24]
 80023e0:	e7fe      	b.n	80023e0 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d109      	bne.n	8002404 <prvProcessReceivedCommands+0xe0>
 80023f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f4:	f383 8811 	msr	BASEPRI, r3
 80023f8:	f3bf 8f6f 	isb	sy
 80023fc:	f3bf 8f4f 	dsb	sy
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	e7fe      	b.n	8002402 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	699a      	ldr	r2, [r3, #24]
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	18d1      	adds	r1, r2, r3
 800240c:	6a3b      	ldr	r3, [r7, #32]
 800240e:	6a3a      	ldr	r2, [r7, #32]
 8002410:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002412:	f7ff ff45 	bl	80022a0 <prvInsertTimerInActiveList>
					break;
 8002416:	e004      	b.n	8002422 <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8002418:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800241a:	f7fe f9e7 	bl	80007ec <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800241e:	e000      	b.n	8002422 <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
 8002420:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002422:	4b08      	ldr	r3, [pc, #32]	; (8002444 <prvProcessReceivedCommands+0x120>)
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	f107 0108 	add.w	r1, r7, #8
 800242a:	2300      	movs	r3, #0
 800242c:	2200      	movs	r2, #0
 800242e:	f7fe fc43 	bl	8000cb8 <xQueueGenericReceive>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	f47f af79 	bne.w	800232c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800243a:	bf00      	nop
 800243c:	3728      	adds	r7, #40	; 0x28
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20001ddc 	.word	0x20001ddc

08002448 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800244e:	e044      	b.n	80024da <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002450:	4b2b      	ldr	r3, [pc, #172]	; (8002500 <prvSwitchTimerLists+0xb8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800245a:	4b29      	ldr	r3, [pc, #164]	; (8002500 <prvSwitchTimerLists+0xb8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	3304      	adds	r3, #4
 8002468:	4618      	mov	r0, r3
 800246a:	f7fd ff3b 	bl	80002e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	6938      	ldr	r0, [r7, #16]
 8002474:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d12d      	bne.n	80024da <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	699a      	ldr	r2, [r3, #24]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	4413      	add	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	429a      	cmp	r2, r3
 800248e:	d90e      	bls.n	80024ae <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800249c:	4b18      	ldr	r3, [pc, #96]	; (8002500 <prvSwitchTimerLists+0xb8>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	3304      	adds	r3, #4
 80024a4:	4619      	mov	r1, r3
 80024a6:	4610      	mov	r0, r2
 80024a8:	f7fd fee3 	bl	8000272 <vListInsert>
 80024ac:	e015      	b.n	80024da <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80024ae:	2300      	movs	r3, #0
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	2300      	movs	r3, #0
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	2100      	movs	r1, #0
 80024b8:	6938      	ldr	r0, [r7, #16]
 80024ba:	f7ff fdc1 	bl	8002040 <xTimerGenericCommand>
 80024be:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d109      	bne.n	80024da <prvSwitchTimerLists+0x92>
 80024c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ca:	f383 8811 	msr	BASEPRI, r3
 80024ce:	f3bf 8f6f 	isb	sy
 80024d2:	f3bf 8f4f 	dsb	sy
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	e7fe      	b.n	80024d8 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80024da:	4b09      	ldr	r3, [pc, #36]	; (8002500 <prvSwitchTimerLists+0xb8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1b5      	bne.n	8002450 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80024e4:	4b06      	ldr	r3, [pc, #24]	; (8002500 <prvSwitchTimerLists+0xb8>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <prvSwitchTimerLists+0xbc>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a04      	ldr	r2, [pc, #16]	; (8002500 <prvSwitchTimerLists+0xb8>)
 80024f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80024f2:	4a04      	ldr	r2, [pc, #16]	; (8002504 <prvSwitchTimerLists+0xbc>)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6013      	str	r3, [r2, #0]
}
 80024f8:	bf00      	nop
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	20001dd4 	.word	0x20001dd4
 8002504:	20001dd8 	.word	0x20001dd8

08002508 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800250c:	f7fe f818 	bl	8000540 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002510:	4b12      	ldr	r3, [pc, #72]	; (800255c <prvCheckForValidListAndQueue+0x54>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d11d      	bne.n	8002554 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8002518:	4811      	ldr	r0, [pc, #68]	; (8002560 <prvCheckForValidListAndQueue+0x58>)
 800251a:	f7fd fe59 	bl	80001d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800251e:	4811      	ldr	r0, [pc, #68]	; (8002564 <prvCheckForValidListAndQueue+0x5c>)
 8002520:	f7fd fe56 	bl	80001d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002524:	4b10      	ldr	r3, [pc, #64]	; (8002568 <prvCheckForValidListAndQueue+0x60>)
 8002526:	4a0e      	ldr	r2, [pc, #56]	; (8002560 <prvCheckForValidListAndQueue+0x58>)
 8002528:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800252a:	4b10      	ldr	r3, [pc, #64]	; (800256c <prvCheckForValidListAndQueue+0x64>)
 800252c:	4a0d      	ldr	r2, [pc, #52]	; (8002564 <prvCheckForValidListAndQueue+0x5c>)
 800252e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002530:	2200      	movs	r2, #0
 8002532:	210c      	movs	r1, #12
 8002534:	2005      	movs	r0, #5
 8002536:	f7fe f9d9 	bl	80008ec <xQueueGenericCreate>
 800253a:	4602      	mov	r2, r0
 800253c:	4b07      	ldr	r3, [pc, #28]	; (800255c <prvCheckForValidListAndQueue+0x54>)
 800253e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <prvCheckForValidListAndQueue+0x54>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002548:	4b04      	ldr	r3, [pc, #16]	; (800255c <prvCheckForValidListAndQueue+0x54>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4908      	ldr	r1, [pc, #32]	; (8002570 <prvCheckForValidListAndQueue+0x68>)
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe fdd4 	bl	80010fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002554:	f7fe f822 	bl	800059c <vPortExitCritical>
}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20001ddc 	.word	0x20001ddc
 8002560:	20001dac 	.word	0x20001dac
 8002564:	20001dc0 	.word	0x20001dc0
 8002568:	20001dd4 	.word	0x20001dd4
 800256c:	20001dd8 	.word	0x20001dd8
 8002570:	08004a00 	.word	0x08004a00

08002574 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8002578:	2101      	movs	r1, #1
 800257a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800257e:	f000 fb87 	bl	8002c90 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8002582:	2100      	movs	r1, #0
 8002584:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002588:	f000 fb82 	bl	8002c90 <RCC_APB2PeriphResetCmd>
}
 800258c:	bf00      	nop
 800258e:	bd80      	pop	{r7, pc}

08002590 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80025ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025b2:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	791b      	ldrb	r3, [r3, #4]
 80025b8:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80025be:	4313      	orrs	r3, r2
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	4b18      	ldr	r3, [pc, #96]	; (8002638 <ADC_Init+0xa8>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80025e2:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80025e8:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	795b      	ldrb	r3, [r3, #5]
 80025ee:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80025f0:	4313      	orrs	r3, r2
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002602:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800260a:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	7d1b      	ldrb	r3, [r3, #20]
 8002610:	3b01      	subs	r3, #1
 8002612:	b2da      	uxtb	r2, r3
 8002614:	7afb      	ldrb	r3, [r7, #11]
 8002616:	4313      	orrs	r3, r2
 8002618:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 800261a:	7afb      	ldrb	r3, [r7, #11]
 800261c:	051b      	lsls	r3, r3, #20
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4313      	orrs	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800262a:	bf00      	nop
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	c0fff7fd 	.word	0xc0fff7fd

0800263c <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002648:	78fb      	ldrb	r3, [r7, #3]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d006      	beq.n	800265c <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f043 0201 	orr.w	r2, r3, #1
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 800265a:	e005      	b.n	8002668 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f023 0201 	bic.w	r2, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	609a      	str	r2, [r3, #8]
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	4608      	mov	r0, r1
 800267e:	4611      	mov	r1, r2
 8002680:	461a      	mov	r2, r3
 8002682:	4603      	mov	r3, r0
 8002684:	70fb      	strb	r3, [r7, #3]
 8002686:	460b      	mov	r3, r1
 8002688:	70bb      	strb	r3, [r7, #2]
 800268a:	4613      	mov	r3, r2
 800268c:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8002696:	78fb      	ldrb	r3, [r7, #3]
 8002698:	2b09      	cmp	r3, #9
 800269a:	d923      	bls.n	80026e4 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 80026a2:	78fb      	ldrb	r3, [r7, #3]
 80026a4:	f1a3 020a 	sub.w	r2, r3, #10
 80026a8:	4613      	mov	r3, r2
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	4413      	add	r3, r2
 80026ae:	2207      	movs	r2, #7
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	4013      	ands	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80026c0:	7879      	ldrb	r1, [r7, #1]
 80026c2:	78fb      	ldrb	r3, [r7, #3]
 80026c4:	f1a3 020a 	sub.w	r2, r3, #10
 80026c8:	4613      	mov	r3, r2
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	4413      	add	r3, r2
 80026ce:	fa01 f303 	lsl.w	r3, r1, r3
 80026d2:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	4313      	orrs	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	60da      	str	r2, [r3, #12]
 80026e2:	e01e      	b.n	8002722 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80026ea:	78fa      	ldrb	r2, [r7, #3]
 80026ec:	4613      	mov	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	2207      	movs	r2, #7
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4013      	ands	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8002704:	7879      	ldrb	r1, [r7, #1]
 8002706:	78fa      	ldrb	r2, [r7, #3]
 8002708:	4613      	mov	r3, r2
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4413      	add	r3, r2
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	4313      	orrs	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8002722:	78bb      	ldrb	r3, [r7, #2]
 8002724:	2b06      	cmp	r3, #6
 8002726:	d821      	bhi.n	800276c <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 800272e:	78bb      	ldrb	r3, [r7, #2]
 8002730:	1e5a      	subs	r2, r3, #1
 8002732:	4613      	mov	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	221f      	movs	r2, #31
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	43db      	mvns	r3, r3
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4013      	ands	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 800274a:	78f9      	ldrb	r1, [r7, #3]
 800274c:	78bb      	ldrb	r3, [r7, #2]
 800274e:	1e5a      	subs	r2, r3, #1
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	fa01 f303 	lsl.w	r3, r1, r3
 800275a:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	4313      	orrs	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800276a:	e047      	b.n	80027fc <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 800276c:	78bb      	ldrb	r3, [r7, #2]
 800276e:	2b0c      	cmp	r3, #12
 8002770:	d821      	bhi.n	80027b6 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8002778:	78bb      	ldrb	r3, [r7, #2]
 800277a:	1fda      	subs	r2, r3, #7
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	221f      	movs	r2, #31
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	43db      	mvns	r3, r3
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4013      	ands	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8002794:	78f9      	ldrb	r1, [r7, #3]
 8002796:	78bb      	ldrb	r3, [r7, #2]
 8002798:	1fda      	subs	r2, r3, #7
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	fa01 f303 	lsl.w	r3, r1, r3
 80027a4:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80027b4:	e022      	b.n	80027fc <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 80027bc:	78bb      	ldrb	r3, [r7, #2]
 80027be:	f1a3 020d 	sub.w	r2, r3, #13
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	221f      	movs	r2, #31
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	43db      	mvns	r3, r3
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	4013      	ands	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 80027da:	78f9      	ldrb	r1, [r7, #3]
 80027dc:	78bb      	ldrb	r3, [r7, #2]
 80027de:	f1a3 020d 	sub.w	r2, r3, #13
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ec:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80027fc:	bf00      	nop
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8002818:	4b08      	ldr	r3, [pc, #32]	; (800283c <DAC_SetChannel1Data+0x34>)
 800281a:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4413      	add	r3, r2
 8002822:	3308      	adds	r3, #8
 8002824:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	461a      	mov	r2, r3
 800282a:	887b      	ldrh	r3, [r7, #2]
 800282c:	6013      	str	r3, [r2, #0]
}
 800282e:	bf00      	nop
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40007400 	.word	0x40007400

08002840 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4b25      	ldr	r3, [pc, #148]	; (80028ec <DMA_Init+0xac>)
 8002858:	4013      	ands	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800286a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002876:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002882:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002888:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800288e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002894:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	4313      	orrs	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f023 0307 	bic.w	r3, r3, #7
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b8:	4313      	orrs	r3, r2
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4313      	orrs	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	60da      	str	r2, [r3, #12]
}
 80028de:	bf00      	nop
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	f01c803f 	.word	0xf01c803f

080028f0 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d006      	beq.n	8002910 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f043 0201 	orr.w	r2, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 800290e:	e005      	b.n	800291c <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f023 0201 	bic.w	r2, r3, #1
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	601a      	str	r2, [r3, #0]
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8002930:	2300      	movs	r3, #0
 8002932:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
 8002944:	e001      	b.n	800294a <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8002946:	2300      	movs	r3, #0
 8002948:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800294a:	7bfb      	ldrb	r3, [r7, #15]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002958:	b480      	push	{r7}
 800295a:	b087      	sub	sp, #28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8002962:	2300      	movs	r3, #0
 8002964:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a15      	ldr	r2, [pc, #84]	; (80029c4 <DMA_GetFlagStatus+0x6c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d802      	bhi.n	8002978 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002972:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <DMA_GetFlagStatus+0x70>)
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	e001      	b.n	800297c <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002978:	4b14      	ldr	r3, [pc, #80]	; (80029cc <DMA_GetFlagStatus+0x74>)
 800297a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	e002      	b.n	8002994 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800299a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800299e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80029aa:	2301      	movs	r3, #1
 80029ac:	75fb      	strb	r3, [r7, #23]
 80029ae:	e001      	b.n	80029b4 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80029b0:	2300      	movs	r3, #0
 80029b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80029b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	371c      	adds	r7, #28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	4002640f 	.word	0x4002640f
 80029c8:	40026000 	.word	0x40026000
 80029cc:	40026400 	.word	0x40026400

080029d0 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a10      	ldr	r2, [pc, #64]	; (8002a20 <DMA_ClearFlag+0x50>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d802      	bhi.n	80029e8 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80029e2:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <DMA_ClearFlag+0x54>)
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	e001      	b.n	80029ec <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80029e8:	4b0f      	ldr	r3, [pc, #60]	; (8002a28 <DMA_ClearFlag+0x58>)
 80029ea:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d007      	beq.n	8002a06 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80029fc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8002a04:	e006      	b.n	8002a14 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002a0c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	6093      	str	r3, [r2, #8]
}
 8002a14:	bf00      	nop
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	4002640f 	.word	0x4002640f
 8002a24:	40026000 	.word	0x40026000
 8002a28:	40026400 	.word	0x40026400

08002a2c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8002a36:	2300      	movs	r3, #0
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	e076      	b.n	8002b36 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002a48:	2201      	movs	r2, #1
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d165      	bne.n	8002b30 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	2103      	movs	r1, #3
 8002a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a72:	43db      	mvns	r3, r3
 8002a74:	401a      	ands	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	791b      	ldrb	r3, [r3, #4]
 8002a82:	4619      	mov	r1, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	791b      	ldrb	r3, [r3, #4]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d003      	beq.n	8002aa2 <GPIO_Init+0x76>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	791b      	ldrb	r3, [r3, #4]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d12e      	bne.n	8002b00 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	2103      	movs	r1, #3
 8002aac:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	401a      	ands	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	795b      	ldrb	r3, [r3, #5]
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	4619      	mov	r1, r3
 8002ada:	2301      	movs	r3, #1
 8002adc:	408b      	lsls	r3, r1
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	401a      	ands	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	7992      	ldrb	r2, [r2, #6]
 8002aee:	4611      	mov	r1, r2
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	b292      	uxth	r2, r2
 8002af4:	fa01 f202 	lsl.w	r2, r1, r2
 8002af8:	b292      	uxth	r2, r2
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	2103      	movs	r1, #3
 8002b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	401a      	ands	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	79db      	ldrb	r3, [r3, #7]
 8002b20:	4619      	mov	r1, r3
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	3301      	adds	r3, #1
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2b0f      	cmp	r3, #15
 8002b3a:	d985      	bls.n	8002a48 <GPIO_Init+0x1c>
    }
  }
}
 8002b3c:	bf00      	nop
 8002b3e:	371c      	adds	r7, #28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	71da      	strb	r2, [r3, #7]
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	807b      	strh	r3, [r7, #2]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8002b94:	787a      	ldrb	r2, [r7, #1]
 8002b96:	887b      	ldrh	r3, [r7, #2]
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8002ba4:	887b      	ldrh	r3, [r7, #2]
 8002ba6:	08db      	lsrs	r3, r3, #3
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	4618      	mov	r0, r3
 8002bac:	887b      	ldrh	r3, [r7, #2]
 8002bae:	08db      	lsrs	r3, r3, #3
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3208      	adds	r2, #8
 8002bb8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002bbc:	887b      	ldrh	r3, [r7, #2]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	210f      	movs	r1, #15
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	ea02 0103 	and.w	r1, r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f100 0208 	add.w	r2, r0, #8
 8002bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8002bda:	887b      	ldrh	r3, [r7, #2]
 8002bdc:	08db      	lsrs	r3, r3, #3
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	461a      	mov	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	3208      	adds	r2, #8
 8002be6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8002bf0:	887b      	ldrh	r3, [r7, #2]
 8002bf2:	08db      	lsrs	r3, r3, #3
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3208      	adds	r2, #8
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002c02:	bf00      	nop
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
	...

08002c10 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002c1c:	78fb      	ldrb	r3, [r7, #3]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d006      	beq.n	8002c30 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8002c22:	490a      	ldr	r1, [pc, #40]	; (8002c4c <RCC_AHB1PeriphClockCmd+0x3c>)
 8002c24:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <RCC_AHB1PeriphClockCmd+0x3c>)
 8002c26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8002c2e:	e006      	b.n	8002c3e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8002c30:	4906      	ldr	r1, [pc, #24]	; (8002c4c <RCC_AHB1PeriphClockCmd+0x3c>)
 8002c32:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <RCC_AHB1PeriphClockCmd+0x3c>)
 8002c34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	630b      	str	r3, [r1, #48]	; 0x30
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40023800 	.word	0x40023800

08002c50 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002c5c:	78fb      	ldrb	r3, [r7, #3]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d006      	beq.n	8002c70 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8002c62:	490a      	ldr	r1, [pc, #40]	; (8002c8c <RCC_APB2PeriphClockCmd+0x3c>)
 8002c64:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <RCC_APB2PeriphClockCmd+0x3c>)
 8002c66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8002c6e:	e006      	b.n	8002c7e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002c70:	4906      	ldr	r1, [pc, #24]	; (8002c8c <RCC_APB2PeriphClockCmd+0x3c>)
 8002c72:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <RCC_APB2PeriphClockCmd+0x3c>)
 8002c74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	644b      	str	r3, [r1, #68]	; 0x44
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40023800 	.word	0x40023800

08002c90 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002c9c:	78fb      	ldrb	r3, [r7, #3]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d006      	beq.n	8002cb0 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8002ca2:	490a      	ldr	r1, [pc, #40]	; (8002ccc <RCC_APB2PeriphResetCmd+0x3c>)
 8002ca4:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <RCC_APB2PeriphResetCmd+0x3c>)
 8002ca6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8002cae:	e006      	b.n	8002cbe <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8002cb0:	4906      	ldr	r1, [pc, #24]	; (8002ccc <RCC_APB2PeriphResetCmd+0x3c>)
 8002cb2:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <RCC_APB2PeriphResetCmd+0x3c>)
 8002cb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	4013      	ands	r3, r2
 8002cbc:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40023800 	.word	0x40023800

08002cd0 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8002ce4:	89fb      	ldrh	r3, [r7, #14]
 8002ce6:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8002cea:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	881a      	ldrh	r2, [r3, #0]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	885b      	ldrh	r3, [r3, #2]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002d04:	4313      	orrs	r3, r2
 8002d06:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002d14:	4313      	orrs	r3, r2
 8002d16:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002d24:	4313      	orrs	r3, r2
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	89fb      	ldrh	r3, [r7, #14]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	89fa      	ldrh	r2, [r7, #14]
 8002d32:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	8b9b      	ldrh	r3, [r3, #28]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	8a1a      	ldrh	r2, [r3, #16]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	821a      	strh	r2, [r3, #16]
}
 8002d4c:	bf00      	nop
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2207      	movs	r2, #7
 8002d94:	821a      	strh	r2, [r3, #16]
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	460b      	mov	r3, r1
 8002dac:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002dae:	78fb      	ldrb	r3, [r7, #3]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8002dc4:	e007      	b.n	8002dd6 <SPI_Cmd+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	881b      	ldrh	r3, [r3, #0]
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	801a      	strh	r2, [r3, #0]
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	460b      	mov	r3, r1
 8002dec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	887a      	ldrh	r2, [r7, #2]
 8002df2:	819a      	strh	r2, [r3, #12]
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	891b      	ldrh	r3, [r3, #8]
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	887b      	ldrh	r3, [r7, #2]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
 8002e24:	e001      	b.n	8002e2a <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8002e26:	2300      	movs	r3, #0
 8002e28:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a29      	ldr	r2, [pc, #164]	; (8002ef4 <TIM_TimeBaseInit+0xbc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d013      	beq.n	8002e7c <TIM_TimeBaseInit+0x44>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a28      	ldr	r2, [pc, #160]	; (8002ef8 <TIM_TimeBaseInit+0xc0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d00f      	beq.n	8002e7c <TIM_TimeBaseInit+0x44>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e62:	d00b      	beq.n	8002e7c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a25      	ldr	r2, [pc, #148]	; (8002efc <TIM_TimeBaseInit+0xc4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d007      	beq.n	8002e7c <TIM_TimeBaseInit+0x44>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a24      	ldr	r2, [pc, #144]	; (8002f00 <TIM_TimeBaseInit+0xc8>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d003      	beq.n	8002e7c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a23      	ldr	r2, [pc, #140]	; (8002f04 <TIM_TimeBaseInit+0xcc>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d108      	bne.n	8002e8e <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8002e7c:	89fb      	ldrh	r3, [r7, #14]
 8002e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e82:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	885a      	ldrh	r2, [r3, #2]
 8002e88:	89fb      	ldrh	r3, [r7, #14]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a1d      	ldr	r2, [pc, #116]	; (8002f08 <TIM_TimeBaseInit+0xd0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d00c      	beq.n	8002eb0 <TIM_TimeBaseInit+0x78>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a1c      	ldr	r2, [pc, #112]	; (8002f0c <TIM_TimeBaseInit+0xd4>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d008      	beq.n	8002eb0 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8002e9e:	89fb      	ldrh	r3, [r7, #14]
 8002ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ea4:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	891a      	ldrh	r2, [r3, #8]
 8002eaa:	89fb      	ldrh	r3, [r7, #14]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	89fa      	ldrh	r2, [r7, #14]
 8002eb4:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	881a      	ldrh	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a0a      	ldr	r2, [pc, #40]	; (8002ef4 <TIM_TimeBaseInit+0xbc>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d003      	beq.n	8002ed6 <TIM_TimeBaseInit+0x9e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a09      	ldr	r2, [pc, #36]	; (8002ef8 <TIM_TimeBaseInit+0xc0>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d104      	bne.n	8002ee0 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	7a9b      	ldrb	r3, [r3, #10]
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	829a      	strh	r2, [r3, #20]
}
 8002ee6:	bf00      	nop
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	40010000 	.word	0x40010000
 8002ef8:	40010400 	.word	0x40010400
 8002efc:	40000400 	.word	0x40000400
 8002f00:	40000800 	.word	0x40000800
 8002f04:	40000c00 	.word	0x40000c00
 8002f08:	40001000 	.word	0x40001000
 8002f0c:	40001400 	.word	0x40001400

08002f10 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002f1c:	78fb      	ldrb	r3, [r7, #3]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d008      	beq.n	8002f34 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8002f32:	e007      	b.n	8002f44 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	f023 0301 	bic.w	r3, r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	801a      	strh	r2, [r3, #0]
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	817b      	strh	r3, [r7, #10]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	81fb      	strh	r3, [r7, #14]
 8002f62:	2300      	movs	r3, #0
 8002f64:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	8c1b      	ldrh	r3, [r3, #32]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	f023 0301 	bic.w	r3, r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	8c1b      	ldrh	r3, [r3, #32]
 8002f7a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	889b      	ldrh	r3, [r3, #4]
 8002f80:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	8b1b      	ldrh	r3, [r3, #24]
 8002f86:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 8002f88:	897b      	ldrh	r3, [r7, #10]
 8002f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8002f90:	897b      	ldrh	r3, [r7, #10]
 8002f92:	f023 0303 	bic.w	r3, r3, #3
 8002f96:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	881a      	ldrh	r2, [r3, #0]
 8002f9c:	897b      	ldrh	r3, [r7, #10]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8002fa2:	89fb      	ldrh	r3, [r7, #14]
 8002fa4:	f023 0302 	bic.w	r3, r3, #2
 8002fa8:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	899a      	ldrh	r2, [r3, #12]
 8002fae:	89fb      	ldrh	r3, [r7, #14]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	885a      	ldrh	r2, [r3, #2]
 8002fb8:	89fb      	ldrh	r3, [r7, #14]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a1e      	ldr	r2, [pc, #120]	; (800303c <TIM_OC1Init+0xec>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d003      	beq.n	8002fce <TIM_OC1Init+0x7e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a1d      	ldr	r2, [pc, #116]	; (8003040 <TIM_OC1Init+0xf0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d123      	bne.n	8003016 <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8002fce:	89fb      	ldrh	r3, [r7, #14]
 8002fd0:	f023 0308 	bic.w	r3, r3, #8
 8002fd4:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	89da      	ldrh	r2, [r3, #14]
 8002fda:	89fb      	ldrh	r3, [r7, #14]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8002fe0:	89fb      	ldrh	r3, [r7, #14]
 8002fe2:	f023 0304 	bic.w	r3, r3, #4
 8002fe6:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	889a      	ldrh	r2, [r3, #4]
 8002fec:	89fb      	ldrh	r3, [r7, #14]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 8002ff2:	89bb      	ldrh	r3, [r7, #12]
 8002ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ff8:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8002ffa:	89bb      	ldrh	r3, [r7, #12]
 8002ffc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003000:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	8a1a      	ldrh	r2, [r3, #16]
 8003006:	89bb      	ldrh	r3, [r7, #12]
 8003008:	4313      	orrs	r3, r2
 800300a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	8a5a      	ldrh	r2, [r3, #18]
 8003010:	89bb      	ldrh	r3, [r7, #12]
 8003012:	4313      	orrs	r3, r2
 8003014:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	89ba      	ldrh	r2, [r7, #12]
 800301a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	897a      	ldrh	r2, [r7, #10]
 8003020:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	89fa      	ldrh	r2, [r7, #14]
 800302e:	841a      	strh	r2, [r3, #32]
}
 8003030:	bf00      	nop
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	40010000 	.word	0x40010000
 8003040:	40010400 	.word	0x40010400

08003044 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8003050:	2300      	movs	r3, #0
 8003052:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	8b1b      	ldrh	r3, [r3, #24]
 8003058:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 800305a:	89fb      	ldrh	r3, [r7, #14]
 800305c:	f023 0308 	bic.w	r3, r3, #8
 8003060:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8003062:	89fa      	ldrh	r2, [r7, #14]
 8003064:	887b      	ldrh	r3, [r7, #2]
 8003066:	4313      	orrs	r3, r2
 8003068:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	89fa      	ldrh	r2, [r7, #14]
 800306e:	831a      	strh	r2, [r3, #24]
}
 8003070:	bf00      	nop
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8003080:	4b38      	ldr	r3, [pc, #224]	; (8003164 <Audio_MAL_IRQHandler+0xe8>)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	4b38      	ldr	r3, [pc, #224]	; (8003168 <Audio_MAL_IRQHandler+0xec>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4619      	mov	r1, r3
 800308a:	4610      	mov	r0, r2
 800308c:	f7ff fc64 	bl	8002958 <DMA_GetFlagStatus>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d064      	beq.n	8003160 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8003096:	4b35      	ldr	r3, [pc, #212]	; (800316c <Audio_MAL_IRQHandler+0xf0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d04c      	beq.n	8003138 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 800309e:	bf00      	nop
 80030a0:	4b30      	ldr	r3, [pc, #192]	; (8003164 <Audio_MAL_IRQHandler+0xe8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff fc3f 	bl	8002928 <DMA_GetCmdStatus>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1f7      	bne.n	80030a0 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 80030b0:	4b2c      	ldr	r3, [pc, #176]	; (8003164 <Audio_MAL_IRQHandler+0xe8>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4b2c      	ldr	r3, [pc, #176]	; (8003168 <Audio_MAL_IRQHandler+0xec>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4619      	mov	r1, r3
 80030ba:	4610      	mov	r0, r2
 80030bc:	f7ff fc88 	bl	80029d0 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 80030c0:	4b2b      	ldr	r3, [pc, #172]	; (8003170 <Audio_MAL_IRQHandler+0xf4>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	461a      	mov	r2, r3
 80030c6:	4b2b      	ldr	r3, [pc, #172]	; (8003174 <Audio_MAL_IRQHandler+0xf8>)
 80030c8:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 80030ca:	4b28      	ldr	r3, [pc, #160]	; (800316c <Audio_MAL_IRQHandler+0xf0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030d2:	4293      	cmp	r3, r2
 80030d4:	bf28      	it	cs
 80030d6:	4613      	movcs	r3, r2
 80030d8:	4a26      	ldr	r2, [pc, #152]	; (8003174 <Audio_MAL_IRQHandler+0xf8>)
 80030da:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 80030dc:	4b21      	ldr	r3, [pc, #132]	; (8003164 <Audio_MAL_IRQHandler+0xe8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4924      	ldr	r1, [pc, #144]	; (8003174 <Audio_MAL_IRQHandler+0xf8>)
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff fbac 	bl	8002840 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 80030e8:	4b1e      	ldr	r3, [pc, #120]	; (8003164 <Audio_MAL_IRQHandler+0xe8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2101      	movs	r1, #1
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff fbfe 	bl	80028f0 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 80030f4:	4b1e      	ldr	r3, [pc, #120]	; (8003170 <Audio_MAL_IRQHandler+0xf4>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	4b1c      	ldr	r3, [pc, #112]	; (800316c <Audio_MAL_IRQHandler+0xf0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003100:	d203      	bcs.n	800310a <Audio_MAL_IRQHandler+0x8e>
 8003102:	4b1a      	ldr	r3, [pc, #104]	; (800316c <Audio_MAL_IRQHandler+0xf0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	e000      	b.n	800310c <Audio_MAL_IRQHandler+0x90>
 800310a:	4b1b      	ldr	r3, [pc, #108]	; (8003178 <Audio_MAL_IRQHandler+0xfc>)
 800310c:	4413      	add	r3, r2
 800310e:	4a18      	ldr	r2, [pc, #96]	; (8003170 <Audio_MAL_IRQHandler+0xf4>)
 8003110:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8003112:	4b16      	ldr	r3, [pc, #88]	; (800316c <Audio_MAL_IRQHandler+0xf0>)
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	4b15      	ldr	r3, [pc, #84]	; (800316c <Audio_MAL_IRQHandler+0xf0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800311e:	428b      	cmp	r3, r1
 8003120:	bf28      	it	cs
 8003122:	460b      	movcs	r3, r1
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	4a11      	ldr	r2, [pc, #68]	; (800316c <Audio_MAL_IRQHandler+0xf0>)
 8003128:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 800312a:	4b0e      	ldr	r3, [pc, #56]	; (8003164 <Audio_MAL_IRQHandler+0xe8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2101      	movs	r1, #1
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff fbdd 	bl	80028f0 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8003136:	e013      	b.n	8003160 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8003138:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <Audio_MAL_IRQHandler+0xe8>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2100      	movs	r1, #0
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff fbd6 	bl	80028f0 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8003144:	4b07      	ldr	r3, [pc, #28]	; (8003164 <Audio_MAL_IRQHandler+0xe8>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4b07      	ldr	r3, [pc, #28]	; (8003168 <Audio_MAL_IRQHandler+0xec>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4619      	mov	r1, r3
 800314e:	4610      	mov	r0, r2
 8003150:	f7ff fc3e 	bl	80029d0 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8003154:	4b06      	ldr	r3, [pc, #24]	; (8003170 <Audio_MAL_IRQHandler+0xf4>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2100      	movs	r1, #0
 800315a:	4618      	mov	r0, r3
 800315c:	f000 f83c 	bl	80031d8 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8003160:	bf00      	nop
 8003162:	bd80      	pop	{r7, pc}
 8003164:	2000000c 	.word	0x2000000c
 8003168:	20000010 	.word	0x20000010
 800316c:	20000004 	.word	0x20000004
 8003170:	20001e44 	.word	0x20001e44
 8003174:	20001e84 	.word	0x20001e84
 8003178:	0001fffe 	.word	0x0001fffe

0800317c <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8003180:	f7ff ff7c 	bl	800307c <Audio_MAL_IRQHandler>
}
 8003184:	bf00      	nop
 8003186:	bd80      	pop	{r7, pc}

08003188 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 800318c:	f7ff ff76 	bl	800307c <Audio_MAL_IRQHandler>
}
 8003190:	bf00      	nop
 8003192:	bd80      	pop	{r7, pc}

08003194 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8003198:	2102      	movs	r1, #2
 800319a:	480d      	ldr	r0, [pc, #52]	; (80031d0 <SPI3_IRQHandler+0x3c>)
 800319c:	f7ff fe30 	bl	8002e00 <SPI_I2S_GetFlagStatus>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d011      	beq.n	80031ca <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 80031a6:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <SPI3_IRQHandler+0x40>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d106      	bne.n	80031bc <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 80031ae:	f000 f81e 	bl	80031ee <EVAL_AUDIO_GetSampleCallBack>
 80031b2:	4603      	mov	r3, r0
 80031b4:	4619      	mov	r1, r3
 80031b6:	2004      	movs	r0, #4
 80031b8:	f7ff fb26 	bl	8002808 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 80031bc:	f000 f817 	bl	80031ee <EVAL_AUDIO_GetSampleCallBack>
 80031c0:	4603      	mov	r3, r0
 80031c2:	4619      	mov	r1, r3
 80031c4:	4802      	ldr	r0, [pc, #8]	; (80031d0 <SPI3_IRQHandler+0x3c>)
 80031c6:	f7ff fe0c 	bl	8002de2 <SPI_I2S_SendData>
  }
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40003c00 	.word	0x40003c00
 80031d4:	20000008 	.word	0x20000008

080031d8 <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 80031e2:	bf00      	nop
}
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <EVAL_AUDIO_GetSampleCallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 80031ee:	b480      	push	{r7}
 80031f0:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return 0;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
	...

08003200 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003210:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <NVIC_SetPriorityGrouping+0x44>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800321c:	4013      	ands	r3, r2
 800321e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 8003228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800322c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003232:	4a04      	ldr	r2, [pc, #16]	; (8003244 <NVIC_SetPriorityGrouping+0x44>)
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	60d3      	str	r3, [r2, #12]
}
 8003238:	bf00      	nop
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <main>:
 */
static xSemaphoreHandle xEventSemaphore = NULL;
/*-----------------------------------------------------------*/

int main(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af02      	add	r7, sp, #8
	/* Configure the system ready to run the demo.  The clock configuration
	can be done here if it was not done before main() was called. */
	prvSetupHardware();
 800324e:	f000 f9d7 	bl	8003600 <prvSetupHardware>

	/* Create the queue used by the queue send and queue receive tasks.
	http://www.freertos.org/a00116.html */
	xQueue = xQueueCreate( 	mainQUEUE_LENGTH,		/* The number of items the queue can hold. */
 8003252:	2200      	movs	r2, #0
 8003254:	2104      	movs	r1, #4
 8003256:	2001      	movs	r0, #1
 8003258:	f7fd fb48 	bl	80008ec <xQueueGenericCreate>
 800325c:	4602      	mov	r2, r0
 800325e:	4b34      	ldr	r3, [pc, #208]	; (8003330 <main+0xe8>)
 8003260:	601a      	str	r2, [r3, #0]
							sizeof( uint32_t ) );	/* The size of each item the queue holds. */
	/* Add to the registry, for the benefit of kernel aware debugging. */
	vQueueAddToRegistry( xQueue, "MainQueue" );
 8003262:	4b33      	ldr	r3, [pc, #204]	; (8003330 <main+0xe8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4933      	ldr	r1, [pc, #204]	; (8003334 <main+0xec>)
 8003268:	4618      	mov	r0, r3
 800326a:	f7fd ff47 	bl	80010fc <vQueueAddToRegistry>

	xFlowQueue = xQueueCreate( 	mainQUEUE_LENGTH,		/* The number of items the queue can hold. */
 800326e:	2200      	movs	r2, #0
 8003270:	2104      	movs	r1, #4
 8003272:	2001      	movs	r0, #1
 8003274:	f7fd fb3a 	bl	80008ec <xQueueGenericCreate>
 8003278:	4602      	mov	r2, r0
 800327a:	4b2f      	ldr	r3, [pc, #188]	; (8003338 <main+0xf0>)
 800327c:	601a      	str	r2, [r3, #0]
							sizeof( uint32_t ) );	/* The size of each item the queue holds. */
	vQueueAddToRegistry( xFlowQueue, "FlowQueue" );
 800327e:	4b2e      	ldr	r3, [pc, #184]	; (8003338 <main+0xf0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	492e      	ldr	r1, [pc, #184]	; (800333c <main+0xf4>)
 8003284:	4618      	mov	r0, r3
 8003286:	f7fd ff39 	bl	80010fc <vQueueAddToRegistry>

	BoardStateQueue = xQueueCreate( 	mainQUEUE_LENGTH,		/* The number of items the queue can hold. */
 800328a:	2200      	movs	r2, #0
 800328c:	2104      	movs	r1, #4
 800328e:	2001      	movs	r0, #1
 8003290:	f7fd fb2c 	bl	80008ec <xQueueGenericCreate>
 8003294:	4602      	mov	r2, r0
 8003296:	4b2a      	ldr	r3, [pc, #168]	; (8003340 <main+0xf8>)
 8003298:	601a      	str	r2, [r3, #0]
							sizeof( uint32_t ) );	/* The size of each item the queue holds. */
	vQueueAddToRegistry( BoardStateQueue, "BoardStateQueue" );
 800329a:	4b29      	ldr	r3, [pc, #164]	; (8003340 <main+0xf8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4929      	ldr	r1, [pc, #164]	; (8003344 <main+0xfc>)
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fd ff2b 	bl	80010fc <vQueueAddToRegistry>

	/* Create the semaphore used by the FreeRTOS tick hook function and the
	event semaphore task. */
	vSemaphoreCreateBinary( xEventSemaphore );
 80032a6:	2203      	movs	r2, #3
 80032a8:	2100      	movs	r1, #0
 80032aa:	2001      	movs	r0, #1
 80032ac:	f7fd fb1e 	bl	80008ec <xQueueGenericCreate>
 80032b0:	4602      	mov	r2, r0
 80032b2:	4b25      	ldr	r3, [pc, #148]	; (8003348 <main+0x100>)
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	4b24      	ldr	r3, [pc, #144]	; (8003348 <main+0x100>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d006      	beq.n	80032cc <main+0x84>
 80032be:	4b22      	ldr	r3, [pc, #136]	; (8003348 <main+0x100>)
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	2300      	movs	r3, #0
 80032c4:	2200      	movs	r2, #0
 80032c6:	2100      	movs	r1, #0
 80032c8:	f7fd fb68 	bl	800099c <xQueueGenericSend>
	/* Add to the registry, for the benefit of kernel aware debugging. */
	vQueueAddToRegistry( xEventSemaphore, "xEventSemaphore" );
 80032cc:	4b1e      	ldr	r3, [pc, #120]	; (8003348 <main+0x100>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	491e      	ldr	r1, [pc, #120]	; (800334c <main+0x104>)
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd ff12 	bl	80010fc <vQueueAddToRegistry>

	/* Create the queue receive task as described in the comments at the top
	of this	file.  http://www.freertos.org/a00125.html */
	xTaskCreate( 	traffic_generator_task,			/* The function that implements the task. */
 80032d8:	2300      	movs	r3, #0
 80032da:	9301      	str	r3, [sp, #4]
 80032dc:	2302      	movs	r3, #2
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	2300      	movs	r3, #0
 80032e2:	2282      	movs	r2, #130	; 0x82
 80032e4:	491a      	ldr	r1, [pc, #104]	; (8003350 <main+0x108>)
 80032e6:	481b      	ldr	r0, [pc, #108]	; (8003354 <main+0x10c>)
 80032e8:	f7fd ff64 	bl	80011b4 <xTaskCreate>
					NULL );							/* Used to obtain a handle to the created task.  Not used in this simple demo, so set to NULL. */


	/* Create the queue send task in exactly the same way.  Again, this is
	described in the comments at the top of the file. */
	xTaskCreate( 	pot_read_task,
 80032ec:	2300      	movs	r3, #0
 80032ee:	9301      	str	r3, [sp, #4]
 80032f0:	2301      	movs	r3, #1
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	2300      	movs	r3, #0
 80032f6:	2282      	movs	r2, #130	; 0x82
 80032f8:	4917      	ldr	r1, [pc, #92]	; (8003358 <main+0x110>)
 80032fa:	4818      	ldr	r0, [pc, #96]	; (800335c <main+0x114>)
 80032fc:	f7fd ff5a 	bl	80011b4 <xTaskCreate>
					mainQUEUE_SEND_TASK_PRIORITY,
					NULL );

	/* Create the queue send task in exactly the same way.  Again, this is
	described in the comments at the top of the file. */
	xTaskCreate( 	traffic_light_state_task,
 8003300:	2300      	movs	r3, #0
 8003302:	9301      	str	r3, [sp, #4]
 8003304:	2301      	movs	r3, #1
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	2300      	movs	r3, #0
 800330a:	2282      	movs	r2, #130	; 0x82
 800330c:	4914      	ldr	r1, [pc, #80]	; (8003360 <main+0x118>)
 800330e:	4815      	ldr	r0, [pc, #84]	; (8003364 <main+0x11c>)
 8003310:	f7fd ff50 	bl	80011b4 <xTaskCreate>
					mainQUEUE_SEND_TASK_PRIORITY,
					NULL );

	/* Create the queue send task in exactly the same way.  Again, this is
	described in the comments at the top of the file. */
	xTaskCreate( 	led_display_task,
 8003314:	2300      	movs	r3, #0
 8003316:	9301      	str	r3, [sp, #4]
 8003318:	2301      	movs	r3, #1
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	2300      	movs	r3, #0
 800331e:	2282      	movs	r2, #130	; 0x82
 8003320:	4911      	ldr	r1, [pc, #68]	; (8003368 <main+0x120>)
 8003322:	4812      	ldr	r0, [pc, #72]	; (800336c <main+0x124>)
 8003324:	f7fd ff46 	bl	80011b4 <xTaskCreate>
					NULL,
					mainQUEUE_SEND_TASK_PRIORITY,
					NULL );

	/* Start the tasks and timer running. */
	vTaskStartScheduler();
 8003328:	f7fe f8a2 	bl	8001470 <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details.  http://www.freertos.org/a00111.html */
	for( ;; );
 800332c:	e7fe      	b.n	800332c <main+0xe4>
 800332e:	bf00      	nop
 8003330:	20001de8 	.word	0x20001de8
 8003334:	08004a08 	.word	0x08004a08
 8003338:	20001dec 	.word	0x20001dec
 800333c:	08004a14 	.word	0x08004a14
 8003340:	20001df0 	.word	0x20001df0
 8003344:	08004a20 	.word	0x08004a20
 8003348:	20001df4 	.word	0x20001df4
 800334c:	08004a30 	.word	0x08004a30
 8003350:	08004a40 	.word	0x08004a40
 8003354:	08003435 	.word	0x08003435
 8003358:	08004a54 	.word	0x08004a54
 800335c:	080033d5 	.word	0x080033d5
 8003360:	08004a64 	.word	0x08004a64
 8003364:	08003519 	.word	0x08003519
 8003368:	08004a78 	.word	0x08004a78
 800336c:	08003371 	.word	0x08003371

08003370 <led_display_task>:
}
/*-----------------------------------------------------------*/

static void led_display_task( void *pvParameters ){
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]

	uint32_t board_state = 0;
 8003378:	2300      	movs	r3, #0
 800337a:	60bb      	str	r3, [r7, #8]

	for( ;; ){
		vTaskDelay(500);
 800337c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003380:	f7fe f842 	bl	8001408 <vTaskDelay>
		Set_PD7();
 8003384:	f000 fa72 	bl	800386c <Set_PD7>
		xQueueReceive( BoardStateQueue, &board_state, portMAX_DELAY);
 8003388:	4b11      	ldr	r3, [pc, #68]	; (80033d0 <led_display_task+0x60>)
 800338a:	6818      	ldr	r0, [r3, #0]
 800338c:	f107 0108 	add.w	r1, r7, #8
 8003390:	2300      	movs	r3, #0
 8003392:	f04f 32ff 	mov.w	r2, #4294967295
 8003396:	f7fd fc8f 	bl	8000cb8 <xQueueGenericReceive>
		//we only want the first 4 bits of the board upper
		uint16_t board_upper_bottom = (board_state & 0xFFFF0000) >> 16;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	0c1b      	lsrs	r3, r3, #16
 800339e:	81fb      	strh	r3, [r7, #14]
		//board lower consists of the important 16 bits
		uint16_t board_lower = board_state & 0xFFFF;
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	81bb      	strh	r3, [r7, #12]
		SPI_Bus_tx(board_upper_bottom);
 80033a4:	89fb      	ldrh	r3, [r7, #14]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fa70 	bl	800388c <SPI_Bus_tx>
		vTaskDelay(5);
 80033ac:	2005      	movs	r0, #5
 80033ae:	f7fe f82b 	bl	8001408 <vTaskDelay>
		SPI_Bus_tx(board_lower);
 80033b2:	89bb      	ldrh	r3, [r7, #12]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fa69 	bl	800388c <SPI_Bus_tx>

		xQueueSend( BoardStateQueue, &board_state, portMAX_DELAY);
 80033ba:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <led_display_task+0x60>)
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	f107 0108 	add.w	r1, r7, #8
 80033c2:	2300      	movs	r3, #0
 80033c4:	f04f 32ff 	mov.w	r2, #4294967295
 80033c8:	f7fd fae8 	bl	800099c <xQueueGenericSend>
	for( ;; ){
 80033cc:	e7d6      	b.n	800337c <led_display_task+0xc>
 80033ce:	bf00      	nop
 80033d0:	20001df0 	.word	0x20001df0

080033d4 <pot_read_task>:
	// Basically, we are assuming the highway is 32 cars long, but
	// we are only looking at the first 19 cars.
}

static void pot_read_task( void *pvParameters )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
//		write_LED();
		/* Place this task in the blocked state until it is time to run again.
		The block time is specified in ticks, the constant used converts ticks
		to ms.  While in the Blocked state this task will not consume any CPU
		time.  http://www.freertos.org/vtaskdelayuntil.html */
		vTaskDelay(250);
 80033dc:	20fa      	movs	r0, #250	; 0xfa
 80033de:	f7fe f813 	bl	8001408 <vTaskDelay>

		//uint32_t adc_val = read_adc();
		//adv_val = (adc_max - adc_val)/(adc_val) --> generate relative value
		uint32_t adc_val = 3; //med-low traffic.
 80033e2:	2303      	movs	r3, #3
 80033e4:	60fb      	str	r3, [r7, #12]

		/* Send to the queue - causing the queue receive task to unblock and
		increment its counter.  0 is used as the block time so the sending
		operation will not block - it shouldn't need to block as the queue
		should always be empty at this point in the code. */
		xQueueSend( xQueue, &adc_val, 0 );
 80033e6:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <pot_read_task+0x24>)
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	f107 010c 	add.w	r1, r7, #12
 80033ee:	2300      	movs	r3, #0
 80033f0:	2200      	movs	r2, #0
 80033f2:	f7fd fad3 	bl	800099c <xQueueGenericSend>
	{
 80033f6:	e7f1      	b.n	80033dc <pot_read_task+0x8>
 80033f8:	20001de8 	.word	0x20001de8

080033fc <display_lights>:
	}
}

char display_lights(uint32_t lights){
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
	//debugging purposes//
	switch(lights){
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800340a:	d00a      	beq.n	8003422 <display_lights+0x26>
 800340c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003410:	d003      	beq.n	800341a <display_lights+0x1e>
 8003412:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003416:	d002      	beq.n	800341e <display_lights+0x22>
 8003418:	e005      	b.n	8003426 <display_lights+0x2a>
		case green:
			return 'g';
 800341a:	2367      	movs	r3, #103	; 0x67
 800341c:	e004      	b.n	8003428 <display_lights+0x2c>
		case red:
			return 'r';
 800341e:	2372      	movs	r3, #114	; 0x72
 8003420:	e002      	b.n	8003428 <display_lights+0x2c>
		case yellow:
			return 'y';
 8003422:	2379      	movs	r3, #121	; 0x79
 8003424:	e000      	b.n	8003428 <display_lights+0x2c>
		default:
			return '?';
 8003426:	233f      	movs	r3, #63	; 0x3f
	}
}
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <traffic_generator_task>:

static void traffic_generator_task( void *pvParameters )
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
	uint32_t traffic_val = 3;
 800343c:	2303      	movs	r3, #3
 800343e:	613b      	str	r3, [r7, #16]
	uint32_t flow_value = 0;
 8003440:	2300      	movs	r3, #0
 8003442:	60fb      	str	r3, [r7, #12]
	uint32_t board_state = red;
 8003444:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003448:	60bb      	str	r3, [r7, #8]
	uint32_t lights = red;
 800344a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800344e:	61fb      	str	r3, [r7, #28]
	xQueueSend( BoardStateQueue, &board_state, 0);
 8003450:	4b2d      	ldr	r3, [pc, #180]	; (8003508 <traffic_generator_task+0xd4>)
 8003452:	6818      	ldr	r0, [r3, #0]
 8003454:	f107 0108 	add.w	r1, r7, #8
 8003458:	2300      	movs	r3, #0
 800345a:	2200      	movs	r2, #0
 800345c:	f7fd fa9e 	bl	800099c <xQueueGenericSend>

	for( ;; )
	{
		vTaskDelay(250);
 8003460:	20fa      	movs	r0, #250	; 0xfa
 8003462:	f7fd ffd1 	bl	8001408 <vTaskDelay>
		/* Wait until something arrives in the queue - this task will block
		indefinitely provided INCLUDE_vTaskSuspend is set to 1 in
		FreeRTOSConfig.h.  http://www.freertos.org/a00118.html */
		xQueueReceive( xQueue, &traffic_val, 0);
 8003466:	4b29      	ldr	r3, [pc, #164]	; (800350c <traffic_generator_task+0xd8>)
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	f107 0110 	add.w	r1, r7, #16
 800346e:	2300      	movs	r3, #0
 8003470:	2200      	movs	r2, #0
 8003472:	f7fd fc21 	bl	8000cb8 <xQueueGenericReceive>
		xQueueReceive( xFlowQueue, &flow_value, 0);
 8003476:	4b26      	ldr	r3, [pc, #152]	; (8003510 <traffic_generator_task+0xdc>)
 8003478:	6818      	ldr	r0, [r3, #0]
 800347a:	f107 010c 	add.w	r1, r7, #12
 800347e:	2300      	movs	r3, #0
 8003480:	2200      	movs	r2, #0
 8003482:	f7fd fc19 	bl	8000cb8 <xQueueGenericReceive>

		//Traffic value pulled off the queue, which is the value of the potentiometer.
		xQueueReceive( BoardStateQueue, &board_state, portMAX_DELAY);
 8003486:	4b20      	ldr	r3, [pc, #128]	; (8003508 <traffic_generator_task+0xd4>)
 8003488:	6818      	ldr	r0, [r3, #0]
 800348a:	f107 0108 	add.w	r1, r7, #8
 800348e:	2300      	movs	r3, #0
 8003490:	f04f 32ff 	mov.w	r2, #4294967295
 8003494:	f7fd fc10 	bl	8000cb8 <xQueueGenericReceive>
		uint32_t traffic = generate_traffic(traffic_val, board_state);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	4611      	mov	r1, r2
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fa1a 	bl	80038d8 <generate_traffic>
 80034a4:	61b8      	str	r0, [r7, #24]

		lights = board_state & light_state;
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 80034ac:	61fb      	str	r3, [r7, #28]
		char lights_value = display_lights(lights);
 80034ae:	69f8      	ldr	r0, [r7, #28]
 80034b0:	f7ff ffa4 	bl	80033fc <display_lights>
 80034b4:	4603      	mov	r3, r0
 80034b6:	75fb      	strb	r3, [r7, #23]

		board_state = (lights) | traffic;
 80034b8:	69fa      	ldr	r2, [r7, #28]
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	4313      	orrs	r3, r2
 80034be:	60bb      	str	r3, [r7, #8]

		if(traffic & 1){
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <traffic_generator_task+0x9e>
			//new car, increment flow.
			flow_value++;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	3301      	adds	r3, #1
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	e002      	b.n	80034d8 <traffic_generator_task+0xa4>
		}else{
			flow_value--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	3b01      	subs	r3, #1
 80034d6:	60fb      	str	r3, [r7, #12]
		}

		printf("Lights: %c Flow: %lu Traffic: %lu\n", lights_value, flow_value, traffic);
 80034d8:	7df9      	ldrb	r1, [r7, #23]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	480d      	ldr	r0, [pc, #52]	; (8003514 <traffic_generator_task+0xe0>)
 80034e0:	f000 fd54 	bl	8003f8c <printf>

		//send flow value for traffic light state task and board state.
		xQueueSend( xFlowQueue, &flow_value, 0);
 80034e4:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <traffic_generator_task+0xdc>)
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	f107 010c 	add.w	r1, r7, #12
 80034ec:	2300      	movs	r3, #0
 80034ee:	2200      	movs	r2, #0
 80034f0:	f7fd fa54 	bl	800099c <xQueueGenericSend>
		xQueueSend( BoardStateQueue, &board_state, 0);
 80034f4:	4b04      	ldr	r3, [pc, #16]	; (8003508 <traffic_generator_task+0xd4>)
 80034f6:	6818      	ldr	r0, [r3, #0]
 80034f8:	f107 0108 	add.w	r1, r7, #8
 80034fc:	2300      	movs	r3, #0
 80034fe:	2200      	movs	r2, #0
 8003500:	f7fd fa4c 	bl	800099c <xQueueGenericSend>
	{
 8003504:	e7ac      	b.n	8003460 <traffic_generator_task+0x2c>
 8003506:	bf00      	nop
 8003508:	20001df0 	.word	0x20001df0
 800350c:	20001de8 	.word	0x20001de8
 8003510:	20001dec 	.word	0x20001dec
 8003514:	08004a88 	.word	0x08004a88

08003518 <traffic_light_state_task>:
	}
}

/*-----------------------------------------------------------*/
static void traffic_light_state_task( void *pvParameters )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
	uint32_t board_state = 0;
 8003520:	2300      	movs	r3, #0
 8003522:	60fb      	str	r3, [r7, #12]
	uint32_t current_light_state = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	61fb      	str	r3, [r7, #28]
	uint32_t flow_value = 0;
 8003528:	2300      	movs	r3, #0
 800352a:	60bb      	str	r3, [r7, #8]
	uint32_t default_delay = 2000;
 800352c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003530:	61bb      	str	r3, [r7, #24]

	int delay = 2000;
 8003532:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003536:	617b      	str	r3, [r7, #20]

	for( ;; )
	{
		vTaskDelay(delay);
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	4618      	mov	r0, r3
 800353c:	f7fd ff64 	bl	8001408 <vTaskDelay>
		xQueueReceive( BoardStateQueue, &board_state, portMAX_DELAY );
 8003540:	4b2c      	ldr	r3, [pc, #176]	; (80035f4 <traffic_light_state_task+0xdc>)
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	f107 010c 	add.w	r1, r7, #12
 8003548:	2300      	movs	r3, #0
 800354a:	f04f 32ff 	mov.w	r2, #4294967295
 800354e:	f7fd fbb3 	bl	8000cb8 <xQueueGenericReceive>
		xQueueReceive( xFlowQueue, &flow_value, 0 );
 8003552:	4b29      	ldr	r3, [pc, #164]	; (80035f8 <traffic_light_state_task+0xe0>)
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	f107 0108 	add.w	r1, r7, #8
 800355a:	2300      	movs	r3, #0
 800355c:	2200      	movs	r2, #0
 800355e:	f7fd fbab 	bl	8000cb8 <xQueueGenericReceive>
		current_light_state = board_state & light_state;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8003568:	61fb      	str	r3, [r7, #28]

		switch(current_light_state){
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003570:	d013      	beq.n	800359a <traffic_light_state_task+0x82>
 8003572:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003576:	d003      	beq.n	8003580 <traffic_light_state_task+0x68>
 8003578:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800357c:	d014      	beq.n	80035a8 <traffic_light_state_task+0x90>
 800357e:	e020      	b.n	80035c2 <traffic_light_state_task+0xaa>
			case green:
				current_light_state = yellow;
 8003580:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003584:	61fb      	str	r3, [r7, #28]
				vTaskDelay(delay + (flow_value*100));
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	2264      	movs	r2, #100	; 0x64
 800358a:	fb02 f203 	mul.w	r2, r2, r3
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	4413      	add	r3, r2
 8003592:	4618      	mov	r0, r3
 8003594:	f7fd ff38 	bl	8001408 <vTaskDelay>
				break;
 8003598:	e017      	b.n	80035ca <traffic_light_state_task+0xb2>
			case yellow:
				current_light_state = red;
 800359a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800359e:	61fb      	str	r3, [r7, #28]
				vTaskDelay(default_delay);
 80035a0:	69b8      	ldr	r0, [r7, #24]
 80035a2:	f7fd ff31 	bl	8001408 <vTaskDelay>
				break;
 80035a6:	e010      	b.n	80035ca <traffic_light_state_task+0xb2>
			case red:
				current_light_state = green;
 80035a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80035ac:	61fb      	str	r3, [r7, #28]
				vTaskDelay(delay - (flow_value*100));
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2164      	movs	r1, #100	; 0x64
 80035b4:	fb01 f303 	mul.w	r3, r1, r3
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fd ff24 	bl	8001408 <vTaskDelay>
				break;
 80035c0:	e003      	b.n	80035ca <traffic_light_state_task+0xb2>
			default:
				printf("error\n");
 80035c2:	480e      	ldr	r0, [pc, #56]	; (80035fc <traffic_light_state_task+0xe4>)
 80035c4:	f000 fdb8 	bl	8004138 <puts>
				break;
 80035c8:	bf00      	nop
		}

		board_state = (board_state & ALL_TRAFFIC) | current_light_state;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f3c3 0212 	ubfx	r2, r3, #0, #19
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]
		char light = display_lights(current_light_state);
 80035d6:	69f8      	ldr	r0, [r7, #28]
 80035d8:	f7ff ff10 	bl	80033fc <display_lights>
 80035dc:	4603      	mov	r3, r0
 80035de:	74fb      	strb	r3, [r7, #19]

		xQueueSend(BoardStateQueue, &board_state, portMAX_DELAY);
 80035e0:	4b04      	ldr	r3, [pc, #16]	; (80035f4 <traffic_light_state_task+0xdc>)
 80035e2:	6818      	ldr	r0, [r3, #0]
 80035e4:	f107 010c 	add.w	r1, r7, #12
 80035e8:	2300      	movs	r3, #0
 80035ea:	f04f 32ff 	mov.w	r2, #4294967295
 80035ee:	f7fd f9d5 	bl	800099c <xQueueGenericSend>
	{
 80035f2:	e7a1      	b.n	8003538 <traffic_light_state_task+0x20>
 80035f4:	20001df0 	.word	0x20001df0
 80035f8:	20001dec 	.word	0x20001dec
 80035fc:	08004aac 	.word	0x08004aac

08003600 <prvSetupHardware>:
*/
}
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
	/* Ensure all priority bits are assigned as preemption priority bits.
	http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	NVIC_SetPriorityGrouping( 0 );
 8003604:	2000      	movs	r0, #0
 8003606:	f7ff fdfb 	bl	8003200 <NVIC_SetPriorityGrouping>
	//TASK 3 - ADC Conversions
	ADCInit();
 800360a:	f000 f811 	bl	8003630 <ADCInit>
	ADC1->CR2 |= ADC_CR2_SWSTART;// start conversions
 800360e:	4a07      	ldr	r2, [pc, #28]	; (800362c <prvSetupHardware+0x2c>)
 8003610:	4b06      	ldr	r3, [pc, #24]	; (800362c <prvSetupHardware+0x2c>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003618:	6093      	str	r3, [r2, #8]

	SPIInit();
 800361a:	f000 f875 	bl	8003708 <SPIInit>
	TIM4Init();
 800361e:	f000 f8cd 	bl	80037bc <TIM4Init>
	Set_PD7();
 8003622:	f000 f923 	bl	800386c <Set_PD7>
	/* TODO: Setup the clocks, etc. here, if they were not configured before
	main() was called. */
}
 8003626:	bf00      	nop
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40012000 	.word	0x40012000

08003630 <ADCInit>:
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AN;//analog mode
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;// no pullup/pulldown
	GPIO_Init(GPIOA, &GPIO_InitStruct);
}

extern void ADCInit(){
 8003630:	b580      	push	{r7, lr}
 8003632:	b088      	sub	sp, #32
 8003634:	af00      	add	r7, sp, #0
	//GPIO
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8003636:	2101      	movs	r1, #1
 8003638:	2001      	movs	r0, #1
 800363a:	f7ff fae9 	bl	8002c10 <RCC_AHB1PeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_StructInit(&GPIO_InitStruct); //default parameters
 800363e:	f107 0318 	add.w	r3, r7, #24
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff fa80 	bl	8002b48 <GPIO_StructInit>
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_1;// | GPIO_Pin_2;
 8003648:	2302      	movs	r3, #2
 800364a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AN;//analog mode
 800364c:	2303      	movs	r3, #3
 800364e:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;// no pullup/pulldown
 8003650:	2300      	movs	r3, #0
 8003652:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003654:	f107 0318 	add.w	r3, r7, #24
 8003658:	4619      	mov	r1, r3
 800365a:	4825      	ldr	r0, [pc, #148]	; (80036f0 <ADCInit+0xc0>)
 800365c:	f7ff f9e6 	bl	8002a2c <GPIO_Init>

	//ADC
	ADC_DeInit();
 8003660:	f7fe ff88 	bl	8002574 <ADC_DeInit>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8003664:	2101      	movs	r1, #1
 8003666:	f44f 7080 	mov.w	r0, #256	; 0x100
 800366a:	f7ff faf1 	bl	8002c50 <RCC_APB2PeriphClockCmd>

	ADC_InitTypeDef ADC_InitStruct;

	ADC_InitStruct.ADC_ContinuousConvMode=ENABLE;
 800366e:	2301      	movs	r3, #1
 8003670:	717b      	strb	r3, [r7, #5]
	ADC_InitStruct.ADC_ScanConvMode=DISABLE;
 8003672:	2300      	movs	r3, #0
 8003674:	713b      	strb	r3, [r7, #4]
	ADC_InitStruct.ADC_ExternalTrigConv=ADC_ExternalTrigConv_T1_CC1;
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
	ADC_InitStruct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800367a:	2300      	movs	r3, #0
 800367c:	60bb      	str	r3, [r7, #8]
	ADC_InitStruct.ADC_DataAlign = ADC_DataAlign_Right;
 800367e:	2300      	movs	r3, #0
 8003680:	613b      	str	r3, [r7, #16]
	ADC_InitStruct.ADC_NbrOfConversion = 0x01;
 8003682:	2301      	movs	r3, #1
 8003684:	753b      	strb	r3, [r7, #20]

	ADC_Init(ADC1, &ADC_InitStruct);
 8003686:	463b      	mov	r3, r7
 8003688:	4619      	mov	r1, r3
 800368a:	481a      	ldr	r0, [pc, #104]	; (80036f4 <ADCInit+0xc4>)
 800368c:	f7fe ff80 	bl	8002590 <ADC_Init>
	ADC_Cmd(ADC1, ENABLE);
 8003690:	2101      	movs	r1, #1
 8003692:	4818      	ldr	r0, [pc, #96]	; (80036f4 <ADCInit+0xc4>)
 8003694:	f7fe ffd2 	bl	800263c <ADC_Cmd>

	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_144Cycles);
 8003698:	2306      	movs	r3, #6
 800369a:	2201      	movs	r2, #1
 800369c:	2101      	movs	r1, #1
 800369e:	4815      	ldr	r0, [pc, #84]	; (80036f4 <ADCInit+0xc4>)
 80036a0:	f7fe ffe8 	bl	8002674 <ADC_RegularChannelConfig>

	// DMA - store into adc dest.
	RCC->APB2ENR |= RCC_AHB1Periph_DMA1;
 80036a4:	4a14      	ldr	r2, [pc, #80]	; (80036f8 <ADCInit+0xc8>)
 80036a6:	4b14      	ldr	r3, [pc, #80]	; (80036f8 <ADCInit+0xc8>)
 80036a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036ae:	6453      	str	r3, [r2, #68]	; 0x44
	DMA2_Stream0->CR |= 0x100;	//Circ mode
 80036b0:	4a12      	ldr	r2, [pc, #72]	; (80036fc <ADCInit+0xcc>)
 80036b2:	4b12      	ldr	r3, [pc, #72]	; (80036fc <ADCInit+0xcc>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ba:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->PAR |= (uint32_t) (&(ADC1->DR));		//Peripheral Address
 80036bc:	490f      	ldr	r1, [pc, #60]	; (80036fc <ADCInit+0xcc>)
 80036be:	4b0f      	ldr	r3, [pc, #60]	; (80036fc <ADCInit+0xcc>)
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <ADCInit+0xd0>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	608b      	str	r3, [r1, #8]
	DMA2_Stream0->M0AR |= (uint32_t) &ADC_input;	//Memory Address
 80036c8:	4a0c      	ldr	r2, [pc, #48]	; (80036fc <ADCInit+0xcc>)
 80036ca:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <ADCInit+0xcc>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	490d      	ldr	r1, [pc, #52]	; (8003704 <ADCInit+0xd4>)
 80036d0:	430b      	orrs	r3, r1
 80036d2:	60d3      	str	r3, [r2, #12]
	DMA2_Stream0->NDTR = 65535;
 80036d4:	4b09      	ldr	r3, [pc, #36]	; (80036fc <ADCInit+0xcc>)
 80036d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036da:	605a      	str	r2, [r3, #4]
	DMA2_Stream0->CR |= 1;	//DMA enabled
 80036dc:	4a07      	ldr	r2, [pc, #28]	; (80036fc <ADCInit+0xcc>)
 80036de:	4b07      	ldr	r3, [pc, #28]	; (80036fc <ADCInit+0xcc>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	6013      	str	r3, [r2, #0]
}
 80036e8:	bf00      	nop
 80036ea:	3720      	adds	r7, #32
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40020000 	.word	0x40020000
 80036f4:	40012000 	.word	0x40012000
 80036f8:	40023800 	.word	0x40023800
 80036fc:	40026410 	.word	0x40026410
 8003700:	4001204c 	.word	0x4001204c
 8003704:	20001ec0 	.word	0x20001ec0

08003708 <SPIInit>:

// PA4 = NSS, PA5 = clk, PA7 = output
extern void SPIInit(void){
 8003708:	b580      	push	{r7, lr}
 800370a:	b088      	sub	sp, #32
 800370c:	af00      	add	r7, sp, #0
	// GPIOA
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800370e:	2101      	movs	r1, #1
 8003710:	2001      	movs	r0, #1
 8003712:	f7ff fa7d 	bl	8002c10 <RCC_AHB1PeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_StructInit(&GPIO_InitStruct); //default parameters
 8003716:	f107 0318 	add.w	r3, r7, #24
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff fa14 	bl	8002b48 <GPIO_StructInit>
	GPIO_InitStruct.GPIO_Pin = (GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_7);
 8003720:	23b0      	movs	r3, #176	; 0xb0
 8003722:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;//Alternate Function mode
 8003724:	2302      	movs	r3, #2
 8003726:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_25MHz;
 8003728:	2301      	movs	r3, #1
 800372a:	777b      	strb	r3, [r7, #29]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 800372c:	2302      	movs	r3, #2
 800372e:	77fb      	strb	r3, [r7, #31]
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_SPI1);
 8003730:	2205      	movs	r2, #5
 8003732:	2104      	movs	r1, #4
 8003734:	481f      	ldr	r0, [pc, #124]	; (80037b4 <SPIInit+0xac>)
 8003736:	f7ff fa21 	bl	8002b7c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource5, GPIO_AF_SPI1);
 800373a:	2205      	movs	r2, #5
 800373c:	2105      	movs	r1, #5
 800373e:	481d      	ldr	r0, [pc, #116]	; (80037b4 <SPIInit+0xac>)
 8003740:	f7ff fa1c 	bl	8002b7c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_SPI1);
 8003744:	2205      	movs	r2, #5
 8003746:	2107      	movs	r1, #7
 8003748:	481a      	ldr	r0, [pc, #104]	; (80037b4 <SPIInit+0xac>)
 800374a:	f7ff fa17 	bl	8002b7c <GPIO_PinAFConfig>

	GPIO_Init(GPIOA, &GPIO_InitStruct);
 800374e:	f107 0318 	add.w	r3, r7, #24
 8003752:	4619      	mov	r1, r3
 8003754:	4817      	ldr	r0, [pc, #92]	; (80037b4 <SPIInit+0xac>)
 8003756:	f7ff f969 	bl	8002a2c <GPIO_Init>
	// SPI
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 800375a:	2101      	movs	r1, #1
 800375c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003760:	f7ff fa76 	bl	8002c50 <RCC_APB2PeriphClockCmd>
	SPI_InitTypeDef SPI_InitStruct;

	SPI_StructInit(&SPI_InitStruct);
 8003764:	1d3b      	adds	r3, r7, #4
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff faf6 	bl	8002d58 <SPI_StructInit>
	SPI_InitStruct.SPI_Direction = SPI_Direction_1Line_Tx;
 800376c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003770:	80bb      	strh	r3, [r7, #4]
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 8003772:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003776:	80fb      	strh	r3, [r7, #6]
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_16b;//changed from 16bit
 8003778:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800377c:	813b      	strh	r3, [r7, #8]
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 800377e:	2300      	movs	r3, #0
 8003780:	817b      	strh	r3, [r7, #10]
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8003782:	2300      	movs	r3, #0
 8003784:	81bb      	strh	r3, [r7, #12]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8003786:	f44f 7300 	mov.w	r3, #512	; 0x200
 800378a:	81fb      	strh	r3, [r7, #14]
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 800378c:	2300      	movs	r3, #0
 800378e:	823b      	strh	r3, [r7, #16]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 8003790:	2300      	movs	r3, #0
 8003792:	827b      	strh	r3, [r7, #18]
	SPI_InitStruct.SPI_CRCPolynomial = 7;
 8003794:	2307      	movs	r3, #7
 8003796:	82bb      	strh	r3, [r7, #20]
	SPI_Init(SPI1, &SPI_InitStruct);
 8003798:	1d3b      	adds	r3, r7, #4
 800379a:	4619      	mov	r1, r3
 800379c:	4806      	ldr	r0, [pc, #24]	; (80037b8 <SPIInit+0xb0>)
 800379e:	f7ff fa97 	bl	8002cd0 <SPI_Init>
	SPI_Cmd(SPI1, ENABLE);
 80037a2:	2101      	movs	r1, #1
 80037a4:	4804      	ldr	r0, [pc, #16]	; (80037b8 <SPIInit+0xb0>)
 80037a6:	f7ff fafc 	bl	8002da2 <SPI_Cmd>

}
 80037aa:	bf00      	nop
 80037ac:	3720      	adds	r7, #32
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40020000 	.word	0x40020000
 80037b8:	40013000 	.word	0x40013000

080037bc <TIM4Init>:

// PD12
extern void TIM4Init(void){
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08a      	sub	sp, #40	; 0x28
 80037c0:	af00      	add	r7, sp, #0
	// GPIO
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80037c2:	2101      	movs	r1, #1
 80037c4:	2008      	movs	r0, #8
 80037c6:	f7ff fa23 	bl	8002c10 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_TIM4);
 80037ca:	2202      	movs	r2, #2
 80037cc:	210c      	movs	r1, #12
 80037ce:	4824      	ldr	r0, [pc, #144]	; (8003860 <TIM4Init+0xa4>)
 80037d0:	f7ff f9d4 	bl	8002b7c <GPIO_PinAFConfig>
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_12;
 80037d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037d8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80037da:	2300      	movs	r3, #0
 80037dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 80037e6:	2302      	movs	r3, #2
 80037e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_25MHz;
 80037ec:	2301      	movs	r3, #1
 80037ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037f2:	f107 0320 	add.w	r3, r7, #32
 80037f6:	4619      	mov	r1, r3
 80037f8:	4819      	ldr	r0, [pc, #100]	; (8003860 <TIM4Init+0xa4>)
 80037fa:	f7ff f917 	bl	8002a2c <GPIO_Init>

	// TIM4
	RCC->APB1ENR |= RCC_APB1Periph_TIM4;
 80037fe:	4a19      	ldr	r2, [pc, #100]	; (8003864 <TIM4Init+0xa8>)
 8003800:	4b18      	ldr	r3, [pc, #96]	; (8003864 <TIM4Init+0xa8>)
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	f043 0304 	orr.w	r3, r3, #4
 8003808:	6413      	str	r3, [r2, #64]	; 0x40
	//Shift registers operate at 25Mhz so we use a prescaler of 2.36
	TIM_TimeBaseInitTypeDef TIM_BaseStruct;
	TIM_BaseStruct.TIM_Prescaler = 0;
 800380a:	2300      	movs	r3, #0
 800380c:	82bb      	strh	r3, [r7, #20]
	TIM_BaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
 800380e:	2300      	movs	r3, #0
 8003810:	82fb      	strh	r3, [r7, #22]
	TIM_BaseStruct.TIM_Period = 8399; //10 khz PWM
 8003812:	f242 03cf 	movw	r3, #8399	; 0x20cf
 8003816:	61bb      	str	r3, [r7, #24]
	TIM_BaseStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 8003818:	2300      	movs	r3, #0
 800381a:	83bb      	strh	r3, [r7, #28]
	TIM_BaseStruct.TIM_RepetitionCounter = 0;
 800381c:	2300      	movs	r3, #0
 800381e:	77bb      	strb	r3, [r7, #30]
	//Initialize TIM4
	TIM_TimeBaseInit(TIM4, &TIM_BaseStruct);
 8003820:	f107 0314 	add.w	r3, r7, #20
 8003824:	4619      	mov	r1, r3
 8003826:	4810      	ldr	r0, [pc, #64]	; (8003868 <TIM4Init+0xac>)
 8003828:	f7ff fb06 	bl	8002e38 <TIM_TimeBaseInit>
	//Start count on TIM4
	TIM_Cmd(TIM4, ENABLE);
 800382c:	2101      	movs	r1, #1
 800382e:	480e      	ldr	r0, [pc, #56]	; (8003868 <TIM4Init+0xac>)
 8003830:	f7ff fb6e 	bl	8002f10 <TIM_Cmd>

	//PWM
	TIM_OCInitTypeDef TIM_OCStruct;
	//PWM mode 2 = Clear on compare match
	TIM_OCStruct.TIM_OCMode = TIM_OCMode_PWM2;
 8003834:	2370      	movs	r3, #112	; 0x70
 8003836:	803b      	strh	r3, [r7, #0]
	TIM_OCStruct.TIM_OutputState = TIM_OutputState_Enable;
 8003838:	2301      	movs	r3, #1
 800383a:	807b      	strh	r3, [r7, #2]
	TIM_OCStruct.TIM_OCPolarity = TIM_OCPolarity_Low;
 800383c:	2302      	movs	r3, #2
 800383e:	81bb      	strh	r3, [r7, #12]
	TIM_OCStruct.TIM_Pulse = 4199;  //50% duty cycle
 8003840:	f241 0367 	movw	r3, #4199	; 0x1067
 8003844:	60bb      	str	r3, [r7, #8]
	TIM_OC1Init(TIM4, &TIM_OCStruct);
 8003846:	463b      	mov	r3, r7
 8003848:	4619      	mov	r1, r3
 800384a:	4807      	ldr	r0, [pc, #28]	; (8003868 <TIM4Init+0xac>)
 800384c:	f7ff fb80 	bl	8002f50 <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8003850:	2108      	movs	r1, #8
 8003852:	4805      	ldr	r0, [pc, #20]	; (8003868 <TIM4Init+0xac>)
 8003854:	f7ff fbf6 	bl	8003044 <TIM_OC1PreloadConfig>
}
 8003858:	bf00      	nop
 800385a:	3728      	adds	r7, #40	; 0x28
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40020c00 	.word	0x40020c00
 8003864:	40023800 	.word	0x40023800
 8003868:	40000800 	.word	0x40000800

0800386c <Set_PD7>:
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_25MHz;
	GPIO_Init(GPIOC, &GPIO_InitStruct);
}

extern void Set_PD7(void){
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
	GPIOD->ODR ^= 0xFF;// be carefull for timer
 8003870:	4a05      	ldr	r2, [pc, #20]	; (8003888 <Set_PD7+0x1c>)
 8003872:	4b05      	ldr	r3, [pc, #20]	; (8003888 <Set_PD7+0x1c>)
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 800387a:	6153      	str	r3, [r2, #20]
}
 800387c:	bf00      	nop
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	40020c00 	.word	0x40020c00

0800388c <SPI_Bus_tx>:

extern void SPI_Bus_tx(uint16_t data){
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	80fb      	strh	r3, [r7, #6]
	SPI1->DR = data;
 8003896:	4a04      	ldr	r2, [pc, #16]	; (80038a8 <SPI_Bus_tx+0x1c>)
 8003898:	88fb      	ldrh	r3, [r7, #6]
 800389a:	8193      	strh	r3, [r2, #12]

	//wait until TXE == 1
	//while( ((SPI1->SR) & SPI_I2S_FLAG_TXE) != 1){}
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	40013000 	.word	0x40013000

080038ac <new_car>:

uint32_t new_car(uint32_t traffic_value){
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]

	//generates random number between 1 and traffic_value-1
	int value = rand() & traffic_value;
 80038b4:	f000 fc48 	bl	8004148 <rand>
 80038b8:	4603      	mov	r3, r0
 80038ba:	461a      	mov	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4013      	ands	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]

	if (value == 1){
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <new_car+0x20>
		return value;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	e000      	b.n	80038ce <new_car+0x22>
	}else{
		return 0;
 80038cc:	2300      	movs	r3, #0
	}
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <generate_traffic>:

uint32_t generate_traffic(uint32_t traffic_value, uint32_t STATE_TRAFFIC){
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
	uint32_t upper_cars = (STATE_TRAFFIC)&CLEARED_TRAFFIC;
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	4b10      	ldr	r3, [pc, #64]	; (8003928 <generate_traffic+0x50>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]
	uint32_t approaching_cars = (STATE_TRAFFIC)&APPROACHING_TRAFFIC;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	617b      	str	r3, [r7, #20]
	upper_cars = upper_cars << 0b1;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	613b      	str	r3, [r7, #16]

	if(STATE_TRAFFIC & green){
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <generate_traffic+0x2e>
		approaching_cars = approaching_cars << 0b1;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	617b      	str	r3, [r7, #20]
	}

	//generate new car
	uint32_t car = new_car(traffic_value);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff ffd0 	bl	80038ac <new_car>
 800390c:	60f8      	str	r0, [r7, #12]

	STATE_TRAFFIC = (upper_cars & CLEARED_TRAFFIC) | (approaching_cars) | car;
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4b05      	ldr	r3, [pc, #20]	; (8003928 <generate_traffic+0x50>)
 8003912:	4013      	ands	r3, r2
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	431a      	orrs	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4313      	orrs	r3, r2
 800391c:	603b      	str	r3, [r7, #0]
	//STATE_TRAFFIC = (uint32_t)(0xFFFFFFFF);// test val
	return STATE_TRAFFIC;
 800391e:	683b      	ldr	r3, [r7, #0]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	0007ff00 	.word	0x0007ff00

0800392c <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800392c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800392e:	e003      	b.n	8003938 <LoopCopyDataInit>

08003930 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003930:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8003932:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003934:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003936:	3104      	adds	r1, #4

08003938 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003938:	480a      	ldr	r0, [pc, #40]	; (8003964 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800393a:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800393c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800393e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003940:	d3f6      	bcc.n	8003930 <CopyDataInit>
  ldr  r2, =_sbss
 8003942:	4a0a      	ldr	r2, [pc, #40]	; (800396c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8003944:	e002      	b.n	800394c <LoopFillZerobss>

08003946 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003946:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003948:	f842 3b04 	str.w	r3, [r2], #4

0800394c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800394c:	4b08      	ldr	r3, [pc, #32]	; (8003970 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800394e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003950:	d3f9      	bcc.n	8003946 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003952:	f000 f8f3 	bl	8003b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003956:	f000 fb63 	bl	8004020 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800395a:	f7ff fc75 	bl	8003248 <main>
  bx  lr    
 800395e:	4770      	bx	lr
  ldr  r3, =_sidata
 8003960:	08004b38 	.word	0x08004b38
  ldr  r0, =_sdata
 8003964:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003968:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 800396c:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8003970:	20001ec8 	.word	0x20001ec8

08003974 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003974:	e7fe      	b.n	8003974 <ADC_IRQHandler>

08003976 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8003976:	b480      	push	{r7}
 8003978:	af00      	add	r7, sp, #0
}
 800397a:	bf00      	nop
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003988:	e7fe      	b.n	8003988 <HardFault_Handler+0x4>

0800398a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800398a:	b480      	push	{r7}
 800398c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800398e:	e7fe      	b.n	800398e <MemManage_Handler+0x4>

08003990 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003994:	e7fe      	b.n	8003994 <BusFault_Handler+0x4>

08003996 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003996:	b480      	push	{r7}
 8003998:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800399a:	e7fe      	b.n	800399a <UsageFault_Handler+0x4>

0800399c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
}
 80039a0:	bf00      	nop
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
	...

080039ac <ITM_SendChar>:

    \param [in]     ch  Character to transmit
    \return             Character to transmit
 */
static __INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 80039b4:	4b13      	ldr	r3, [pc, #76]	; (8003a04 <ITM_SendChar+0x58>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d01a      	beq.n	80039f6 <ITM_SendChar+0x4a>
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 80039c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80039c4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80039c8:	f003 0301 	and.w	r3, r3, #1
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d012      	beq.n	80039f6 <ITM_SendChar+0x4a>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 80039d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80039d4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80039d8:	f003 0301 	and.w	r3, r3, #1
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00a      	beq.n	80039f6 <ITM_SendChar+0x4a>
  {
    while (ITM->PORT[0].u32 == 0);
 80039e0:	bf00      	nop
 80039e2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0fa      	beq.n	80039e2 <ITM_SendChar+0x36>
    ITM->PORT[0].u8 = (uint8_t) ch;
 80039ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80039f6:	687b      	ldr	r3, [r7, #4]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	e000edf0 	.word	0xe000edf0

08003a08 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	
	int i=0;
 8003a14:	2300      	movs	r3, #0
 8003a16:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	e009      	b.n	8003a32 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	60ba      	str	r2, [r7, #8]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff ffc0 	bl	80039ac <ITM_SendChar>
	for(i=0;i<len;i++)
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	dbf1      	blt.n	8003a1e <_write+0x16>
	return len;
 8003a3a:	687b      	ldr	r3, [r7, #4]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <_sbrk>:

void * _sbrk(int32_t incr)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <_sbrk+0x38>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d102      	bne.n	8003a5a <_sbrk+0x16>
		heap_end = & end;
 8003a54:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <_sbrk+0x38>)
 8003a56:	4a0a      	ldr	r2, [pc, #40]	; (8003a80 <_sbrk+0x3c>)
 8003a58:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8003a5a:	4b08      	ldr	r3, [pc, #32]	; (8003a7c <_sbrk+0x38>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8003a60:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <_sbrk+0x38>)
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4413      	add	r3, r2
 8003a68:	4a04      	ldr	r2, [pc, #16]	; (8003a7c <_sbrk+0x38>)
 8003a6a:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	20001df8 	.word	0x20001df8
 8003a80:	20001ec8 	.word	0x20001ec8

08003a84 <_close>:

int _close(int32_t file)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8003a8c:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <_close+0x20>)
 8003a8e:	2258      	movs	r2, #88	; 0x58
 8003a90:	601a      	str	r2, [r3, #0]
	return -1;
 8003a92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20001ec4 	.word	0x20001ec4

08003aa8 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 8003ab2:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <_fstat+0x20>)
 8003ab4:	2258      	movs	r2, #88	; 0x58
 8003ab6:	601a      	str	r2, [r3, #0]
	return -1;
 8003ab8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	20001ec4 	.word	0x20001ec4

08003acc <_isatty>:

int _isatty(int32_t file)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8003ad4:	4b04      	ldr	r3, [pc, #16]	; (8003ae8 <_isatty+0x1c>)
 8003ad6:	2258      	movs	r2, #88	; 0x58
 8003ad8:	601a      	str	r2, [r3, #0]
	return 0;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	20001ec4 	.word	0x20001ec4

08003aec <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8003af8:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <_lseek+0x24>)
 8003afa:	2258      	movs	r2, #88	; 0x58
 8003afc:	601a      	str	r2, [r3, #0]
	return -1;
 8003afe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	20001ec4 	.word	0x20001ec4

08003b14 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8003b20:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <_read+0x24>)
 8003b22:	2258      	movs	r2, #88	; 0x58
 8003b24:	601a      	str	r2, [r3, #0]
	return -1;
 8003b26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	20001ec4 	.word	0x20001ec4

08003b3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b40:	4a16      	ldr	r2, [pc, #88]	; (8003b9c <SystemInit+0x60>)
 8003b42:	4b16      	ldr	r3, [pc, #88]	; (8003b9c <SystemInit+0x60>)
 8003b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003b50:	4a13      	ldr	r2, [pc, #76]	; (8003ba0 <SystemInit+0x64>)
 8003b52:	4b13      	ldr	r3, [pc, #76]	; (8003ba0 <SystemInit+0x64>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f043 0301 	orr.w	r3, r3, #1
 8003b5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003b5c:	4b10      	ldr	r3, [pc, #64]	; (8003ba0 <SystemInit+0x64>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003b62:	4a0f      	ldr	r2, [pc, #60]	; (8003ba0 <SystemInit+0x64>)
 8003b64:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <SystemInit+0x64>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b70:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003b72:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <SystemInit+0x64>)
 8003b74:	4a0b      	ldr	r2, [pc, #44]	; (8003ba4 <SystemInit+0x68>)
 8003b76:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003b78:	4a09      	ldr	r2, [pc, #36]	; (8003ba0 <SystemInit+0x64>)
 8003b7a:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <SystemInit+0x64>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003b84:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <SystemInit+0x64>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003b8a:	f000 f80d 	bl	8003ba8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b8e:	4b03      	ldr	r3, [pc, #12]	; (8003b9c <SystemInit+0x60>)
 8003b90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b94:	609a      	str	r2, [r3, #8]
#endif
}
 8003b96:	bf00      	nop
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	e000ed00 	.word	0xe000ed00
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	24003010 	.word	0x24003010

08003ba8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	607b      	str	r3, [r7, #4]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003bb6:	4a36      	ldr	r2, [pc, #216]	; (8003c90 <SetSysClock+0xe8>)
 8003bb8:	4b35      	ldr	r3, [pc, #212]	; (8003c90 <SetSysClock+0xe8>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003bc2:	4b33      	ldr	r3, [pc, #204]	; (8003c90 <SetSysClock+0xe8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bca:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d103      	bne.n	8003be0 <SetSysClock+0x38>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003bde:	d1f0      	bne.n	8003bc2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003be0:	4b2b      	ldr	r3, [pc, #172]	; (8003c90 <SetSysClock+0xe8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003bec:	2301      	movs	r3, #1
 8003bee:	603b      	str	r3, [r7, #0]
 8003bf0:	e001      	b.n	8003bf6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d142      	bne.n	8003c82 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003bfc:	4a24      	ldr	r2, [pc, #144]	; (8003c90 <SetSysClock+0xe8>)
 8003bfe:	4b24      	ldr	r3, [pc, #144]	; (8003c90 <SetSysClock+0xe8>)
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c06:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8003c08:	4a22      	ldr	r2, [pc, #136]	; (8003c94 <SetSysClock+0xec>)
 8003c0a:	4b22      	ldr	r3, [pc, #136]	; (8003c94 <SetSysClock+0xec>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c12:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003c14:	4a1e      	ldr	r2, [pc, #120]	; (8003c90 <SetSysClock+0xe8>)
 8003c16:	4b1e      	ldr	r3, [pc, #120]	; (8003c90 <SetSysClock+0xe8>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003c1c:	4a1c      	ldr	r2, [pc, #112]	; (8003c90 <SetSysClock+0xe8>)
 8003c1e:	4b1c      	ldr	r3, [pc, #112]	; (8003c90 <SetSysClock+0xe8>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c26:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003c28:	4a19      	ldr	r2, [pc, #100]	; (8003c90 <SetSysClock+0xe8>)
 8003c2a:	4b19      	ldr	r3, [pc, #100]	; (8003c90 <SetSysClock+0xe8>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003c32:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003c34:	4b16      	ldr	r3, [pc, #88]	; (8003c90 <SetSysClock+0xe8>)
 8003c36:	4a18      	ldr	r2, [pc, #96]	; (8003c98 <SetSysClock+0xf0>)
 8003c38:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003c3a:	4a15      	ldr	r2, [pc, #84]	; (8003c90 <SetSysClock+0xe8>)
 8003c3c:	4b14      	ldr	r3, [pc, #80]	; (8003c90 <SetSysClock+0xe8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c44:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003c46:	bf00      	nop
 8003c48:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <SetSysClock+0xe8>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f9      	beq.n	8003c48 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003c54:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <SetSysClock+0xf4>)
 8003c56:	f240 6205 	movw	r2, #1541	; 0x605
 8003c5a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003c5c:	4a0c      	ldr	r2, [pc, #48]	; (8003c90 <SetSysClock+0xe8>)
 8003c5e:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <SetSysClock+0xe8>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f023 0303 	bic.w	r3, r3, #3
 8003c66:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003c68:	4a09      	ldr	r2, [pc, #36]	; (8003c90 <SetSysClock+0xe8>)
 8003c6a:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <SetSysClock+0xe8>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f043 0302 	orr.w	r3, r3, #2
 8003c72:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8003c74:	bf00      	nop
 8003c76:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <SetSysClock+0xe8>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
 8003c7e:	2b08      	cmp	r3, #8
 8003c80:	d1f9      	bne.n	8003c76 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40023800 	.word	0x40023800
 8003c94:	40007000 	.word	0x40007000
 8003c98:	07405408 	.word	0x07405408
 8003c9c:	40023c00 	.word	0x40023c00

08003ca0 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b087      	sub	sp, #28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
	int div = 1;
 8003cac:	2301      	movs	r3, #1
 8003cae:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003cb0:	e004      	b.n	8003cbc <ts_itoa+0x1c>
		div *= base;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	fb02 f303 	mul.w	r3, r2, r3
 8003cba:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d2f3      	bcs.n	8003cb2 <ts_itoa+0x12>

	while (div != 0)
 8003cca:	e029      	b.n	8003d20 <ts_itoa+0x80>
	{
		int num = d/div;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd4:	613b      	str	r3, [r7, #16]
		d = d%div;
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	fbb3 f1f2 	udiv	r1, r3, r2
 8003cde:	fb02 f201 	mul.w	r2, r2, r1
 8003ce2:	1a9b      	subs	r3, r3, r2
 8003ce4:	60bb      	str	r3, [r7, #8]
		div /= base;
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	fb92 f3f3 	sdiv	r3, r2, r3
 8003cee:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	2b09      	cmp	r3, #9
 8003cf4:	dd0a      	ble.n	8003d0c <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	1c59      	adds	r1, r3, #1
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	6011      	str	r1, [r2, #0]
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	3237      	adds	r2, #55	; 0x37
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	701a      	strb	r2, [r3, #0]
 8003d0a:	e009      	b.n	8003d20 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	1c59      	adds	r1, r3, #1
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	6011      	str	r1, [r2, #0]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	b2d2      	uxtb	r2, r2
 8003d1a:	3230      	adds	r2, #48	; 0x30
 8003d1c:	b2d2      	uxtb	r2, r2
 8003d1e:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1d2      	bne.n	8003ccc <ts_itoa+0x2c>
	}
}
 8003d26:	bf00      	nop
 8003d28:	371c      	adds	r7, #28
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b088      	sub	sp, #32
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	60f8      	str	r0, [r7, #12]
 8003d3a:	60b9      	str	r1, [r7, #8]
 8003d3c:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8003d42:	e07d      	b.n	8003e40 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	2b25      	cmp	r3, #37	; 0x25
 8003d4a:	d171      	bne.n	8003e30 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	60bb      	str	r3, [r7, #8]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2b64      	cmp	r3, #100	; 0x64
 8003d58:	d01e      	beq.n	8003d98 <ts_formatstring+0x66>
 8003d5a:	2b64      	cmp	r3, #100	; 0x64
 8003d5c:	dc06      	bgt.n	8003d6c <ts_formatstring+0x3a>
 8003d5e:	2b58      	cmp	r3, #88	; 0x58
 8003d60:	d050      	beq.n	8003e04 <ts_formatstring+0xd2>
 8003d62:	2b63      	cmp	r3, #99	; 0x63
 8003d64:	d00e      	beq.n	8003d84 <ts_formatstring+0x52>
 8003d66:	2b25      	cmp	r3, #37	; 0x25
 8003d68:	d058      	beq.n	8003e1c <ts_formatstring+0xea>
 8003d6a:	e05d      	b.n	8003e28 <ts_formatstring+0xf6>
 8003d6c:	2b73      	cmp	r3, #115	; 0x73
 8003d6e:	d02b      	beq.n	8003dc8 <ts_formatstring+0x96>
 8003d70:	2b73      	cmp	r3, #115	; 0x73
 8003d72:	dc02      	bgt.n	8003d7a <ts_formatstring+0x48>
 8003d74:	2b69      	cmp	r3, #105	; 0x69
 8003d76:	d00f      	beq.n	8003d98 <ts_formatstring+0x66>
 8003d78:	e056      	b.n	8003e28 <ts_formatstring+0xf6>
 8003d7a:	2b75      	cmp	r3, #117	; 0x75
 8003d7c:	d037      	beq.n	8003dee <ts_formatstring+0xbc>
 8003d7e:	2b78      	cmp	r3, #120	; 0x78
 8003d80:	d040      	beq.n	8003e04 <ts_formatstring+0xd2>
 8003d82:	e051      	b.n	8003e28 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	60fa      	str	r2, [r7, #12]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	1d11      	adds	r1, r2, #4
 8003d8e:	6079      	str	r1, [r7, #4]
 8003d90:	6812      	ldr	r2, [r2, #0]
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	701a      	strb	r2, [r3, #0]
				break;
 8003d96:	e047      	b.n	8003e28 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	1d1a      	adds	r2, r3, #4
 8003d9c:	607a      	str	r2, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	da07      	bge.n	8003db8 <ts_formatstring+0x86>
					{
						val *= -1;
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	425b      	negs	r3, r3
 8003dac:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	60fa      	str	r2, [r7, #12]
 8003db4:	222d      	movs	r2, #45	; 0x2d
 8003db6:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8003db8:	69f9      	ldr	r1, [r7, #28]
 8003dba:	f107 030c 	add.w	r3, r7, #12
 8003dbe:	220a      	movs	r2, #10
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff ff6d 	bl	8003ca0 <ts_itoa>
				}
				break;
 8003dc6:	e02f      	b.n	8003e28 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	1d1a      	adds	r2, r3, #4
 8003dcc:	607a      	str	r2, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8003dd2:	e007      	b.n	8003de4 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	60fa      	str	r2, [r7, #12]
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	1c51      	adds	r1, r2, #1
 8003dde:	61b9      	str	r1, [r7, #24]
 8003de0:	7812      	ldrb	r2, [r2, #0]
 8003de2:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1f3      	bne.n	8003dd4 <ts_formatstring+0xa2>
					}
				}
				break;
 8003dec:	e01c      	b.n	8003e28 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	1d1a      	adds	r2, r3, #4
 8003df2:	607a      	str	r2, [r7, #4]
 8003df4:	6819      	ldr	r1, [r3, #0]
 8003df6:	f107 030c 	add.w	r3, r7, #12
 8003dfa:	220a      	movs	r2, #10
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff ff4f 	bl	8003ca0 <ts_itoa>
				break;
 8003e02:	e011      	b.n	8003e28 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	1d1a      	adds	r2, r3, #4
 8003e08:	607a      	str	r2, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	f107 030c 	add.w	r3, r7, #12
 8003e12:	2210      	movs	r2, #16
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff ff43 	bl	8003ca0 <ts_itoa>
				break;
 8003e1a:	e005      	b.n	8003e28 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	1c5a      	adds	r2, r3, #1
 8003e20:	60fa      	str	r2, [r7, #12]
 8003e22:	2225      	movs	r2, #37	; 0x25
 8003e24:	701a      	strb	r2, [r3, #0]
				  break;
 8003e26:	bf00      	nop
			}
			fmt++;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	e007      	b.n	8003e40 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	60fa      	str	r2, [r7, #12]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	1c51      	adds	r1, r2, #1
 8003e3a:	60b9      	str	r1, [r7, #8]
 8003e3c:	7812      	ldrb	r2, [r2, #0]
 8003e3e:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f47f af7d 	bne.w	8003d44 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	461a      	mov	r2, r3
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	1ad3      	subs	r3, r2, r3
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3720      	adds	r7, #32
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
	int length = 0;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8003e6e:	e081      	b.n	8003f74 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b25      	cmp	r3, #37	; 0x25
 8003e76:	d177      	bne.n	8003f68 <ts_formatlength+0x108>
		{
			++fmt;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	3b58      	subs	r3, #88	; 0x58
 8003e84:	2b20      	cmp	r3, #32
 8003e86:	d86a      	bhi.n	8003f5e <ts_formatlength+0xfe>
 8003e88:	a201      	add	r2, pc, #4	; (adr r2, 8003e90 <ts_formatlength+0x30>)
 8003e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8e:	bf00      	nop
 8003e90:	08003f51 	.word	0x08003f51
 8003e94:	08003f5f 	.word	0x08003f5f
 8003e98:	08003f5f 	.word	0x08003f5f
 8003e9c:	08003f5f 	.word	0x08003f5f
 8003ea0:	08003f5f 	.word	0x08003f5f
 8003ea4:	08003f5f 	.word	0x08003f5f
 8003ea8:	08003f5f 	.word	0x08003f5f
 8003eac:	08003f5f 	.word	0x08003f5f
 8003eb0:	08003f5f 	.word	0x08003f5f
 8003eb4:	08003f5f 	.word	0x08003f5f
 8003eb8:	08003f5f 	.word	0x08003f5f
 8003ebc:	08003f15 	.word	0x08003f15
 8003ec0:	08003f23 	.word	0x08003f23
 8003ec4:	08003f5f 	.word	0x08003f5f
 8003ec8:	08003f5f 	.word	0x08003f5f
 8003ecc:	08003f5f 	.word	0x08003f5f
 8003ed0:	08003f5f 	.word	0x08003f5f
 8003ed4:	08003f23 	.word	0x08003f23
 8003ed8:	08003f5f 	.word	0x08003f5f
 8003edc:	08003f5f 	.word	0x08003f5f
 8003ee0:	08003f5f 	.word	0x08003f5f
 8003ee4:	08003f5f 	.word	0x08003f5f
 8003ee8:	08003f5f 	.word	0x08003f5f
 8003eec:	08003f5f 	.word	0x08003f5f
 8003ef0:	08003f5f 	.word	0x08003f5f
 8003ef4:	08003f5f 	.word	0x08003f5f
 8003ef8:	08003f5f 	.word	0x08003f5f
 8003efc:	08003f31 	.word	0x08003f31
 8003f00:	08003f5f 	.word	0x08003f5f
 8003f04:	08003f23 	.word	0x08003f23
 8003f08:	08003f5f 	.word	0x08003f5f
 8003f0c:	08003f5f 	.word	0x08003f5f
 8003f10:	08003f51 	.word	0x08003f51
			{
			  case 'c':
		  		  va_arg(va, int);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	3304      	adds	r3, #4
 8003f18:	603b      	str	r3, [r7, #0]
				  ++length;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	60fb      	str	r3, [r7, #12]
				  break;
 8003f20:	e025      	b.n	8003f6e <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	330b      	adds	r3, #11
 8003f26:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	603b      	str	r3, [r7, #0]
				  break;
 8003f2e:	e01e      	b.n	8003f6e <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	1d1a      	adds	r2, r3, #4
 8003f34:	603a      	str	r2, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8003f3a:	e002      	b.n	8003f42 <ts_formatlength+0xe2>
			  			  ++length;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	1c5a      	adds	r2, r3, #1
 8003f46:	60ba      	str	r2, [r7, #8]
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f6      	bne.n	8003f3c <ts_formatlength+0xdc>
			  	  }
				  break;
 8003f4e:	e00e      	b.n	8003f6e <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	3308      	adds	r3, #8
 8003f54:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	3304      	adds	r3, #4
 8003f5a:	603b      	str	r3, [r7, #0]
				  break;
 8003f5c:	e007      	b.n	8003f6e <ts_formatlength+0x10e>
			  default:
				  ++length;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	3301      	adds	r3, #1
 8003f62:	60fb      	str	r3, [r7, #12]
				  break;
 8003f64:	bf00      	nop
 8003f66:	e002      	b.n	8003f6e <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	3301      	adds	r3, #1
 8003f72:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f47f af79 	bne.w	8003e70 <ts_formatlength+0x10>
	}
	return length;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <printf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int printf(const char *fmt, ...)
{
 8003f8c:	b40f      	push	{r0, r1, r2, r3}
 8003f8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
	int length = 0;
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8003f9a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003f9e:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8003fa0:	6839      	ldr	r1, [r7, #0]
 8003fa2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fa4:	f7ff ff5c 	bl	8003e60 <ts_formatlength>
 8003fa8:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8003faa:	466b      	mov	r3, sp
 8003fac:	461e      	mov	r6, r3
		char buf[length];
 8003fae:	68f9      	ldr	r1, [r7, #12]
 8003fb0:	1e4b      	subs	r3, r1, #1
 8003fb2:	60bb      	str	r3, [r7, #8]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8003fc0:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8003fc4:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8003fc8:	460b      	mov	r3, r1
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	00dd      	lsls	r5, r3, #3
 8003fd2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003fd6:	00d4      	lsls	r4, r2, #3
 8003fd8:	460b      	mov	r3, r1
 8003fda:	3307      	adds	r3, #7
 8003fdc:	08db      	lsrs	r3, r3, #3
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	ebad 0d03 	sub.w	sp, sp, r3
 8003fe4:	466b      	mov	r3, sp
 8003fe6:	3300      	adds	r3, #0
 8003fe8:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8003fea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003fee:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff fe9b 	bl	8003d32 <ts_formatstring>
 8003ffc:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4619      	mov	r1, r3
 8004004:	2001      	movs	r0, #1
 8004006:	f7ff fcff 	bl	8003a08 <_write>
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 800400e:	68fb      	ldr	r3, [r7, #12]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800401a:	b004      	add	sp, #16
 800401c:	4770      	bx	lr
	...

08004020 <__libc_init_array>:
 8004020:	b570      	push	{r4, r5, r6, lr}
 8004022:	4e0d      	ldr	r6, [pc, #52]	; (8004058 <__libc_init_array+0x38>)
 8004024:	4c0d      	ldr	r4, [pc, #52]	; (800405c <__libc_init_array+0x3c>)
 8004026:	1ba4      	subs	r4, r4, r6
 8004028:	10a4      	asrs	r4, r4, #2
 800402a:	2500      	movs	r5, #0
 800402c:	42a5      	cmp	r5, r4
 800402e:	d109      	bne.n	8004044 <__libc_init_array+0x24>
 8004030:	4e0b      	ldr	r6, [pc, #44]	; (8004060 <__libc_init_array+0x40>)
 8004032:	4c0c      	ldr	r4, [pc, #48]	; (8004064 <__libc_init_array+0x44>)
 8004034:	f000 fd70 	bl	8004b18 <_init>
 8004038:	1ba4      	subs	r4, r4, r6
 800403a:	10a4      	asrs	r4, r4, #2
 800403c:	2500      	movs	r5, #0
 800403e:	42a5      	cmp	r5, r4
 8004040:	d105      	bne.n	800404e <__libc_init_array+0x2e>
 8004042:	bd70      	pop	{r4, r5, r6, pc}
 8004044:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004048:	4798      	blx	r3
 800404a:	3501      	adds	r5, #1
 800404c:	e7ee      	b.n	800402c <__libc_init_array+0xc>
 800404e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004052:	4798      	blx	r3
 8004054:	3501      	adds	r5, #1
 8004056:	e7f2      	b.n	800403e <__libc_init_array+0x1e>
 8004058:	08004b30 	.word	0x08004b30
 800405c:	08004b30 	.word	0x08004b30
 8004060:	08004b30 	.word	0x08004b30
 8004064:	08004b34 	.word	0x08004b34

08004068 <memcpy>:
 8004068:	b510      	push	{r4, lr}
 800406a:	1e43      	subs	r3, r0, #1
 800406c:	440a      	add	r2, r1
 800406e:	4291      	cmp	r1, r2
 8004070:	d100      	bne.n	8004074 <memcpy+0xc>
 8004072:	bd10      	pop	{r4, pc}
 8004074:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004078:	f803 4f01 	strb.w	r4, [r3, #1]!
 800407c:	e7f7      	b.n	800406e <memcpy+0x6>
	...

08004080 <_puts_r>:
 8004080:	b570      	push	{r4, r5, r6, lr}
 8004082:	460e      	mov	r6, r1
 8004084:	4605      	mov	r5, r0
 8004086:	b118      	cbz	r0, 8004090 <_puts_r+0x10>
 8004088:	6983      	ldr	r3, [r0, #24]
 800408a:	b90b      	cbnz	r3, 8004090 <_puts_r+0x10>
 800408c:	f000 fa48 	bl	8004520 <__sinit>
 8004090:	69ab      	ldr	r3, [r5, #24]
 8004092:	68ac      	ldr	r4, [r5, #8]
 8004094:	b913      	cbnz	r3, 800409c <_puts_r+0x1c>
 8004096:	4628      	mov	r0, r5
 8004098:	f000 fa42 	bl	8004520 <__sinit>
 800409c:	4b23      	ldr	r3, [pc, #140]	; (800412c <_puts_r+0xac>)
 800409e:	429c      	cmp	r4, r3
 80040a0:	d117      	bne.n	80040d2 <_puts_r+0x52>
 80040a2:	686c      	ldr	r4, [r5, #4]
 80040a4:	89a3      	ldrh	r3, [r4, #12]
 80040a6:	071b      	lsls	r3, r3, #28
 80040a8:	d51d      	bpl.n	80040e6 <_puts_r+0x66>
 80040aa:	6923      	ldr	r3, [r4, #16]
 80040ac:	b1db      	cbz	r3, 80040e6 <_puts_r+0x66>
 80040ae:	3e01      	subs	r6, #1
 80040b0:	68a3      	ldr	r3, [r4, #8]
 80040b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80040b6:	3b01      	subs	r3, #1
 80040b8:	60a3      	str	r3, [r4, #8]
 80040ba:	b9e9      	cbnz	r1, 80040f8 <_puts_r+0x78>
 80040bc:	2b00      	cmp	r3, #0
 80040be:	da2e      	bge.n	800411e <_puts_r+0x9e>
 80040c0:	4622      	mov	r2, r4
 80040c2:	210a      	movs	r1, #10
 80040c4:	4628      	mov	r0, r5
 80040c6:	f000 f879 	bl	80041bc <__swbuf_r>
 80040ca:	3001      	adds	r0, #1
 80040cc:	d011      	beq.n	80040f2 <_puts_r+0x72>
 80040ce:	200a      	movs	r0, #10
 80040d0:	bd70      	pop	{r4, r5, r6, pc}
 80040d2:	4b17      	ldr	r3, [pc, #92]	; (8004130 <_puts_r+0xb0>)
 80040d4:	429c      	cmp	r4, r3
 80040d6:	d101      	bne.n	80040dc <_puts_r+0x5c>
 80040d8:	68ac      	ldr	r4, [r5, #8]
 80040da:	e7e3      	b.n	80040a4 <_puts_r+0x24>
 80040dc:	4b15      	ldr	r3, [pc, #84]	; (8004134 <_puts_r+0xb4>)
 80040de:	429c      	cmp	r4, r3
 80040e0:	bf08      	it	eq
 80040e2:	68ec      	ldreq	r4, [r5, #12]
 80040e4:	e7de      	b.n	80040a4 <_puts_r+0x24>
 80040e6:	4621      	mov	r1, r4
 80040e8:	4628      	mov	r0, r5
 80040ea:	f000 f8b9 	bl	8004260 <__swsetup_r>
 80040ee:	2800      	cmp	r0, #0
 80040f0:	d0dd      	beq.n	80040ae <_puts_r+0x2e>
 80040f2:	f04f 30ff 	mov.w	r0, #4294967295
 80040f6:	bd70      	pop	{r4, r5, r6, pc}
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	da04      	bge.n	8004106 <_puts_r+0x86>
 80040fc:	69a2      	ldr	r2, [r4, #24]
 80040fe:	4293      	cmp	r3, r2
 8004100:	db06      	blt.n	8004110 <_puts_r+0x90>
 8004102:	290a      	cmp	r1, #10
 8004104:	d004      	beq.n	8004110 <_puts_r+0x90>
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	6022      	str	r2, [r4, #0]
 800410c:	7019      	strb	r1, [r3, #0]
 800410e:	e7cf      	b.n	80040b0 <_puts_r+0x30>
 8004110:	4622      	mov	r2, r4
 8004112:	4628      	mov	r0, r5
 8004114:	f000 f852 	bl	80041bc <__swbuf_r>
 8004118:	3001      	adds	r0, #1
 800411a:	d1c9      	bne.n	80040b0 <_puts_r+0x30>
 800411c:	e7e9      	b.n	80040f2 <_puts_r+0x72>
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	200a      	movs	r0, #10
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	6022      	str	r2, [r4, #0]
 8004126:	7018      	strb	r0, [r3, #0]
 8004128:	bd70      	pop	{r4, r5, r6, pc}
 800412a:	bf00      	nop
 800412c:	08004ad4 	.word	0x08004ad4
 8004130:	08004af4 	.word	0x08004af4
 8004134:	08004ab4 	.word	0x08004ab4

08004138 <puts>:
 8004138:	4b02      	ldr	r3, [pc, #8]	; (8004144 <puts+0xc>)
 800413a:	4601      	mov	r1, r0
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	f7ff bf9f 	b.w	8004080 <_puts_r>
 8004142:	bf00      	nop
 8004144:	20000018 	.word	0x20000018

08004148 <rand>:
 8004148:	4b19      	ldr	r3, [pc, #100]	; (80041b0 <rand+0x68>)
 800414a:	b510      	push	{r4, lr}
 800414c:	681c      	ldr	r4, [r3, #0]
 800414e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004150:	b9d3      	cbnz	r3, 8004188 <rand+0x40>
 8004152:	2018      	movs	r0, #24
 8004154:	f000 fad2 	bl	80046fc <malloc>
 8004158:	f243 330e 	movw	r3, #13070	; 0x330e
 800415c:	63a0      	str	r0, [r4, #56]	; 0x38
 800415e:	8003      	strh	r3, [r0, #0]
 8004160:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8004164:	8043      	strh	r3, [r0, #2]
 8004166:	f241 2334 	movw	r3, #4660	; 0x1234
 800416a:	8083      	strh	r3, [r0, #4]
 800416c:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8004170:	80c3      	strh	r3, [r0, #6]
 8004172:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8004176:	8103      	strh	r3, [r0, #8]
 8004178:	2305      	movs	r3, #5
 800417a:	8143      	strh	r3, [r0, #10]
 800417c:	230b      	movs	r3, #11
 800417e:	8183      	strh	r3, [r0, #12]
 8004180:	2201      	movs	r2, #1
 8004182:	2300      	movs	r3, #0
 8004184:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004188:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800418a:	480a      	ldr	r0, [pc, #40]	; (80041b4 <rand+0x6c>)
 800418c:	690a      	ldr	r2, [r1, #16]
 800418e:	694b      	ldr	r3, [r1, #20]
 8004190:	4c09      	ldr	r4, [pc, #36]	; (80041b8 <rand+0x70>)
 8004192:	4350      	muls	r0, r2
 8004194:	fb04 0003 	mla	r0, r4, r3, r0
 8004198:	fba2 2304 	umull	r2, r3, r2, r4
 800419c:	3201      	adds	r2, #1
 800419e:	4403      	add	r3, r0
 80041a0:	f143 0300 	adc.w	r3, r3, #0
 80041a4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80041a8:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80041ac:	bd10      	pop	{r4, pc}
 80041ae:	bf00      	nop
 80041b0:	20000018 	.word	0x20000018
 80041b4:	5851f42d 	.word	0x5851f42d
 80041b8:	4c957f2d 	.word	0x4c957f2d

080041bc <__swbuf_r>:
 80041bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041be:	460e      	mov	r6, r1
 80041c0:	4614      	mov	r4, r2
 80041c2:	4605      	mov	r5, r0
 80041c4:	b118      	cbz	r0, 80041ce <__swbuf_r+0x12>
 80041c6:	6983      	ldr	r3, [r0, #24]
 80041c8:	b90b      	cbnz	r3, 80041ce <__swbuf_r+0x12>
 80041ca:	f000 f9a9 	bl	8004520 <__sinit>
 80041ce:	4b21      	ldr	r3, [pc, #132]	; (8004254 <__swbuf_r+0x98>)
 80041d0:	429c      	cmp	r4, r3
 80041d2:	d12a      	bne.n	800422a <__swbuf_r+0x6e>
 80041d4:	686c      	ldr	r4, [r5, #4]
 80041d6:	69a3      	ldr	r3, [r4, #24]
 80041d8:	60a3      	str	r3, [r4, #8]
 80041da:	89a3      	ldrh	r3, [r4, #12]
 80041dc:	071a      	lsls	r2, r3, #28
 80041de:	d52e      	bpl.n	800423e <__swbuf_r+0x82>
 80041e0:	6923      	ldr	r3, [r4, #16]
 80041e2:	b363      	cbz	r3, 800423e <__swbuf_r+0x82>
 80041e4:	6923      	ldr	r3, [r4, #16]
 80041e6:	6820      	ldr	r0, [r4, #0]
 80041e8:	1ac0      	subs	r0, r0, r3
 80041ea:	6963      	ldr	r3, [r4, #20]
 80041ec:	b2f6      	uxtb	r6, r6
 80041ee:	4298      	cmp	r0, r3
 80041f0:	4637      	mov	r7, r6
 80041f2:	db04      	blt.n	80041fe <__swbuf_r+0x42>
 80041f4:	4621      	mov	r1, r4
 80041f6:	4628      	mov	r0, r5
 80041f8:	f000 f928 	bl	800444c <_fflush_r>
 80041fc:	bb28      	cbnz	r0, 800424a <__swbuf_r+0x8e>
 80041fe:	68a3      	ldr	r3, [r4, #8]
 8004200:	3b01      	subs	r3, #1
 8004202:	60a3      	str	r3, [r4, #8]
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	6022      	str	r2, [r4, #0]
 800420a:	701e      	strb	r6, [r3, #0]
 800420c:	6963      	ldr	r3, [r4, #20]
 800420e:	3001      	adds	r0, #1
 8004210:	4298      	cmp	r0, r3
 8004212:	d004      	beq.n	800421e <__swbuf_r+0x62>
 8004214:	89a3      	ldrh	r3, [r4, #12]
 8004216:	07db      	lsls	r3, r3, #31
 8004218:	d519      	bpl.n	800424e <__swbuf_r+0x92>
 800421a:	2e0a      	cmp	r6, #10
 800421c:	d117      	bne.n	800424e <__swbuf_r+0x92>
 800421e:	4621      	mov	r1, r4
 8004220:	4628      	mov	r0, r5
 8004222:	f000 f913 	bl	800444c <_fflush_r>
 8004226:	b190      	cbz	r0, 800424e <__swbuf_r+0x92>
 8004228:	e00f      	b.n	800424a <__swbuf_r+0x8e>
 800422a:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <__swbuf_r+0x9c>)
 800422c:	429c      	cmp	r4, r3
 800422e:	d101      	bne.n	8004234 <__swbuf_r+0x78>
 8004230:	68ac      	ldr	r4, [r5, #8]
 8004232:	e7d0      	b.n	80041d6 <__swbuf_r+0x1a>
 8004234:	4b09      	ldr	r3, [pc, #36]	; (800425c <__swbuf_r+0xa0>)
 8004236:	429c      	cmp	r4, r3
 8004238:	bf08      	it	eq
 800423a:	68ec      	ldreq	r4, [r5, #12]
 800423c:	e7cb      	b.n	80041d6 <__swbuf_r+0x1a>
 800423e:	4621      	mov	r1, r4
 8004240:	4628      	mov	r0, r5
 8004242:	f000 f80d 	bl	8004260 <__swsetup_r>
 8004246:	2800      	cmp	r0, #0
 8004248:	d0cc      	beq.n	80041e4 <__swbuf_r+0x28>
 800424a:	f04f 37ff 	mov.w	r7, #4294967295
 800424e:	4638      	mov	r0, r7
 8004250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004252:	bf00      	nop
 8004254:	08004ad4 	.word	0x08004ad4
 8004258:	08004af4 	.word	0x08004af4
 800425c:	08004ab4 	.word	0x08004ab4

08004260 <__swsetup_r>:
 8004260:	4b32      	ldr	r3, [pc, #200]	; (800432c <__swsetup_r+0xcc>)
 8004262:	b570      	push	{r4, r5, r6, lr}
 8004264:	681d      	ldr	r5, [r3, #0]
 8004266:	4606      	mov	r6, r0
 8004268:	460c      	mov	r4, r1
 800426a:	b125      	cbz	r5, 8004276 <__swsetup_r+0x16>
 800426c:	69ab      	ldr	r3, [r5, #24]
 800426e:	b913      	cbnz	r3, 8004276 <__swsetup_r+0x16>
 8004270:	4628      	mov	r0, r5
 8004272:	f000 f955 	bl	8004520 <__sinit>
 8004276:	4b2e      	ldr	r3, [pc, #184]	; (8004330 <__swsetup_r+0xd0>)
 8004278:	429c      	cmp	r4, r3
 800427a:	d10f      	bne.n	800429c <__swsetup_r+0x3c>
 800427c:	686c      	ldr	r4, [r5, #4]
 800427e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004282:	b29a      	uxth	r2, r3
 8004284:	0715      	lsls	r5, r2, #28
 8004286:	d42c      	bmi.n	80042e2 <__swsetup_r+0x82>
 8004288:	06d0      	lsls	r0, r2, #27
 800428a:	d411      	bmi.n	80042b0 <__swsetup_r+0x50>
 800428c:	2209      	movs	r2, #9
 800428e:	6032      	str	r2, [r6, #0]
 8004290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004294:	81a3      	strh	r3, [r4, #12]
 8004296:	f04f 30ff 	mov.w	r0, #4294967295
 800429a:	bd70      	pop	{r4, r5, r6, pc}
 800429c:	4b25      	ldr	r3, [pc, #148]	; (8004334 <__swsetup_r+0xd4>)
 800429e:	429c      	cmp	r4, r3
 80042a0:	d101      	bne.n	80042a6 <__swsetup_r+0x46>
 80042a2:	68ac      	ldr	r4, [r5, #8]
 80042a4:	e7eb      	b.n	800427e <__swsetup_r+0x1e>
 80042a6:	4b24      	ldr	r3, [pc, #144]	; (8004338 <__swsetup_r+0xd8>)
 80042a8:	429c      	cmp	r4, r3
 80042aa:	bf08      	it	eq
 80042ac:	68ec      	ldreq	r4, [r5, #12]
 80042ae:	e7e6      	b.n	800427e <__swsetup_r+0x1e>
 80042b0:	0751      	lsls	r1, r2, #29
 80042b2:	d512      	bpl.n	80042da <__swsetup_r+0x7a>
 80042b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042b6:	b141      	cbz	r1, 80042ca <__swsetup_r+0x6a>
 80042b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042bc:	4299      	cmp	r1, r3
 80042be:	d002      	beq.n	80042c6 <__swsetup_r+0x66>
 80042c0:	4630      	mov	r0, r6
 80042c2:	f000 fa2b 	bl	800471c <_free_r>
 80042c6:	2300      	movs	r3, #0
 80042c8:	6363      	str	r3, [r4, #52]	; 0x34
 80042ca:	89a3      	ldrh	r3, [r4, #12]
 80042cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80042d0:	81a3      	strh	r3, [r4, #12]
 80042d2:	2300      	movs	r3, #0
 80042d4:	6063      	str	r3, [r4, #4]
 80042d6:	6923      	ldr	r3, [r4, #16]
 80042d8:	6023      	str	r3, [r4, #0]
 80042da:	89a3      	ldrh	r3, [r4, #12]
 80042dc:	f043 0308 	orr.w	r3, r3, #8
 80042e0:	81a3      	strh	r3, [r4, #12]
 80042e2:	6923      	ldr	r3, [r4, #16]
 80042e4:	b94b      	cbnz	r3, 80042fa <__swsetup_r+0x9a>
 80042e6:	89a3      	ldrh	r3, [r4, #12]
 80042e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80042ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f0:	d003      	beq.n	80042fa <__swsetup_r+0x9a>
 80042f2:	4621      	mov	r1, r4
 80042f4:	4630      	mov	r0, r6
 80042f6:	f000 f9c1 	bl	800467c <__smakebuf_r>
 80042fa:	89a2      	ldrh	r2, [r4, #12]
 80042fc:	f012 0301 	ands.w	r3, r2, #1
 8004300:	d00c      	beq.n	800431c <__swsetup_r+0xbc>
 8004302:	2300      	movs	r3, #0
 8004304:	60a3      	str	r3, [r4, #8]
 8004306:	6963      	ldr	r3, [r4, #20]
 8004308:	425b      	negs	r3, r3
 800430a:	61a3      	str	r3, [r4, #24]
 800430c:	6923      	ldr	r3, [r4, #16]
 800430e:	b953      	cbnz	r3, 8004326 <__swsetup_r+0xc6>
 8004310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004314:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004318:	d1ba      	bne.n	8004290 <__swsetup_r+0x30>
 800431a:	bd70      	pop	{r4, r5, r6, pc}
 800431c:	0792      	lsls	r2, r2, #30
 800431e:	bf58      	it	pl
 8004320:	6963      	ldrpl	r3, [r4, #20]
 8004322:	60a3      	str	r3, [r4, #8]
 8004324:	e7f2      	b.n	800430c <__swsetup_r+0xac>
 8004326:	2000      	movs	r0, #0
 8004328:	e7f7      	b.n	800431a <__swsetup_r+0xba>
 800432a:	bf00      	nop
 800432c:	20000018 	.word	0x20000018
 8004330:	08004ad4 	.word	0x08004ad4
 8004334:	08004af4 	.word	0x08004af4
 8004338:	08004ab4 	.word	0x08004ab4

0800433c <__sflush_r>:
 800433c:	898a      	ldrh	r2, [r1, #12]
 800433e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004342:	4605      	mov	r5, r0
 8004344:	0710      	lsls	r0, r2, #28
 8004346:	460c      	mov	r4, r1
 8004348:	d45a      	bmi.n	8004400 <__sflush_r+0xc4>
 800434a:	684b      	ldr	r3, [r1, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	dc05      	bgt.n	800435c <__sflush_r+0x20>
 8004350:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004352:	2b00      	cmp	r3, #0
 8004354:	dc02      	bgt.n	800435c <__sflush_r+0x20>
 8004356:	2000      	movs	r0, #0
 8004358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800435c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800435e:	2e00      	cmp	r6, #0
 8004360:	d0f9      	beq.n	8004356 <__sflush_r+0x1a>
 8004362:	2300      	movs	r3, #0
 8004364:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004368:	682f      	ldr	r7, [r5, #0]
 800436a:	602b      	str	r3, [r5, #0]
 800436c:	d033      	beq.n	80043d6 <__sflush_r+0x9a>
 800436e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004370:	89a3      	ldrh	r3, [r4, #12]
 8004372:	075a      	lsls	r2, r3, #29
 8004374:	d505      	bpl.n	8004382 <__sflush_r+0x46>
 8004376:	6863      	ldr	r3, [r4, #4]
 8004378:	1ac0      	subs	r0, r0, r3
 800437a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800437c:	b10b      	cbz	r3, 8004382 <__sflush_r+0x46>
 800437e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004380:	1ac0      	subs	r0, r0, r3
 8004382:	2300      	movs	r3, #0
 8004384:	4602      	mov	r2, r0
 8004386:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004388:	6a21      	ldr	r1, [r4, #32]
 800438a:	4628      	mov	r0, r5
 800438c:	47b0      	blx	r6
 800438e:	1c43      	adds	r3, r0, #1
 8004390:	89a3      	ldrh	r3, [r4, #12]
 8004392:	d106      	bne.n	80043a2 <__sflush_r+0x66>
 8004394:	6829      	ldr	r1, [r5, #0]
 8004396:	291d      	cmp	r1, #29
 8004398:	d84b      	bhi.n	8004432 <__sflush_r+0xf6>
 800439a:	4a2b      	ldr	r2, [pc, #172]	; (8004448 <__sflush_r+0x10c>)
 800439c:	40ca      	lsrs	r2, r1
 800439e:	07d6      	lsls	r6, r2, #31
 80043a0:	d547      	bpl.n	8004432 <__sflush_r+0xf6>
 80043a2:	2200      	movs	r2, #0
 80043a4:	6062      	str	r2, [r4, #4]
 80043a6:	04d9      	lsls	r1, r3, #19
 80043a8:	6922      	ldr	r2, [r4, #16]
 80043aa:	6022      	str	r2, [r4, #0]
 80043ac:	d504      	bpl.n	80043b8 <__sflush_r+0x7c>
 80043ae:	1c42      	adds	r2, r0, #1
 80043b0:	d101      	bne.n	80043b6 <__sflush_r+0x7a>
 80043b2:	682b      	ldr	r3, [r5, #0]
 80043b4:	b903      	cbnz	r3, 80043b8 <__sflush_r+0x7c>
 80043b6:	6560      	str	r0, [r4, #84]	; 0x54
 80043b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043ba:	602f      	str	r7, [r5, #0]
 80043bc:	2900      	cmp	r1, #0
 80043be:	d0ca      	beq.n	8004356 <__sflush_r+0x1a>
 80043c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043c4:	4299      	cmp	r1, r3
 80043c6:	d002      	beq.n	80043ce <__sflush_r+0x92>
 80043c8:	4628      	mov	r0, r5
 80043ca:	f000 f9a7 	bl	800471c <_free_r>
 80043ce:	2000      	movs	r0, #0
 80043d0:	6360      	str	r0, [r4, #52]	; 0x34
 80043d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043d6:	6a21      	ldr	r1, [r4, #32]
 80043d8:	2301      	movs	r3, #1
 80043da:	4628      	mov	r0, r5
 80043dc:	47b0      	blx	r6
 80043de:	1c41      	adds	r1, r0, #1
 80043e0:	d1c6      	bne.n	8004370 <__sflush_r+0x34>
 80043e2:	682b      	ldr	r3, [r5, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d0c3      	beq.n	8004370 <__sflush_r+0x34>
 80043e8:	2b1d      	cmp	r3, #29
 80043ea:	d001      	beq.n	80043f0 <__sflush_r+0xb4>
 80043ec:	2b16      	cmp	r3, #22
 80043ee:	d101      	bne.n	80043f4 <__sflush_r+0xb8>
 80043f0:	602f      	str	r7, [r5, #0]
 80043f2:	e7b0      	b.n	8004356 <__sflush_r+0x1a>
 80043f4:	89a3      	ldrh	r3, [r4, #12]
 80043f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043fa:	81a3      	strh	r3, [r4, #12]
 80043fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004400:	690f      	ldr	r7, [r1, #16]
 8004402:	2f00      	cmp	r7, #0
 8004404:	d0a7      	beq.n	8004356 <__sflush_r+0x1a>
 8004406:	0793      	lsls	r3, r2, #30
 8004408:	680e      	ldr	r6, [r1, #0]
 800440a:	bf08      	it	eq
 800440c:	694b      	ldreq	r3, [r1, #20]
 800440e:	600f      	str	r7, [r1, #0]
 8004410:	bf18      	it	ne
 8004412:	2300      	movne	r3, #0
 8004414:	eba6 0807 	sub.w	r8, r6, r7
 8004418:	608b      	str	r3, [r1, #8]
 800441a:	f1b8 0f00 	cmp.w	r8, #0
 800441e:	dd9a      	ble.n	8004356 <__sflush_r+0x1a>
 8004420:	4643      	mov	r3, r8
 8004422:	463a      	mov	r2, r7
 8004424:	6a21      	ldr	r1, [r4, #32]
 8004426:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004428:	4628      	mov	r0, r5
 800442a:	47b0      	blx	r6
 800442c:	2800      	cmp	r0, #0
 800442e:	dc07      	bgt.n	8004440 <__sflush_r+0x104>
 8004430:	89a3      	ldrh	r3, [r4, #12]
 8004432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004436:	81a3      	strh	r3, [r4, #12]
 8004438:	f04f 30ff 	mov.w	r0, #4294967295
 800443c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004440:	4407      	add	r7, r0
 8004442:	eba8 0800 	sub.w	r8, r8, r0
 8004446:	e7e8      	b.n	800441a <__sflush_r+0xde>
 8004448:	20400001 	.word	0x20400001

0800444c <_fflush_r>:
 800444c:	b538      	push	{r3, r4, r5, lr}
 800444e:	690b      	ldr	r3, [r1, #16]
 8004450:	4605      	mov	r5, r0
 8004452:	460c      	mov	r4, r1
 8004454:	b1db      	cbz	r3, 800448e <_fflush_r+0x42>
 8004456:	b118      	cbz	r0, 8004460 <_fflush_r+0x14>
 8004458:	6983      	ldr	r3, [r0, #24]
 800445a:	b90b      	cbnz	r3, 8004460 <_fflush_r+0x14>
 800445c:	f000 f860 	bl	8004520 <__sinit>
 8004460:	4b0c      	ldr	r3, [pc, #48]	; (8004494 <_fflush_r+0x48>)
 8004462:	429c      	cmp	r4, r3
 8004464:	d109      	bne.n	800447a <_fflush_r+0x2e>
 8004466:	686c      	ldr	r4, [r5, #4]
 8004468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800446c:	b17b      	cbz	r3, 800448e <_fflush_r+0x42>
 800446e:	4621      	mov	r1, r4
 8004470:	4628      	mov	r0, r5
 8004472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004476:	f7ff bf61 	b.w	800433c <__sflush_r>
 800447a:	4b07      	ldr	r3, [pc, #28]	; (8004498 <_fflush_r+0x4c>)
 800447c:	429c      	cmp	r4, r3
 800447e:	d101      	bne.n	8004484 <_fflush_r+0x38>
 8004480:	68ac      	ldr	r4, [r5, #8]
 8004482:	e7f1      	b.n	8004468 <_fflush_r+0x1c>
 8004484:	4b05      	ldr	r3, [pc, #20]	; (800449c <_fflush_r+0x50>)
 8004486:	429c      	cmp	r4, r3
 8004488:	bf08      	it	eq
 800448a:	68ec      	ldreq	r4, [r5, #12]
 800448c:	e7ec      	b.n	8004468 <_fflush_r+0x1c>
 800448e:	2000      	movs	r0, #0
 8004490:	bd38      	pop	{r3, r4, r5, pc}
 8004492:	bf00      	nop
 8004494:	08004ad4 	.word	0x08004ad4
 8004498:	08004af4 	.word	0x08004af4
 800449c:	08004ab4 	.word	0x08004ab4

080044a0 <_cleanup_r>:
 80044a0:	4901      	ldr	r1, [pc, #4]	; (80044a8 <_cleanup_r+0x8>)
 80044a2:	f000 b8a9 	b.w	80045f8 <_fwalk_reent>
 80044a6:	bf00      	nop
 80044a8:	0800444d 	.word	0x0800444d

080044ac <std.isra.0>:
 80044ac:	2300      	movs	r3, #0
 80044ae:	b510      	push	{r4, lr}
 80044b0:	4604      	mov	r4, r0
 80044b2:	6003      	str	r3, [r0, #0]
 80044b4:	6043      	str	r3, [r0, #4]
 80044b6:	6083      	str	r3, [r0, #8]
 80044b8:	8181      	strh	r1, [r0, #12]
 80044ba:	6643      	str	r3, [r0, #100]	; 0x64
 80044bc:	81c2      	strh	r2, [r0, #14]
 80044be:	6103      	str	r3, [r0, #16]
 80044c0:	6143      	str	r3, [r0, #20]
 80044c2:	6183      	str	r3, [r0, #24]
 80044c4:	4619      	mov	r1, r3
 80044c6:	2208      	movs	r2, #8
 80044c8:	305c      	adds	r0, #92	; 0x5c
 80044ca:	f000 f91f 	bl	800470c <memset>
 80044ce:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <std.isra.0+0x38>)
 80044d0:	6263      	str	r3, [r4, #36]	; 0x24
 80044d2:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <std.isra.0+0x3c>)
 80044d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80044d6:	4b05      	ldr	r3, [pc, #20]	; (80044ec <std.isra.0+0x40>)
 80044d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044da:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <std.isra.0+0x44>)
 80044dc:	6224      	str	r4, [r4, #32]
 80044de:	6323      	str	r3, [r4, #48]	; 0x30
 80044e0:	bd10      	pop	{r4, pc}
 80044e2:	bf00      	nop
 80044e4:	08004895 	.word	0x08004895
 80044e8:	080048b7 	.word	0x080048b7
 80044ec:	080048ef 	.word	0x080048ef
 80044f0:	08004913 	.word	0x08004913

080044f4 <__sfmoreglue>:
 80044f4:	b570      	push	{r4, r5, r6, lr}
 80044f6:	1e4a      	subs	r2, r1, #1
 80044f8:	2568      	movs	r5, #104	; 0x68
 80044fa:	4355      	muls	r5, r2
 80044fc:	460e      	mov	r6, r1
 80044fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004502:	f000 f959 	bl	80047b8 <_malloc_r>
 8004506:	4604      	mov	r4, r0
 8004508:	b140      	cbz	r0, 800451c <__sfmoreglue+0x28>
 800450a:	2100      	movs	r1, #0
 800450c:	e880 0042 	stmia.w	r0, {r1, r6}
 8004510:	300c      	adds	r0, #12
 8004512:	60a0      	str	r0, [r4, #8]
 8004514:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004518:	f000 f8f8 	bl	800470c <memset>
 800451c:	4620      	mov	r0, r4
 800451e:	bd70      	pop	{r4, r5, r6, pc}

08004520 <__sinit>:
 8004520:	6983      	ldr	r3, [r0, #24]
 8004522:	b510      	push	{r4, lr}
 8004524:	4604      	mov	r4, r0
 8004526:	bb33      	cbnz	r3, 8004576 <__sinit+0x56>
 8004528:	6483      	str	r3, [r0, #72]	; 0x48
 800452a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800452c:	6503      	str	r3, [r0, #80]	; 0x50
 800452e:	4b12      	ldr	r3, [pc, #72]	; (8004578 <__sinit+0x58>)
 8004530:	4a12      	ldr	r2, [pc, #72]	; (800457c <__sinit+0x5c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6282      	str	r2, [r0, #40]	; 0x28
 8004536:	4298      	cmp	r0, r3
 8004538:	bf04      	itt	eq
 800453a:	2301      	moveq	r3, #1
 800453c:	6183      	streq	r3, [r0, #24]
 800453e:	f000 f81f 	bl	8004580 <__sfp>
 8004542:	6060      	str	r0, [r4, #4]
 8004544:	4620      	mov	r0, r4
 8004546:	f000 f81b 	bl	8004580 <__sfp>
 800454a:	60a0      	str	r0, [r4, #8]
 800454c:	4620      	mov	r0, r4
 800454e:	f000 f817 	bl	8004580 <__sfp>
 8004552:	2200      	movs	r2, #0
 8004554:	60e0      	str	r0, [r4, #12]
 8004556:	2104      	movs	r1, #4
 8004558:	6860      	ldr	r0, [r4, #4]
 800455a:	f7ff ffa7 	bl	80044ac <std.isra.0>
 800455e:	2201      	movs	r2, #1
 8004560:	2109      	movs	r1, #9
 8004562:	68a0      	ldr	r0, [r4, #8]
 8004564:	f7ff ffa2 	bl	80044ac <std.isra.0>
 8004568:	2202      	movs	r2, #2
 800456a:	2112      	movs	r1, #18
 800456c:	68e0      	ldr	r0, [r4, #12]
 800456e:	f7ff ff9d 	bl	80044ac <std.isra.0>
 8004572:	2301      	movs	r3, #1
 8004574:	61a3      	str	r3, [r4, #24]
 8004576:	bd10      	pop	{r4, pc}
 8004578:	08004b14 	.word	0x08004b14
 800457c:	080044a1 	.word	0x080044a1

08004580 <__sfp>:
 8004580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004582:	4b1c      	ldr	r3, [pc, #112]	; (80045f4 <__sfp+0x74>)
 8004584:	681e      	ldr	r6, [r3, #0]
 8004586:	69b3      	ldr	r3, [r6, #24]
 8004588:	4607      	mov	r7, r0
 800458a:	b913      	cbnz	r3, 8004592 <__sfp+0x12>
 800458c:	4630      	mov	r0, r6
 800458e:	f7ff ffc7 	bl	8004520 <__sinit>
 8004592:	3648      	adds	r6, #72	; 0x48
 8004594:	68b4      	ldr	r4, [r6, #8]
 8004596:	6873      	ldr	r3, [r6, #4]
 8004598:	3b01      	subs	r3, #1
 800459a:	d503      	bpl.n	80045a4 <__sfp+0x24>
 800459c:	6833      	ldr	r3, [r6, #0]
 800459e:	b133      	cbz	r3, 80045ae <__sfp+0x2e>
 80045a0:	6836      	ldr	r6, [r6, #0]
 80045a2:	e7f7      	b.n	8004594 <__sfp+0x14>
 80045a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80045a8:	b16d      	cbz	r5, 80045c6 <__sfp+0x46>
 80045aa:	3468      	adds	r4, #104	; 0x68
 80045ac:	e7f4      	b.n	8004598 <__sfp+0x18>
 80045ae:	2104      	movs	r1, #4
 80045b0:	4638      	mov	r0, r7
 80045b2:	f7ff ff9f 	bl	80044f4 <__sfmoreglue>
 80045b6:	6030      	str	r0, [r6, #0]
 80045b8:	2800      	cmp	r0, #0
 80045ba:	d1f1      	bne.n	80045a0 <__sfp+0x20>
 80045bc:	230c      	movs	r3, #12
 80045be:	603b      	str	r3, [r7, #0]
 80045c0:	4604      	mov	r4, r0
 80045c2:	4620      	mov	r0, r4
 80045c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045ca:	81e3      	strh	r3, [r4, #14]
 80045cc:	2301      	movs	r3, #1
 80045ce:	81a3      	strh	r3, [r4, #12]
 80045d0:	6665      	str	r5, [r4, #100]	; 0x64
 80045d2:	6025      	str	r5, [r4, #0]
 80045d4:	60a5      	str	r5, [r4, #8]
 80045d6:	6065      	str	r5, [r4, #4]
 80045d8:	6125      	str	r5, [r4, #16]
 80045da:	6165      	str	r5, [r4, #20]
 80045dc:	61a5      	str	r5, [r4, #24]
 80045de:	2208      	movs	r2, #8
 80045e0:	4629      	mov	r1, r5
 80045e2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80045e6:	f000 f891 	bl	800470c <memset>
 80045ea:	6365      	str	r5, [r4, #52]	; 0x34
 80045ec:	63a5      	str	r5, [r4, #56]	; 0x38
 80045ee:	64a5      	str	r5, [r4, #72]	; 0x48
 80045f0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80045f2:	e7e6      	b.n	80045c2 <__sfp+0x42>
 80045f4:	08004b14 	.word	0x08004b14

080045f8 <_fwalk_reent>:
 80045f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045fc:	4680      	mov	r8, r0
 80045fe:	4689      	mov	r9, r1
 8004600:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004604:	2600      	movs	r6, #0
 8004606:	b914      	cbnz	r4, 800460e <_fwalk_reent+0x16>
 8004608:	4630      	mov	r0, r6
 800460a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800460e:	68a5      	ldr	r5, [r4, #8]
 8004610:	6867      	ldr	r7, [r4, #4]
 8004612:	3f01      	subs	r7, #1
 8004614:	d501      	bpl.n	800461a <_fwalk_reent+0x22>
 8004616:	6824      	ldr	r4, [r4, #0]
 8004618:	e7f5      	b.n	8004606 <_fwalk_reent+0xe>
 800461a:	89ab      	ldrh	r3, [r5, #12]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d907      	bls.n	8004630 <_fwalk_reent+0x38>
 8004620:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004624:	3301      	adds	r3, #1
 8004626:	d003      	beq.n	8004630 <_fwalk_reent+0x38>
 8004628:	4629      	mov	r1, r5
 800462a:	4640      	mov	r0, r8
 800462c:	47c8      	blx	r9
 800462e:	4306      	orrs	r6, r0
 8004630:	3568      	adds	r5, #104	; 0x68
 8004632:	e7ee      	b.n	8004612 <_fwalk_reent+0x1a>

08004634 <__swhatbuf_r>:
 8004634:	b570      	push	{r4, r5, r6, lr}
 8004636:	460e      	mov	r6, r1
 8004638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800463c:	2900      	cmp	r1, #0
 800463e:	b090      	sub	sp, #64	; 0x40
 8004640:	4614      	mov	r4, r2
 8004642:	461d      	mov	r5, r3
 8004644:	da07      	bge.n	8004656 <__swhatbuf_r+0x22>
 8004646:	2300      	movs	r3, #0
 8004648:	602b      	str	r3, [r5, #0]
 800464a:	89b3      	ldrh	r3, [r6, #12]
 800464c:	061a      	lsls	r2, r3, #24
 800464e:	d410      	bmi.n	8004672 <__swhatbuf_r+0x3e>
 8004650:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004654:	e00e      	b.n	8004674 <__swhatbuf_r+0x40>
 8004656:	aa01      	add	r2, sp, #4
 8004658:	f000 f982 	bl	8004960 <_fstat_r>
 800465c:	2800      	cmp	r0, #0
 800465e:	dbf2      	blt.n	8004646 <__swhatbuf_r+0x12>
 8004660:	9a02      	ldr	r2, [sp, #8]
 8004662:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004666:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800466a:	425a      	negs	r2, r3
 800466c:	415a      	adcs	r2, r3
 800466e:	602a      	str	r2, [r5, #0]
 8004670:	e7ee      	b.n	8004650 <__swhatbuf_r+0x1c>
 8004672:	2340      	movs	r3, #64	; 0x40
 8004674:	2000      	movs	r0, #0
 8004676:	6023      	str	r3, [r4, #0]
 8004678:	b010      	add	sp, #64	; 0x40
 800467a:	bd70      	pop	{r4, r5, r6, pc}

0800467c <__smakebuf_r>:
 800467c:	898b      	ldrh	r3, [r1, #12]
 800467e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004680:	079d      	lsls	r5, r3, #30
 8004682:	4606      	mov	r6, r0
 8004684:	460c      	mov	r4, r1
 8004686:	d507      	bpl.n	8004698 <__smakebuf_r+0x1c>
 8004688:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800468c:	6023      	str	r3, [r4, #0]
 800468e:	6123      	str	r3, [r4, #16]
 8004690:	2301      	movs	r3, #1
 8004692:	6163      	str	r3, [r4, #20]
 8004694:	b002      	add	sp, #8
 8004696:	bd70      	pop	{r4, r5, r6, pc}
 8004698:	ab01      	add	r3, sp, #4
 800469a:	466a      	mov	r2, sp
 800469c:	f7ff ffca 	bl	8004634 <__swhatbuf_r>
 80046a0:	9900      	ldr	r1, [sp, #0]
 80046a2:	4605      	mov	r5, r0
 80046a4:	4630      	mov	r0, r6
 80046a6:	f000 f887 	bl	80047b8 <_malloc_r>
 80046aa:	b948      	cbnz	r0, 80046c0 <__smakebuf_r+0x44>
 80046ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046b0:	059a      	lsls	r2, r3, #22
 80046b2:	d4ef      	bmi.n	8004694 <__smakebuf_r+0x18>
 80046b4:	f023 0303 	bic.w	r3, r3, #3
 80046b8:	f043 0302 	orr.w	r3, r3, #2
 80046bc:	81a3      	strh	r3, [r4, #12]
 80046be:	e7e3      	b.n	8004688 <__smakebuf_r+0xc>
 80046c0:	4b0d      	ldr	r3, [pc, #52]	; (80046f8 <__smakebuf_r+0x7c>)
 80046c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80046c4:	89a3      	ldrh	r3, [r4, #12]
 80046c6:	6020      	str	r0, [r4, #0]
 80046c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046cc:	81a3      	strh	r3, [r4, #12]
 80046ce:	9b00      	ldr	r3, [sp, #0]
 80046d0:	6163      	str	r3, [r4, #20]
 80046d2:	9b01      	ldr	r3, [sp, #4]
 80046d4:	6120      	str	r0, [r4, #16]
 80046d6:	b15b      	cbz	r3, 80046f0 <__smakebuf_r+0x74>
 80046d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046dc:	4630      	mov	r0, r6
 80046de:	f000 f951 	bl	8004984 <_isatty_r>
 80046e2:	b128      	cbz	r0, 80046f0 <__smakebuf_r+0x74>
 80046e4:	89a3      	ldrh	r3, [r4, #12]
 80046e6:	f023 0303 	bic.w	r3, r3, #3
 80046ea:	f043 0301 	orr.w	r3, r3, #1
 80046ee:	81a3      	strh	r3, [r4, #12]
 80046f0:	89a3      	ldrh	r3, [r4, #12]
 80046f2:	431d      	orrs	r5, r3
 80046f4:	81a5      	strh	r5, [r4, #12]
 80046f6:	e7cd      	b.n	8004694 <__smakebuf_r+0x18>
 80046f8:	080044a1 	.word	0x080044a1

080046fc <malloc>:
 80046fc:	4b02      	ldr	r3, [pc, #8]	; (8004708 <malloc+0xc>)
 80046fe:	4601      	mov	r1, r0
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	f000 b859 	b.w	80047b8 <_malloc_r>
 8004706:	bf00      	nop
 8004708:	20000018 	.word	0x20000018

0800470c <memset>:
 800470c:	4402      	add	r2, r0
 800470e:	4603      	mov	r3, r0
 8004710:	4293      	cmp	r3, r2
 8004712:	d100      	bne.n	8004716 <memset+0xa>
 8004714:	4770      	bx	lr
 8004716:	f803 1b01 	strb.w	r1, [r3], #1
 800471a:	e7f9      	b.n	8004710 <memset+0x4>

0800471c <_free_r>:
 800471c:	b538      	push	{r3, r4, r5, lr}
 800471e:	4605      	mov	r5, r0
 8004720:	2900      	cmp	r1, #0
 8004722:	d045      	beq.n	80047b0 <_free_r+0x94>
 8004724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004728:	1f0c      	subs	r4, r1, #4
 800472a:	2b00      	cmp	r3, #0
 800472c:	bfb8      	it	lt
 800472e:	18e4      	addlt	r4, r4, r3
 8004730:	f000 f94a 	bl	80049c8 <__malloc_lock>
 8004734:	4a1f      	ldr	r2, [pc, #124]	; (80047b4 <_free_r+0x98>)
 8004736:	6813      	ldr	r3, [r2, #0]
 8004738:	4610      	mov	r0, r2
 800473a:	b933      	cbnz	r3, 800474a <_free_r+0x2e>
 800473c:	6063      	str	r3, [r4, #4]
 800473e:	6014      	str	r4, [r2, #0]
 8004740:	4628      	mov	r0, r5
 8004742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004746:	f000 b940 	b.w	80049ca <__malloc_unlock>
 800474a:	42a3      	cmp	r3, r4
 800474c:	d90c      	bls.n	8004768 <_free_r+0x4c>
 800474e:	6821      	ldr	r1, [r4, #0]
 8004750:	1862      	adds	r2, r4, r1
 8004752:	4293      	cmp	r3, r2
 8004754:	bf04      	itt	eq
 8004756:	681a      	ldreq	r2, [r3, #0]
 8004758:	685b      	ldreq	r3, [r3, #4]
 800475a:	6063      	str	r3, [r4, #4]
 800475c:	bf04      	itt	eq
 800475e:	1852      	addeq	r2, r2, r1
 8004760:	6022      	streq	r2, [r4, #0]
 8004762:	6004      	str	r4, [r0, #0]
 8004764:	e7ec      	b.n	8004740 <_free_r+0x24>
 8004766:	4613      	mov	r3, r2
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	b10a      	cbz	r2, 8004770 <_free_r+0x54>
 800476c:	42a2      	cmp	r2, r4
 800476e:	d9fa      	bls.n	8004766 <_free_r+0x4a>
 8004770:	6819      	ldr	r1, [r3, #0]
 8004772:	1858      	adds	r0, r3, r1
 8004774:	42a0      	cmp	r0, r4
 8004776:	d10b      	bne.n	8004790 <_free_r+0x74>
 8004778:	6820      	ldr	r0, [r4, #0]
 800477a:	4401      	add	r1, r0
 800477c:	1858      	adds	r0, r3, r1
 800477e:	4282      	cmp	r2, r0
 8004780:	6019      	str	r1, [r3, #0]
 8004782:	d1dd      	bne.n	8004740 <_free_r+0x24>
 8004784:	6810      	ldr	r0, [r2, #0]
 8004786:	6852      	ldr	r2, [r2, #4]
 8004788:	605a      	str	r2, [r3, #4]
 800478a:	4401      	add	r1, r0
 800478c:	6019      	str	r1, [r3, #0]
 800478e:	e7d7      	b.n	8004740 <_free_r+0x24>
 8004790:	d902      	bls.n	8004798 <_free_r+0x7c>
 8004792:	230c      	movs	r3, #12
 8004794:	602b      	str	r3, [r5, #0]
 8004796:	e7d3      	b.n	8004740 <_free_r+0x24>
 8004798:	6820      	ldr	r0, [r4, #0]
 800479a:	1821      	adds	r1, r4, r0
 800479c:	428a      	cmp	r2, r1
 800479e:	bf04      	itt	eq
 80047a0:	6811      	ldreq	r1, [r2, #0]
 80047a2:	6852      	ldreq	r2, [r2, #4]
 80047a4:	6062      	str	r2, [r4, #4]
 80047a6:	bf04      	itt	eq
 80047a8:	1809      	addeq	r1, r1, r0
 80047aa:	6021      	streq	r1, [r4, #0]
 80047ac:	605c      	str	r4, [r3, #4]
 80047ae:	e7c7      	b.n	8004740 <_free_r+0x24>
 80047b0:	bd38      	pop	{r3, r4, r5, pc}
 80047b2:	bf00      	nop
 80047b4:	20001dfc 	.word	0x20001dfc

080047b8 <_malloc_r>:
 80047b8:	b570      	push	{r4, r5, r6, lr}
 80047ba:	1ccd      	adds	r5, r1, #3
 80047bc:	f025 0503 	bic.w	r5, r5, #3
 80047c0:	3508      	adds	r5, #8
 80047c2:	2d0c      	cmp	r5, #12
 80047c4:	bf38      	it	cc
 80047c6:	250c      	movcc	r5, #12
 80047c8:	2d00      	cmp	r5, #0
 80047ca:	4606      	mov	r6, r0
 80047cc:	db01      	blt.n	80047d2 <_malloc_r+0x1a>
 80047ce:	42a9      	cmp	r1, r5
 80047d0:	d903      	bls.n	80047da <_malloc_r+0x22>
 80047d2:	230c      	movs	r3, #12
 80047d4:	6033      	str	r3, [r6, #0]
 80047d6:	2000      	movs	r0, #0
 80047d8:	bd70      	pop	{r4, r5, r6, pc}
 80047da:	f000 f8f5 	bl	80049c8 <__malloc_lock>
 80047de:	4a23      	ldr	r2, [pc, #140]	; (800486c <_malloc_r+0xb4>)
 80047e0:	6814      	ldr	r4, [r2, #0]
 80047e2:	4621      	mov	r1, r4
 80047e4:	b991      	cbnz	r1, 800480c <_malloc_r+0x54>
 80047e6:	4c22      	ldr	r4, [pc, #136]	; (8004870 <_malloc_r+0xb8>)
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	b91b      	cbnz	r3, 80047f4 <_malloc_r+0x3c>
 80047ec:	4630      	mov	r0, r6
 80047ee:	f000 f841 	bl	8004874 <_sbrk_r>
 80047f2:	6020      	str	r0, [r4, #0]
 80047f4:	4629      	mov	r1, r5
 80047f6:	4630      	mov	r0, r6
 80047f8:	f000 f83c 	bl	8004874 <_sbrk_r>
 80047fc:	1c43      	adds	r3, r0, #1
 80047fe:	d126      	bne.n	800484e <_malloc_r+0x96>
 8004800:	230c      	movs	r3, #12
 8004802:	6033      	str	r3, [r6, #0]
 8004804:	4630      	mov	r0, r6
 8004806:	f000 f8e0 	bl	80049ca <__malloc_unlock>
 800480a:	e7e4      	b.n	80047d6 <_malloc_r+0x1e>
 800480c:	680b      	ldr	r3, [r1, #0]
 800480e:	1b5b      	subs	r3, r3, r5
 8004810:	d41a      	bmi.n	8004848 <_malloc_r+0x90>
 8004812:	2b0b      	cmp	r3, #11
 8004814:	d90f      	bls.n	8004836 <_malloc_r+0x7e>
 8004816:	600b      	str	r3, [r1, #0]
 8004818:	50cd      	str	r5, [r1, r3]
 800481a:	18cc      	adds	r4, r1, r3
 800481c:	4630      	mov	r0, r6
 800481e:	f000 f8d4 	bl	80049ca <__malloc_unlock>
 8004822:	f104 000b 	add.w	r0, r4, #11
 8004826:	1d23      	adds	r3, r4, #4
 8004828:	f020 0007 	bic.w	r0, r0, #7
 800482c:	1ac3      	subs	r3, r0, r3
 800482e:	d01b      	beq.n	8004868 <_malloc_r+0xb0>
 8004830:	425a      	negs	r2, r3
 8004832:	50e2      	str	r2, [r4, r3]
 8004834:	bd70      	pop	{r4, r5, r6, pc}
 8004836:	428c      	cmp	r4, r1
 8004838:	bf0d      	iteet	eq
 800483a:	6863      	ldreq	r3, [r4, #4]
 800483c:	684b      	ldrne	r3, [r1, #4]
 800483e:	6063      	strne	r3, [r4, #4]
 8004840:	6013      	streq	r3, [r2, #0]
 8004842:	bf18      	it	ne
 8004844:	460c      	movne	r4, r1
 8004846:	e7e9      	b.n	800481c <_malloc_r+0x64>
 8004848:	460c      	mov	r4, r1
 800484a:	6849      	ldr	r1, [r1, #4]
 800484c:	e7ca      	b.n	80047e4 <_malloc_r+0x2c>
 800484e:	1cc4      	adds	r4, r0, #3
 8004850:	f024 0403 	bic.w	r4, r4, #3
 8004854:	42a0      	cmp	r0, r4
 8004856:	d005      	beq.n	8004864 <_malloc_r+0xac>
 8004858:	1a21      	subs	r1, r4, r0
 800485a:	4630      	mov	r0, r6
 800485c:	f000 f80a 	bl	8004874 <_sbrk_r>
 8004860:	3001      	adds	r0, #1
 8004862:	d0cd      	beq.n	8004800 <_malloc_r+0x48>
 8004864:	6025      	str	r5, [r4, #0]
 8004866:	e7d9      	b.n	800481c <_malloc_r+0x64>
 8004868:	bd70      	pop	{r4, r5, r6, pc}
 800486a:	bf00      	nop
 800486c:	20001dfc 	.word	0x20001dfc
 8004870:	20001e00 	.word	0x20001e00

08004874 <_sbrk_r>:
 8004874:	b538      	push	{r3, r4, r5, lr}
 8004876:	4c06      	ldr	r4, [pc, #24]	; (8004890 <_sbrk_r+0x1c>)
 8004878:	2300      	movs	r3, #0
 800487a:	4605      	mov	r5, r0
 800487c:	4608      	mov	r0, r1
 800487e:	6023      	str	r3, [r4, #0]
 8004880:	f7ff f8e0 	bl	8003a44 <_sbrk>
 8004884:	1c43      	adds	r3, r0, #1
 8004886:	d102      	bne.n	800488e <_sbrk_r+0x1a>
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	b103      	cbz	r3, 800488e <_sbrk_r+0x1a>
 800488c:	602b      	str	r3, [r5, #0]
 800488e:	bd38      	pop	{r3, r4, r5, pc}
 8004890:	20001ec4 	.word	0x20001ec4

08004894 <__sread>:
 8004894:	b510      	push	{r4, lr}
 8004896:	460c      	mov	r4, r1
 8004898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800489c:	f000 f896 	bl	80049cc <_read_r>
 80048a0:	2800      	cmp	r0, #0
 80048a2:	bfab      	itete	ge
 80048a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80048a6:	89a3      	ldrhlt	r3, [r4, #12]
 80048a8:	181b      	addge	r3, r3, r0
 80048aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80048ae:	bfac      	ite	ge
 80048b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80048b2:	81a3      	strhlt	r3, [r4, #12]
 80048b4:	bd10      	pop	{r4, pc}

080048b6 <__swrite>:
 80048b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048ba:	461f      	mov	r7, r3
 80048bc:	898b      	ldrh	r3, [r1, #12]
 80048be:	05db      	lsls	r3, r3, #23
 80048c0:	4605      	mov	r5, r0
 80048c2:	460c      	mov	r4, r1
 80048c4:	4616      	mov	r6, r2
 80048c6:	d505      	bpl.n	80048d4 <__swrite+0x1e>
 80048c8:	2302      	movs	r3, #2
 80048ca:	2200      	movs	r2, #0
 80048cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048d0:	f000 f868 	bl	80049a4 <_lseek_r>
 80048d4:	89a3      	ldrh	r3, [r4, #12]
 80048d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048de:	81a3      	strh	r3, [r4, #12]
 80048e0:	4632      	mov	r2, r6
 80048e2:	463b      	mov	r3, r7
 80048e4:	4628      	mov	r0, r5
 80048e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048ea:	f000 b817 	b.w	800491c <_write_r>

080048ee <__sseek>:
 80048ee:	b510      	push	{r4, lr}
 80048f0:	460c      	mov	r4, r1
 80048f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048f6:	f000 f855 	bl	80049a4 <_lseek_r>
 80048fa:	1c43      	adds	r3, r0, #1
 80048fc:	89a3      	ldrh	r3, [r4, #12]
 80048fe:	bf15      	itete	ne
 8004900:	6560      	strne	r0, [r4, #84]	; 0x54
 8004902:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004906:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800490a:	81a3      	strheq	r3, [r4, #12]
 800490c:	bf18      	it	ne
 800490e:	81a3      	strhne	r3, [r4, #12]
 8004910:	bd10      	pop	{r4, pc}

08004912 <__sclose>:
 8004912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004916:	f000 b813 	b.w	8004940 <_close_r>
	...

0800491c <_write_r>:
 800491c:	b538      	push	{r3, r4, r5, lr}
 800491e:	4c07      	ldr	r4, [pc, #28]	; (800493c <_write_r+0x20>)
 8004920:	4605      	mov	r5, r0
 8004922:	4608      	mov	r0, r1
 8004924:	4611      	mov	r1, r2
 8004926:	2200      	movs	r2, #0
 8004928:	6022      	str	r2, [r4, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	f7ff f86c 	bl	8003a08 <_write>
 8004930:	1c43      	adds	r3, r0, #1
 8004932:	d102      	bne.n	800493a <_write_r+0x1e>
 8004934:	6823      	ldr	r3, [r4, #0]
 8004936:	b103      	cbz	r3, 800493a <_write_r+0x1e>
 8004938:	602b      	str	r3, [r5, #0]
 800493a:	bd38      	pop	{r3, r4, r5, pc}
 800493c:	20001ec4 	.word	0x20001ec4

08004940 <_close_r>:
 8004940:	b538      	push	{r3, r4, r5, lr}
 8004942:	4c06      	ldr	r4, [pc, #24]	; (800495c <_close_r+0x1c>)
 8004944:	2300      	movs	r3, #0
 8004946:	4605      	mov	r5, r0
 8004948:	4608      	mov	r0, r1
 800494a:	6023      	str	r3, [r4, #0]
 800494c:	f7ff f89a 	bl	8003a84 <_close>
 8004950:	1c43      	adds	r3, r0, #1
 8004952:	d102      	bne.n	800495a <_close_r+0x1a>
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	b103      	cbz	r3, 800495a <_close_r+0x1a>
 8004958:	602b      	str	r3, [r5, #0]
 800495a:	bd38      	pop	{r3, r4, r5, pc}
 800495c:	20001ec4 	.word	0x20001ec4

08004960 <_fstat_r>:
 8004960:	b538      	push	{r3, r4, r5, lr}
 8004962:	4c07      	ldr	r4, [pc, #28]	; (8004980 <_fstat_r+0x20>)
 8004964:	2300      	movs	r3, #0
 8004966:	4605      	mov	r5, r0
 8004968:	4608      	mov	r0, r1
 800496a:	4611      	mov	r1, r2
 800496c:	6023      	str	r3, [r4, #0]
 800496e:	f7ff f89b 	bl	8003aa8 <_fstat>
 8004972:	1c43      	adds	r3, r0, #1
 8004974:	d102      	bne.n	800497c <_fstat_r+0x1c>
 8004976:	6823      	ldr	r3, [r4, #0]
 8004978:	b103      	cbz	r3, 800497c <_fstat_r+0x1c>
 800497a:	602b      	str	r3, [r5, #0]
 800497c:	bd38      	pop	{r3, r4, r5, pc}
 800497e:	bf00      	nop
 8004980:	20001ec4 	.word	0x20001ec4

08004984 <_isatty_r>:
 8004984:	b538      	push	{r3, r4, r5, lr}
 8004986:	4c06      	ldr	r4, [pc, #24]	; (80049a0 <_isatty_r+0x1c>)
 8004988:	2300      	movs	r3, #0
 800498a:	4605      	mov	r5, r0
 800498c:	4608      	mov	r0, r1
 800498e:	6023      	str	r3, [r4, #0]
 8004990:	f7ff f89c 	bl	8003acc <_isatty>
 8004994:	1c43      	adds	r3, r0, #1
 8004996:	d102      	bne.n	800499e <_isatty_r+0x1a>
 8004998:	6823      	ldr	r3, [r4, #0]
 800499a:	b103      	cbz	r3, 800499e <_isatty_r+0x1a>
 800499c:	602b      	str	r3, [r5, #0]
 800499e:	bd38      	pop	{r3, r4, r5, pc}
 80049a0:	20001ec4 	.word	0x20001ec4

080049a4 <_lseek_r>:
 80049a4:	b538      	push	{r3, r4, r5, lr}
 80049a6:	4c07      	ldr	r4, [pc, #28]	; (80049c4 <_lseek_r+0x20>)
 80049a8:	4605      	mov	r5, r0
 80049aa:	4608      	mov	r0, r1
 80049ac:	4611      	mov	r1, r2
 80049ae:	2200      	movs	r2, #0
 80049b0:	6022      	str	r2, [r4, #0]
 80049b2:	461a      	mov	r2, r3
 80049b4:	f7ff f89a 	bl	8003aec <_lseek>
 80049b8:	1c43      	adds	r3, r0, #1
 80049ba:	d102      	bne.n	80049c2 <_lseek_r+0x1e>
 80049bc:	6823      	ldr	r3, [r4, #0]
 80049be:	b103      	cbz	r3, 80049c2 <_lseek_r+0x1e>
 80049c0:	602b      	str	r3, [r5, #0]
 80049c2:	bd38      	pop	{r3, r4, r5, pc}
 80049c4:	20001ec4 	.word	0x20001ec4

080049c8 <__malloc_lock>:
 80049c8:	4770      	bx	lr

080049ca <__malloc_unlock>:
 80049ca:	4770      	bx	lr

080049cc <_read_r>:
 80049cc:	b538      	push	{r3, r4, r5, lr}
 80049ce:	4c07      	ldr	r4, [pc, #28]	; (80049ec <_read_r+0x20>)
 80049d0:	4605      	mov	r5, r0
 80049d2:	4608      	mov	r0, r1
 80049d4:	4611      	mov	r1, r2
 80049d6:	2200      	movs	r2, #0
 80049d8:	6022      	str	r2, [r4, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	f7ff f89a 	bl	8003b14 <_read>
 80049e0:	1c43      	adds	r3, r0, #1
 80049e2:	d102      	bne.n	80049ea <_read_r+0x1e>
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	b103      	cbz	r3, 80049ea <_read_r+0x1e>
 80049e8:	602b      	str	r3, [r5, #0]
 80049ea:	bd38      	pop	{r3, r4, r5, pc}
 80049ec:	20001ec4 	.word	0x20001ec4
 80049f0:	454c4449 	.word	0x454c4449
 80049f4:	00000000 	.word	0x00000000
 80049f8:	20726d54 	.word	0x20726d54
 80049fc:	00637653 	.word	0x00637653
 8004a00:	51726d54 	.word	0x51726d54
 8004a04:	00000000 	.word	0x00000000
 8004a08:	6e69614d 	.word	0x6e69614d
 8004a0c:	75657551 	.word	0x75657551
 8004a10:	00000065 	.word	0x00000065
 8004a14:	776f6c46 	.word	0x776f6c46
 8004a18:	75657551 	.word	0x75657551
 8004a1c:	00000065 	.word	0x00000065
 8004a20:	72616f42 	.word	0x72616f42
 8004a24:	61745364 	.word	0x61745364
 8004a28:	75516574 	.word	0x75516574
 8004a2c:	00657565 	.word	0x00657565
 8004a30:	65764578 	.word	0x65764578
 8004a34:	6553746e 	.word	0x6553746e
 8004a38:	6870616d 	.word	0x6870616d
 8004a3c:	0065726f 	.word	0x0065726f
 8004a40:	66617274 	.word	0x66617274
 8004a44:	5f636966 	.word	0x5f636966
 8004a48:	5f6e6567 	.word	0x5f6e6567
 8004a4c:	6b736174 	.word	0x6b736174
 8004a50:	00000000 	.word	0x00000000
 8004a54:	5f746f70 	.word	0x5f746f70
 8004a58:	64616572 	.word	0x64616572
 8004a5c:	7361745f 	.word	0x7361745f
 8004a60:	0000006b 	.word	0x0000006b
 8004a64:	6867696c 	.word	0x6867696c
 8004a68:	74735f74 	.word	0x74735f74
 8004a6c:	5f657461 	.word	0x5f657461
 8004a70:	6b736174 	.word	0x6b736174
 8004a74:	00000000 	.word	0x00000000
 8004a78:	5f64656c 	.word	0x5f64656c
 8004a7c:	74617473 	.word	0x74617473
 8004a80:	61745f65 	.word	0x61745f65
 8004a84:	00006b73 	.word	0x00006b73
 8004a88:	6867694c 	.word	0x6867694c
 8004a8c:	203a7374 	.word	0x203a7374
 8004a90:	46206325 	.word	0x46206325
 8004a94:	3a776f6c 	.word	0x3a776f6c
 8004a98:	756c2520 	.word	0x756c2520
 8004a9c:	61725420 	.word	0x61725420
 8004aa0:	63696666 	.word	0x63696666
 8004aa4:	6c25203a 	.word	0x6c25203a
 8004aa8:	00000a75 	.word	0x00000a75
 8004aac:	6f727265 	.word	0x6f727265
 8004ab0:	00000072 	.word	0x00000072

08004ab4 <__sf_fake_stderr>:
	...

08004ad4 <__sf_fake_stdin>:
	...

08004af4 <__sf_fake_stdout>:
	...

08004b14 <_global_impure_ptr>:
 8004b14:	2000001c                                ... 

08004b18 <_init>:
 8004b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1a:	bf00      	nop
 8004b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b1e:	bc08      	pop	{r3}
 8004b20:	469e      	mov	lr, r3
 8004b22:	4770      	bx	lr

08004b24 <_fini>:
 8004b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b26:	bf00      	nop
 8004b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b2a:	bc08      	pop	{r3}
 8004b2c:	469e      	mov	lr, r3
 8004b2e:	4770      	bx	lr
